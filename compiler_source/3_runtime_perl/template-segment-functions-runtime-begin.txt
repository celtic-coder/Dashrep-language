# no-space dashes-long-line  <new_line>
#  Execute starting/main function  <new_line>
<new_line>

my $operating_system_name = $^O ;  <new_line>
if ( $operating_system_name !~ /[Ww]in/ ) {  <new_line>
    $global_dashrep_replacement{ 'operating hyphen-here system hyphen-here slash hyphen-here or hyphen-here backslash' } = '/' ;  <new_line>
} else {  <new_line>
    $global_dashrep_replacement{ 'operating hyphen-here system hyphen-here slash hyphen-here or hyphen-here backslash' } = "\\" ;  <new_line>
}  <new_line>

if ( ( exists( $global_dashrep_replacement{ 'yes<character_hyphen>or<character_hyphen>no<character_hyphen>count<character_hyphen>phrase<character_hyphen>usage' } ) ) && ( $global_dashrep_replacement{ 'yes<character_hyphen>or<character_hyphen>no<character_hyphen>count<character_hyphen>phrase<character_hyphen>usage' } eq 'yes' ) ) {  <new_line>
    $global_yes_or_no_count_phrase_usage = $global_yes ;  <new_line>
} else {  <new_line>
    $global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
}  <new_line>

$global_accumulator[ 1 ] = '' ;  <new_line>
& no-space function-name-prefix no-space start_here( ) ;  <new_line>
$output_results = &dashrep_expand_phrases( $global_accumulator[ 1 ] ) ;  <new_line>

if ( ( exists( code-get-or-put-phrase-definition-begin 'standard<character_hyphen>output' code-get-or-put-phrase-definition-end ) ) && ( code-get-or-put-phrase-definition-begin 'standard<character_hyphen>output' code-get-or-put-phrase-definition-end ne '' ) ) {  <new_line>
    print code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ;  <new_line>
    if ( $global_yes_or_no_trace_output_file_is_open == $global_yes ) {  <new_line>
        print TRACE_OUT "\n\n\n" . $output_results . "\n" ;  <new_line>
    }  <new_line>
} else {  <new_line>
    print $output_results . "\n" ;  <new_line>
}  <new_line>

exit ;  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Begin runtime functions  <new_line>
<new_line>
