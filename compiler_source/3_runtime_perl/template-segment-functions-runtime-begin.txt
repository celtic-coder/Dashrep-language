# no-space dashes-long-line  <new_line>
#  Execute starting/main function  <new_line>
<new_line>

# special initialization to fix bug somewhere earlier in code, but some or most of these are probably not needed:  <new_line>

$global_dashrep_replacement{ 'dashrep hyphen-here version' } = '4.00' ;  <new_line>
$global_dashrep_replacement{ 'empty hyphen-here text' } = '' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here space' } = ' ' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here hyphen' } = '<character_hyphen>' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here newline' } = "\n" ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here open hyphen-here square hyphen-here bracket' } = '[' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here close hyphen-here square hyphen-here bracket' } = ']' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here tab' } = "\t" ;  <new_line>
$global_dashrep_replacement{ 'four hyphen-here hyphens' } = '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here comments hyphen-here ignored' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here endless hyphen-here loop hyphen-here counter hyphen-here limit' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here time hyphen-here limit' } = '1200' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here debug hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here xml hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here xml hyphen-here level hyphen-here reset hyphen-here if hyphen-here zero' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here first hyphen-here xml hyphen-here tag hyphen-here name' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here export hyphen-here delimited hyphen-here definitions' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here stop hyphen-here translation' } = '' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here phrases hyphen-here newly hyphen-here defined' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here undefined' } = 'dashrep_undefined' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here begin' } = 'entry_begin' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here end' } = 'entry_end' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here unique' } = 'url' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here matching hyphen-here id' } = '1' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here delete' } = 'delete_id' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here recent hyphen-here phrase hyphen-here name hyphen-here replaced' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here use hyphen-here slower hyphen-here subset hyphen-here expand' } = 'no' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here expand hyphen-here special hyphen-here phrases' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here language hyphen-here yes' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here unique hyphen-here word hyphen-here counts' } = '' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here pointers hyphen-here to hyphen-here unique hyphen-here words' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here list hyphen-here of hyphen-here recognized hyphen-here phrase hyphen-here names' } = $global_dashrep_text_list_of_phrase_names ;  <new_line>

<new_line>

if ( ( exists( $global_dashrep_replacement{ 'yes-or-no-count-phrase-usage' } ) ) && ( $global_dashrep_replacement{ 'yes-or-no-count-phrase-usage' } eq 'yes' ) ) {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
}  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>
open ( TRACE_OUT , '>' . 'output_trace.txt' ) ;  <new_line>
# if ( length( code-get-or-put-phrase-definition-begin 'start<characer_hyphen>here' code-get-or-put-phrase-definition-end ) > 10 ) {  <new_line>
& no-space function-name-prefix no-space start_here( ) ;  <new_line>
# } else {  <new_line>
# $global_accumulator[ 1 ] = code-get-or-put-phrase-definition-begin 'source<characer_hyphen>code<characer_hyphen>as<characer_hyphen>words' code-get-or-put-phrase-definition-end ;  <new_line>
# }  <new_line>
$output_results = &dashrep_expand_phrases( $global_accumulator[ 1 ] ) ;  <new_line>
if ( ( exists( code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ) ) && ( code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ne '' ) ) {  <new_line>
print code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ;  <new_line>
print TRACE_OUT "\n\n\n" . $output_results . "\n" ;  <new_line>
} else {  <new_line>
print $output_results . "\n" ;  <new_line>
}  <new_line>

exit ;  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Begin runtime functions  <new_line>
<new_line>
