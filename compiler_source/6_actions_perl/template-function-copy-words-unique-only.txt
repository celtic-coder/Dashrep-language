# no-space dashes-long-line  <new_line>

sub function__copy_words_unique_only( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_unique_only' ; <new_line>
combee **** template-check-operand-one-is-phrase-name **** comenn
combee **** template-check-operand-two-is-phrase-name **** comenn


$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

$global_text_list_key = '' ;  <new_line>
$global_destination_phrase = $global_operand_two ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( not( exists( $global_listed_word{ $global_word } ) ) ) {  <new_line>
            if ( $global_occurrence_count_for_word{ $global_word } == 1 ) {  <new_line>
                $global_result_word_list .= $global_word . ' ' ;  <new_line>
                $global_number_of_unique_words ++ ;  <new_line>
                $global_unique_word_at_position[ $global_number_of_unique_words ] = $global_word ;  <new_line>
                $global_text_list_of_unique_word_pointers .= $global_pointer . ' ' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>
$global_text_list_of_unique_word_counts = '' ;  <new_line>
for ( $global_pointer = 1 ; $global_pointer <= $global_number_of_unique_words ; $global_pointer ++ ) {  <new_line>
    if ( $global_pointer > 1 ) {  <new_line>
        $global_text_list_of_unique_word_counts .= ' ' ;  <new_line>
    }  <new_line>
    $global_text_list_of_unique_word_counts .= sprintf( "%d" , $global_occurrence_count_for_word{ $global_unique_word_at_position[ $global_pointer ] } ) ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>unique<character_hyphen>word<character_hyphen>counts' } = $global_text_list_of_unique_word_counts ;  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>pointers<character_hyphen>to<character_hyphen>unique<character_hyphen>words' } = $global_text_list_of_unique_word_pointers ;  <new_line>

$global_target_text = $global_action_result ;  <new_line>

template-function-segment-ending
