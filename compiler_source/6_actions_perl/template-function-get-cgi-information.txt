# no-space dashes-long-line  <new_line>
# function__get_cgi_information  <new_line>
#  <new_line>

combee ****
#  Input is standard input or standard environmental values  <new_line>
#  Output are phrases that have names that begin with the text "input-" and otherwise are named using the cgi name  <new_line>
<new_line>
**** comenn

sub function__get_cgi_information( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_raw_input = '' ;  <new_line>
$global_line_count = 0 ;  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } = '' ;  <new_line>

if ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'GET' ) ) {  <new_line>

if ( ( exists( $ENV{ 'CONTENT_LENGTH' } ) ) && ( $ENV{ 'CONTENT_LENGTH' } > $global_cgi_string_length_limit ) ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'QUERY_STRING' } ) ) {  <new_line>
$global_raw_input = $ENV{ 'QUERY_STRING' } ;  <new_line>
}  <new_line>

} elsif ( ( exists( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) && ( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } =~ /^[^ ]+\.[^ ]+$/ ) && ( open( INFILE , $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) ) {  <new_line>

$global_yes_or_no_file_opened_for_reading = $global_yes ;  <new_line>

while( $global_input_line = <INFILE> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

# end of while loop  <new_line>
}  <new_line>

$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

} elsif ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'POST' ) ) {  <new_line>

while( $global_input_line = <STDIN> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

if ( $global_line_count > $global_cgi_line_length_limit ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

# end of while loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_dashrep_replacement{ 'input-raw-cgi-string' } = $global_raw_input ;  <new_line>

if ( $global_raw_input =~ /^(([^ <>]+)=([^ <>]*)(&([^ <>]+)=([^ <>]*))*) *$/ ) {  <new_line>
$global_raw_input = $1 ;  <new_line>
$global_raw_input =~ tr/+/ / ;  <new_line>
@global_name_value_pairs = split( /&/, $global_raw_input ) ;  <new_line>

foreach $global_name_value ( @global_name_value_pairs ) {  <new_line>
( $global_name, $global_value ) = split( /=/, $global_name_value, 2 ) ;  <new_line>

if ( not( defined( $global_value ) ) ) {  <new_line>
$global_value = '' ;  <new_line>
}  <new_line>

$global_name  =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_name  =~ s/[<>\/\\]+/_/g ;  <new_line>

if ( $global_name eq 'texttoimport' ) {  <new_line>
#               Special preservation of tabs, line breaks, etc. for imported text:  <new_line>
$global_value =~ s/%0D//ig ;  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
} else {  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_value =~ s/[<>]+/_/gm ;  <new_line>
$global_value =~ s/\n/<eol\/>/gm ;  <new_line>
}  <new_line>

$global_name = &function_parameterized__remove_leading_trailing_spaces( $global_name ) ;  <new_line>
$global_value = &function_parameterized__remove_leading_trailing_spaces( $global_value ) ;  <new_line>

if ( $global_name ne '' ) {  <new_line>
#  Prepend "input-" to the phrase name  <new_line>
$global_dashrep_replacement{ 'input-' . $global_name } = $global_value ;  <new_line>

if ( $dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } ne '' ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= ' ' ;  <new_line>
}  <new_line>

$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= 'input-' . $global_name ;  <new_line>
}  <new_line>

# end of foreach loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_raw_input = '' ;  <new_line>

if ( exists( $ENV{ 'REMOTE_ADDR' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-ip-address' } = $ENV{ 'REMOTE_ADDR' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'REMOTE_PORT' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-port-number' } = $ENV{ 'REMOTE_PORT' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'HTTP_COOKIE' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-cookie-contents' } = $ENV{ 'HTTP_COOKIE' } ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
