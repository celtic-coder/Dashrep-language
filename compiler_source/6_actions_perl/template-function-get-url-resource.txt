# no-space dashes-long-line  <new_line>
# function__get_url_resource  <new_line>
#  <new_line>

combee ****
#  Inputs are the Dashrep phrases "url-source-for-single-resource-request" and "filename-target-for-single-resource-request"  <new_line>
#  Output is the file specified by the (above) filename and the phrase "dashrep-path-prefix-for-file-writing", plus messages from the CURL command are put into phrase "trace-results-from-curl" <new_line>
<new_line>
#  The -k switch reqests ignoring any  <new_line>
#  https certificate errors (which are not important  <new_line>
#  because the downloaded resources are public).  <new_line>
#  <new_line>
#  The -s switch requests silent mode, which turns  <new_line>
#  off both errors and progress info.  <new_line>
#  <new_line>
#  The -S switch requests that errors be shown.  <new_line>
**** comenn

sub function__get_url_resource( ) {  <new_line>

# use local variables for command-related variables for added security  <new_line>
my $command_string_without_pipe ;  <new_line>
my $process_id ;  <new_line>

if ( ( not( exists( code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' code-get-or-put-phrase-definition-end ) ) ) || ( code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' code-get-or-put-phrase-definition-end ne 'yes' ) ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__get_url_resource__case_no_permission_to_write_files' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_valid_url( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = ' dashrep_compiled_runtime_error__get_url_resource__invalid_url ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_operand_two ) == $global_no ) {  <new_line>
$global_action_result = ' dashrep_compiled_runtime_error__get_url_resource__invalid_file_name ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_path_prefix = $global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' } ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__get_url_resource__invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_operand_two ;  <new_line>

# todo: pipe error output to ignored file because it shows progress indicator info; or, use flag to ignore progress indicator  <new_line>

$command_string_without_pipe = 'curl -k -s -S -o ' . $global_target_file_full_path . ' ' . $global_operand_one ;  <new_line>

if ( not( $process_id = open( CURLCMD , $command_string_without_pipe . "|" ) ) ) {  <new_line>
    $global_accumulated_text = 'cannot_run_curl_command ' . $command_string_without_pipe ;  <new_line>
} else {  <new_line>
    $global_accumulated_text = 'starting_curl_command ' . $command_string_without_pipe ;  <new_line>
    while( $global_input_line = <CURLCMD> ) {  <new_line>
        $global_accumulated_text .= ' ' . $global_input_line ;  <new_line>
    }  <new_line>
    $global_accumulated_text .= ' ending_curl_command' ;  <new_line>
    if ( not( close( CURLCMD ) ) ) {  <new_line>
        $global_accumulated_text .= ' cannot_close_handle_that_runs_curl_command' ;  <new_line>
    }  <new_line>
    chmod( 0600 , $global_target_file_full_path ) ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ 'trace-results-from-curl' } = $global_accumulated_text ;  <new_line>


return '' ;  <new_line>

template-function-segment-ending
