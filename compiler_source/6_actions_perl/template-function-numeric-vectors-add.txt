template-interpreter-function-begin

sub function__numeric_vectors_add( ) {  <new_line>

$global_single_value = 0 ;  <new_line>
$global_required_number_of_operands = $global_required_number_of_operands_for_action{ $global_action_name } ;  <new_line>
if ( $global_required_number_of_operands == 3 ) {  <new_line>
    $global_target_operand = $global_operand_three ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_target_operand = $global_operand_two ;  <new_line>
}  <new_line>
if ( ( $global_action_name eq 'numeric hyphen-here vector hyphen-here add hyphen-here number' ) || ( $global_action_name eq 'numeric hyphen-here vector hyphen-here multiply hyphen-here by hyphen-here number' ) ) {  <new_line>
    $global_single_value = $global_operand_two + 0 ;  <new_line>
}  <new_line>
if ( $global_dashrep_replacement{ $global_operand_one } !~ /^[ \<character_hyphen>0<character_hyphen>9\.]+$/ ) {  <new_line>
    $global_action_result = $global_dashrep_replacement{ 'dashrep hyphen-here undefined' } ;  <new_line>
    $global_replacement_text = $global_text_begin . $global_action_result . $global_text_end ;  <new_line>
    next ;  <new_line>
}  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
if ( ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here add' ) || ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here multiply' ) || ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here divide hyphen-here by' ) || ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here from hyphen-here delta hyphen-here values hyphen-here calculate hyphen-here distances' ) ) {  <new_line>
    $global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
    $global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
    $global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
    $global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
    @global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
}  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    if ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here add' )  <new_line>
    {  <new_line>
        $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] + $global_list_of_y_values[ $global_pair_pointer ] + 0 ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here multiply' )  <new_line>
    {  <new_line>
        $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] * $global_list_of_y_values[ $global_pair_pointer ] + 0 ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here divide hyphen-here by' )  <new_line>
    {  <new_line>
        if ( abs( $global_list_of_y_values[ $global_pair_pointer ] ) < 0.000001 )  <new_line>
        {  <new_line>
            $global_numeric_value = 1000000 ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] / $global_list_of_y_values[ $global_pair_pointer ] + 0 ;  <new_line>
        }  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vectors hyphen-here from hyphen-here delta hyphen-here values hyphen-here calculate hyphen-here distances' )  <new_line>
    {  <new_line>
        $global_numeric_value =  int( sqrt( ( $global_list_of_x_values[ $global_pair_pointer ] ** 2 ) + ( $global_list_of_y_values[ $global_pair_pointer ] ** 2 ) ) + 0.5 ) ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vector hyphen-here add hyphen-here number' )  <new_line>
    {  <new_line>
        $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] + $global_single_value + 0 ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vector hyphen-here multiply hyphen-here by hyphen-here number' )  <new_line>
    {  <new_line>
        $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] * $global_single_value ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vector hyphen-here integers' )  <new_line>
    {  <new_line>
        $global_numeric_value = int( $global_list_of_x_values[ $global_pair_pointer ] + 0 ) ;  <new_line>
    } elsif ( $global_action_name eq 'numeric hyphen-here vector hyphen-here absolutes' )  <new_line>
    {  <new_line>
        $global_numeric_value = abs( $global_list_of_x_values[ $global_pair_pointer ] + 0 ) ;  <new_line>
    }  <new_line>
    if ( $global_numeric_value == 0 )  <new_line>
    {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else  <new_line>
    {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
