template-interpreter-function-begin

sub function__write_dashrep_definitions_listed_in_phrase_to_file( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_phrase_name eq "" ) || ( $global_target_filename eq "" ) || ( $global_operand_two eq "" ) )  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_phrase_name . " and " . $global_target_filename . " and " . $global_operand_two . "]" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_definitions_or_phrase_names = "definitions" ;  <new_line>
    @list_of_phrases = split( /[ \n\r]+/ , $global_dashrep_replacement{ $global_source_phrase_name } ) ;  <new_line>
    @sequence_of_phrases = @list_of_phrases ;  <new_line>
}  <new_line>
} elsif ( $global_action_name eq "write hyphen-here all hyphen-here dashrep hyphen-here definitions hyphen-here to hyphen-here file" )  <new_line>
{  <new_line>
if ( ( $global_target_filename eq "" ) || ( $global_operand_two ne "" ) )  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_target_filename . " and " . $global_operand_two . "]" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_definitions_or_phrase_names = "definitions" ;  <new_line>

    @list_of_phrases = keys( %global_dashrep_replacement ) ;  <new_line>

    @sequence_of_phrases = sort( @list_of_phrases ) ;  <new_line>
    unshift( @sequence_of_phrases , "dashrep hyphen-here language hyphen-here yes" ) ;  <new_line>
}  <new_line>
}  <new_line>
if ( $global_definitions_or_phrase_names ne "" )  <new_line>
{  <new_line>
if ( $global_#list_of_phrases < 0 )  <new_line>
{  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" )  <new_line>
    {  <new_line>
        $global_trace_log .= "{{trace; warning: no phrases to write (to file)}}\n" ;  <new_line>
    }  <new_line>
} else  <new_line>
{  <new_line>
    $global_nesting_level_of_file_actions ++ ;  <new_line>
    if ( $global_nesting_level_of_file_actions > 1 )  <new_line>
    {  <new_line>
        $global_possible_error_message .= " [warning, file hyphen-here related action called recursivley, which is not allowed]" ;  <new_line>
    } elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files" } ne "yes" )  <new_line>
    {  <new_line>
        $global_possible_error_message .= " [warning, do not have permission to delete or overwrite files]" ;  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here export hyphen-here delimited hyphen-here definitions" } eq "yes" )  <new_line>
    {  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here all hyphen-here begin" } ) )  <new_line>
        {  <new_line>
            $global_all_defs_begin = "[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here begin<character_hyphen>]\n\n" ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_all_defs_begin = "" ;  <new_line>
        }  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here all hyphen-here end" } ) )  <new_line>
        {  <new_line>
            $global_all_defs_end = "[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_all_defs_end = "" ;  <new_line>
        }  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here phrase hyphen-here begin" } ) )  <new_line>
        {  <new_line>
            $global_phrase_begin = "[<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here begin<character_hyphen>] " ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_phrase_begin = "" ;  <new_line>
        }  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here phrase hyphen-here end" } ) )  <new_line>
        {  <new_line>
            $global_phrase_end = " [<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_phrase_end = "" ;  <new_line>
        }  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here def hyphen-here begin" } ) )  <new_line>
        {  <new_line>
            $global_def_begin = "[<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here begin<character_hyphen>] " ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_def_begin = "" ;  <new_line>
        }  <new_line>
        if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here def hyphen-here end" } ) )  <new_line>
        {  <new_line>
            $global_def_end = " [<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_def_end = "" ;  <new_line>
        }  <new_line>
    } else  <new_line>
    {  <new_line>
        $global_all_defs_begin = "dashrep hyphen-here definitions hyphen-here begin\n\n" ;  <new_line>
        $global_all_defs_end = "dashrep hyphen-here definitions hyphen-here end\n\n" ;  <new_line>
        $global_phrase_begin = "" ;  <new_line>
        $global_phrase_end = ":\n" ;  <new_line>
        $global_def_begin = "" ;  <new_line>
        $global_def_end = "\n<character_hyphen><character_hyphen><character_hyphen><character_hyphen><character_hyphen>\n\n" ;  <new_line>
    }  <new_line>
    if ( $global_possible_error_message eq "" )  <new_line>
    {  <new_line>
        if ( open ( OUTFILE , '>' . $global_target_filename ) )  <new_line>
        {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else  <new_line>
        {  <new_line>
            $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be opened for writing]" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" )  <new_line>
        {  <new_line>
            $global_counter = 0 ;  <new_line>
            if ( $global_definitions_or_phrase_names eq "definitions" )  <new_line>
            {  <new_line>
                print OUTFILE $global_all_defs_begin ;  <new_line>
                foreach $global_phrase_name ( @sequence_of_phrases )  <new_line>
                {  <new_line>
                    if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /^[^ ]+$/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( defined( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne "four hyphen-here hyphens" ) )  <new_line>
                    {  <new_line>
                        print OUTFILE $global_phrase_begin . $global_phrase_name . $global_phrase_end . $global_def_begin . $global_dashrep_replacement{ $global_phrase_name } . $global_def_end ;  <new_line>
                        $global_counter ++ ;  <new_line>
                    }  <new_line>
                }  <new_line>
                print OUTFILE $global_all_defs_end ;  <new_line>
            } else  <new_line>
            {  <new_line>
                foreach $global_phrase_name ( @sequence_of_phrases )  <new_line>
                {  <new_line>
                    if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /[^ ]/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne "four hyphen-here hyphens" ) )  <new_line>
                    {  <new_line>
                        print OUTFILE $global_phrase_name . "\n" ;  <new_line>
                        $global_counter ++ ;  <new_line>
                    }  <new_line>
                }  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" )  <new_line>
            {  <new_line>
                $global_trace_log .= "{{trace; wrote " . $global_counter . " " . $global_definitions_or_phrase_names . " to file: " . $global_target_filename . "}}\n" ;  <new_line>
            }  <new_line>
        } else  <new_line>
        {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" )  <new_line>
            {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( OUTFILE ) ;  <new_line>
        if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) )  <new_line>
        {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" )  <new_line>
            {  <new_line>
                $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_nesting_level_of_file_actions <character_hyphen><character_hyphen> ;  <new_line>
}  <new_line>

template-interpreter-function-end
