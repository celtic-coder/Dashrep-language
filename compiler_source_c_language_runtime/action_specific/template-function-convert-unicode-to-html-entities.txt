comment-dashed-line  <new_line>

int function__convert_unicode_to_html_entities( ) {  <new_line>
itemid_action_name_with_underscores = 'convert_unicode_to_html_entities' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

//  Converts non hyphen-here ASCII characters, and convert a few  <new_line>
//  ASCII characters such as:  <new_line>
//  11 which is "LF" (line feed)  <new_line>
//  13 which is "CR" (carriage return)  <new_line>
//  127 which is "del"  <new_line>

itemid_action_result = '' ;  <new_line>
itemid_source_phrase_name = itemid_operand_one ;  <new_line>
itemid_target_phrase_name = itemid_operand_two ;  <new_line>
if ( not( exists( function_parameterized__get_dashrep_replacement( itemid_source_phrase_name } ) ) ) {  <new_line>
    function_parameterized__get_dashrep_replacement( itemid_source_phrase_name } = '' ;  <new_line>
}  <new_line>
itemid_accumulated_text = '' ;  <new_line>
@global_octet_number_at_position = unpack( "C*" , function_parameterized__get_dashrep_replacement( itemid_source_phrase_name } ) ;  <new_line>
itemid_yes_or_no_within_ampersand_encoded_character = 'no' ;  <new_line>
itemid_pointer = -1 ;  <new_line>
while ( itemid_pointer < c_run_count_of_words_in_octet_number_at_position ) {  <new_line>
    itemid_pointer ++ ;  <new_line>
    itemid_octet_number = itemid_octet_number_at_position[ itemid_pointer ] ;  <new_line>
    if ( itemid_octet_number < 32 ) {  <new_line>
        itemid_unicode_number = itemid_octet_number ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
    } else if ( itemid_octet_number < 127 ) {  <new_line>
        itemid_accumulated_text .= chr( itemid_octet_number ) ;  <new_line>
    } else if ( itemid_octet_number >= 0xfc ) {  <new_line>
        itemid_unicode_number = ( ( ( ( ( ( ( ( ( ( itemid_octet_number - 0xfc ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 1 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 2 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 3 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 4 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 5 ] - 128 ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
        itemid_pointer += 5 ;  <new_line>
    } else if ( itemid_octet_number >= 0xf8 ) {  <new_line>
        itemid_unicode_number = ( ( ( ( ( ( ( ( itemid_octet_number - 0xf8 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 1 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 2 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 3 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 4 ] - 128 ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
        itemid_pointer += 4 ;  <new_line>
    } else if ( itemid_octet_number >= 0xf0 ) {  <new_line>
        itemid_unicode_number = ( ( ( ( ( ( itemid_octet_number - 0xf0 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 1 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 2 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 3 ] - 128 ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
        itemid_pointer += 3 ;  <new_line>
    } else if ( itemid_octet_number >= 0xe0 ) {  <new_line>
        itemid_unicode_number = ( ( ( ( itemid_octet_number - 0xe0 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 1 ] - 128 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 2 ] - 128 ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
        itemid_pointer += 2 ;  <new_line>
    } else if ( itemid_octet_number >= 0xc0 ) {  <new_line>
        itemid_unicode_number = ( ( itemid_octet_number - 0xc0 ) * 64 ) + itemid_octet_number_at_position[ itemid_pointer + 1 ] - 128 ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
        itemid_pointer += 1 ;  <new_line>
    } else if ( itemid_octet_number > 0 ) {  <new_line>
        itemid_unicode_number = itemid_octet_number ;  <new_line>
        itemid_accumulated_text .= '&#' . itemid_unicode_number . ';' ;  <new_line>
    }  <new_line>
}  <new_line>
function_parameterized__put_dashrep_replacement( itemid_target_phrase_name } = itemid_accumulated_text ;  <new_line>
return '' ;  <new_line>

template-function-segment-ending
