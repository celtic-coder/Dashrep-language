dashdef-copyright-notice:
All the code and text in this collection of Dashrep phrase definitions are (c) Copyright 2017 by the entity who owns the source code from which this object code was generated, and who is specified in a separate copyright statement within one of the following files within this collection. ALL RIGHTS RESERVED.
----
0-documentation-for-compiler:
Limitations:

* Cannot expand parameters within a named phrase if that phrase was not supplied to the compiler as source code.  In other words, if during runtime the compiled code imports (or generates) a new phrase with a new definition, and that definition includes parameter phrases, those parameter phrases will be be expanded as parameter phrases.  The static definition of such a phrase will get inserted, but the parameter brackets are ignored.

* Within parameter brackets, the operands that follow the action name must not expand in a way that effectively inserts a space. In other words, the counting of an action's operands is done during compilation, not during runtime.
----
check-elapsed-time:
*---
[-put-into-phrase epoch-seconds-current-time  [-get-current-time-in-epoch-seconds-] -]
[-put-into-phrase elapsed-time  [-numeric-minus [-epoch-seconds-current-time-] [-epoch-seconds-starting-time-]-] -]


[-trace-show elapsed-time-]
---*
----
compile-source-code-finish:
[-copy-words-found-only-in-first-list list-of-functions-generated list-of-function-branches-already-generated list-of-function-branches-yet-to-generate-]
[-copy-words-unique-only list-of-function-branches-yet-to-generate list-of-function-branches-yet-to-generate-]
[-copy-words-sort-alphabetic list-of-function-branches-yet-to-generate list-of-function-branches-yet-to-generate-]
[-use-handler-with-each-word-in-phrase generate-runtime-code-for-one-function-branch list-of-function-branches-yet-to-generate-]

[-use-handler-with-each-word-in-phrase generate-runtime-code-for-external-function-branch list-of-functions-in-optional-code-modified-]

[-copy-words-found-only-in-first-list list-of-function-branches-needed list-of-functions-in-optional-code list-of-functions-replacement-only-needed-]
[-copy-words-found-only-in-first-list list-of-functions-replacement-only-needed list-of-functions-in-optional-code-modified list-of-functions-replacement-only-needed-]
[-copy-words-found-only-in-first-list list-of-functions-replacement-only-needed list-of-function-branches-yet-to-generate list-of-functions-replacement-only-needed-]
[-copy-words-unique-only list-of-functions-replacement-only-needed list-of-functions-replacement-only-needed-]
[-copy-words-sort-alphabetic list-of-functions-replacement-only-needed list-of-functions-replacement-only-needed-]
[-use-handler-with-each-word-in-phrase generate-runtime-code-for-one-function-replacement-only list-of-functions-replacement-only-needed-]

[-copy-words-unique-only list-of-special-handled-dashrep-actions-used list-of-special-handled-dashrep-actions-used-]
[-copy-words-sort-alphabetic list-of-special-handled-dashrep-actions-used list-of-special-handled-dashrep-actions-used-]
[-trace-show list-of-special-handled-dashrep-actions-used-]

[-copy-words-unique-only list-of-converted-dashrep-actions-used list-of-converted-dashrep-actions-used-]
[-copy-words-sort-alphabetic list-of-converted-dashrep-actions-used list-of-converted-dashrep-actions-used-]
[-trace-show list-of-converted-dashrep-actions-used-]

[-copy-words-unique-only list-of-unconverted-dashrep-actions-used list-of-unconverted-dashrep-actions-used-]
[-copy-words-sort-alphabetic list-of-unconverted-dashrep-actions-used list-of-unconverted-dashrep-actions-used-]
[-trace-show list-of-unconverted-dashrep-actions-used-]
----
compile-source-code-generate-output-results:
[-compile-source-code-initialize-]
[-convert-source-code-into-words-]


[-trace-show source-code-as-words-]


[-clear-phrase phrase-being-defined-]
[-put-into-phrase yes-or-no-within-comment  no -]
[-use-handler-with-each-word-in-phrase filter-tokens-case-1 source-code-as-words-]
[-compile-source-code-finish-]
----
compile-source-code-initialize:
[-put-into-phrase local-or-batch-mode  local -]
[-put-into-phrase dashrep-time-limit  50000 -]
[-put-into-phrase dashrep-endless-loop-counter-limit  900000000 -]
[-put-into-phrase epoch-seconds-starting-time  [-get-current-time-in-epoch-seconds-] -]

[-define-special-strings-]
[-generate-versions-of-function-point-to-word-in-operand-]
[-use-handler-with-each-word-in-phrase expand-one-template list-of-static-segments-need-to-expand-]
[-use-handler-with-each-word-in-phrase generate-runtime-code-using-quoted-string list-of-phrases-with-quoted-strings-]
[-assign-action-operand-characteristics-]
[-put-into-phrase current-storage-position  1001 -]
[-put-into-phrase count-of-ambee-tokens  0 -]
[-put-into-phrase count-of-amenn-tokens  0 -]
[-clear-phrase list-of-template-functions-for-requested-actions-]
----
convert-source-code-into-words:
[-copy-and-replace source-code source-code-as-words string-space-end-of-line-here-space string-placeholder-special-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-end-of-line-here-space string-placeholder-special-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]
[-convert-source-code-replace-parameter-brackets-with-ambee-and-amenn-]
[-copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-to-combee-comenn-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-space-no-space-character-hyphen-no-space-space-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]

*--- need to do at least twice because of potential overlap ---*
[-put-into-phrase count-1-2  1 2 -]
[-use-handler-with-each-word-in-phrase convert-source-code-simplify-no-space-one-space-directives count-1-2 -]

*---
[-copy-and-replace source-code-as-words source-code-as-words string-space-one-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space character-space-]
---*

[-copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-hyphens-into-defenns-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-replacement-for-hyphen-here-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]
[-copy-and-replace source-code-as-words source-code-as-lines character-space character-newline-]
----
convert-source-code-replace-parameter-brackets-with-ambee-and-amenn:
*---
[-trace-show source-code-as-words-]
---*

[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-open-bracket-dash string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]

[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-open-bracket-dash string-dash-close-bracket-nospay-open-bracket-dash-]

[-copy-and-replace source-code-as-words source-code-as-words string-dash-open-bracket-dash string-space-fen-ambee-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash string-space-amenn-fen-space-]

[-generate-positions-of-delimiter string-open-bracket-dash source-code-as-words pointers-to-delimiters-begin-]
[-numeric-vector-add-number pointers-to-delimiters-begin -1 pointers-to-just-before-delimiters-begin-]
[-generate-positions-of-delimiter string-dash-close-bracket source-code-as-words pointers-to-delimiters-end-]
[-numeric-vector-add-number pointers-to-delimiters-end 2 pointers-to-just-after-delimiters-end-]
[-copy-text pointers-to-just-before-delimiters-begin pointers-to-adjacent-characters-]
[-append-text pointers-to-just-after-delimiters-end pointers-to-adjacent-characters-]
[-use-handler-with-each-word-in-phrase get-source-code-character-at-adjacent-position pointers-to-adjacent-characters-]
[-copy-words-unique-only list-of-adjacent-characters list-of-adjacent-characters-]
[-copy-words-found-only-in-first-list list-of-adjacent-characters character-hyphen list-of-adjacent-characters-]

[-use-handler-with-each-word-in-phrase convert-source-handle-nospay-insertions list-of-adjacent-characters-]

[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash string-space-ambee-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket string-space-amenn-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-amennfenambee-space string-space-amenn-fen-ambee-space-]
----
convert-source-code-simplify-no-space-one-space-directives:
[-if-no-begin [-yes-or-no-same-two-words 0 [-put-into-phrase either-zero-if-not-found-else-non-zero [-get-position-of-matching-text string-space-one-space-space source-code-as-words-]-]-]-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-one-space-no-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-no-space-one-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space-]
[-if-end-]
----
convert-source-handle-nospay-insertions:
[-copy-text word-to-use-in-handler current-symbol-]

[-copy-text current-symbol string-symbol-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-symbol-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-symbol-]
[-append-text-no-space current-symbol string-dash-close-bracket-symbol-]

[-copy-text current-symbol string-symbol-nospay-open-bracket-dash-]
[-append-text string-nospay string-symbol-nospay-open-bracket-dash-]
[-append-text string-open-bracket-dash string-symbol-nospay-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-nospay-symbol-]
[-append-text string-nospay string-dash-close-bracket-nospay-symbol-]
[-append-text current-symbol string-dash-close-bracket-nospay-symbol-]

*--- do twice in case symbol is adjacent to both open and close parameter brackets ---*
[-copy-and-replace source-code-as-words source-code-as-words string-symbol-open-bracket-dash string-symbol-nospay-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-symbol-open-bracket-dash string-symbol-nospay-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-symbol string-dash-close-bracket-nospay-symbol-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-symbol string-dash-close-bracket-nospay-symbol-]
----
create-new-result-storage-position:
[-put-into-phrase storage-type  result -]
[-create-new-storage-position-]
----
create-new-storage-position:
[-numeric-increment current-storage-position-]
[-clear-phrase contents-at-storage-position-[-current-storage-position-]-]
[-copy-text storage-type storage-type-at-storage-position-[-current-storage-position-]-]
[-copy-text current-storage-position current-[-storage-type-]-storage-position-]
----
create-new-text-storage-position:
[-put-into-phrase storage-type  text -]
[-create-new-storage-position-]
----
expand-one-template:
[-expand-text template-[-word-to-use-in-handler-] [-word-to-use-in-handler-]-]
----
filter-tokens-case-1:
[-copy-text word-to-use-in-handler current-token-]
[-copy-words-found-in-both-lists current-token list-combee-comenn-defenn non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-filter-tokens-case-2-]
[-if-else-]
[-filter-tokens-case-[-non-empty-if-valid-token-handler-name-]-]
[-if-end-]
----
filter-tokens-case-2:
[-if-no-begin [-yes-or-no-within-comment-]-]
[-filter-tokens-case-3-]
[-if-else-]
*---
[-append-text current-token comments-ignored-]
---*
[-if-end-]
----
filter-tokens-case-3:
[-copy-words-found-in-both-lists current-token list-ambee-amenn non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-filter-tokens-case-4-]
[-if-else-]
[-filter-tokens-case-[-non-empty-if-valid-token-handler-name-]-]
[-if-end-]
----
filter-tokens-case-4:
[-if-no-begin [-yes-or-no-empty-phrase phrase-being-defined-]-]
[-append-text current-token list-of-tokens-in-current-definition-]
[-if-else-]
[-copy-text current-token phrase-being-defined-]
[-remove-colon-if-at-end-of-phrase-being-defined-]
[-if-end-]
----
filter-tokens-case-ambee:
[-numeric-increment count-of-ambee-tokens-]
[-append-text string-ambee list-of-tokens-in-current-definition-]
----
filter-tokens-case-amenn:
[-numeric-increment count-of-amenn-tokens-]
[-append-text string-amenn list-of-tokens-in-current-definition-]
----
filter-tokens-case-combee:
[-put-into-phrase yes-or-no-within-comment  yes -]
----
filter-tokens-case-comenn:
[-put-into-phrase yes-or-no-within-comment  no -]
----
filter-tokens-case-defenn-case-balanced-ambee-amenn:
[-if-no-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-numeric-add [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-] 0 -]-]-]
[-handle-definition-simple-or-immediate-]
[-if-else-]
[-handle-definition-contains-ambee-amenn-]
[-if-end-]
----
filter-tokens-case-defenn:
[-if-yes-begin [-yes-or-no-same-two-words equal [-numeric-equal-greater-less-compare [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-]-]-]
[-filter-tokens-case-defenn-case-balanced-ambee-amenn-]
[-if-else-]
[-handle-definition-simple-or-immediate-]

*---
if unbalanced needs warning:
[-handle-non-zero-count-of-ambee-minus-amenn-tokens-]
---*

[-if-end-]

[-clear-phrase phrase-being-defined-]
[-put-into-phrase yes-or-no-within-comment  no -]
[-clear-phrase list-of-tokens-in-current-definition-]
[-put-into-phrase count-of-ambee-tokens  0 -]
[-put-into-phrase count-of-amenn-tokens  0 -]
[-generate-list-of-all-dashrep-phrases list-of-all-dashrep-phrases-]
[-copy-words-that-begin-with-listed-words list-of-all-dashrep-phrases list-of-phrases-to-delete list-of-temporary-phrase-name-prefixes-]
[-delete-listed-phrases list-of-phrases-to-delete-]
----
generate-code-for-one-action:
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name action-name-]
[-copy-and-replace action-name action-name-with-underscores character-hyphen character-underscore-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name-with-underscores string-placeholder-special-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-special action-name-with-underscores-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-phrase-being-defined phrase-being-defined-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-character-hyphen-in-brackets character-hyphen-]
*--- reminder: do not modify apostrophes or backslashes here because those characters need to appear in the code ---*
[-copy-from-phrase-append-to-file runtime-code-for-parameter-phrase [-filename-output-results-all-compiled-functions-]-]
[-copy-text current-result-storage-position higher-result-storage-position-]
[-recursion-stack-pop-]
[-copy-text runtime-code-storage-item-reference-before-pointer higher-result-storage-operand-]
[-append-text-no-space higher-result-storage-position higher-result-storage-operand-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer higher-result-storage-operand-]
[-append-text higher-result-storage-operand list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
generate-list-of-tokens-in-current-definition-quotable:
[-copy-and-replace list-of-tokens-in-current-definition list-of-tokens-in-current-definition-quotable character-apostrophe string-placeholder-special-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-apostrophe-within-quoted-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-apostrophe character-apostrophe-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable character-backslash string-placeholder-special-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-backslash-within-quoted-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-backslash character-backslash-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-apostrophe-apostrophe-space-period-space empty-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-space-period-space-apostrophe-apostrophe empty-text-]


*---
[-trace-show list-of-tokens-in-current-definition-quotable-]
---*
----
generate-runtime-code-for-external-function-branch:
[-copy-text word-to-use-in-handler phrase-name-]
[-copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore-]

[-copy-text code-function-branch-part-1 runtime-code-function-branch-]
[-append-text-no-space phrase-name runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-2 runtime-code-function-branch-]
[-append-text-no-space phrase-name-with-underscores runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-3 runtime-code-function-branch-]
[-copy-and-replace runtime-code-function-branch runtime-code-function-branch function-name-prefix empty-text-]
[-copy-from-phrase-append-to-file runtime-code-function-branch [-filename-output-results-all-function-branches-]-]

[-copy-text code-function-external-part-1 runtime-code-function-external-]
[-append-text-no-space phrase-name-with-underscores runtime-code-function-external-]
[-append-text-no-space code-function-external-part-2 runtime-code-function-external-]
[-append-text-no-space phrase-name-with-underscores runtime-code-function-external-]
[-append-text-no-space code-function-external-part-3 runtime-code-function-external-]
[-copy-from-phrase-append-to-file runtime-code-function-external [-filename-output-results-functions-replacement-only-]-]
----
generate-runtime-code-for-one-function-branch:
[-copy-text word-to-use-in-handler phrase-name-]
[-copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore-]
[-copy-text code-function-branch-part-1 runtime-code-function-branch-]
[-append-text-no-space phrase-name runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-2 runtime-code-function-branch-]
[-append-text-no-space phrase-name-with-underscores runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-3 runtime-code-function-branch-]
[-copy-from-phrase-append-to-file runtime-code-function-branch [-filename-output-results-all-function-branches-]-]
----
generate-runtime-code-for-one-function-replacement-only:
[-copy-text word-to-use-in-handler phrase-name-]
[-copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore-]
[-copy-text code-function-replacement-only-part-1 runtime-code-function-replacement-only-]
[-append-text-no-space phrase-name-with-underscores runtime-code-function-replacement-only-]
[-append-text-no-space code-function-replacement-only-part-2 runtime-code-function-replacement-only-]
[-append-text-no-space phrase-name runtime-code-function-replacement-only-]
[-append-text-no-space code-function-replacement-only-part-3 runtime-code-function-replacement-only-]
[-copy-from-phrase-append-to-file runtime-code-function-replacement-only [-filename-output-results-functions-replacement-only-]-]
----
generate-runtime-code-for-phrase-definition-simple:
[-copy-text code-phrase-definition-simple-part-1 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-2 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space phrase-being-defined runtime-code-for-phrase-definition-simple-]
[-append-text-no-space code-phrase-definition-simple-part-3 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-4 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space list-of-tokens-in-current-definition-quotable runtime-code-for-phrase-definition-simple-]
[-append-text-no-space code-phrase-definition-simple-part-5 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-6 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-7 runtime-code-for-phrase-definition-simple-]
----
generate-runtime-code-using-quoted-string:
[-numeric-increment storage-item-pointer-]
[-copy-text storage-item-pointer storage-item-pointer-for-[-word-to-use-in-handler-]-]
[-copy-text code-quoted-string-storage-item-part-1 generated-runtime-code-]
[-append-text-no-space storage-item-pointer generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-2 generated-runtime-code-]
[-append-text template-quoted-[-word-to-use-in-handler-] generated-runtime-code-]
[-append-text code-quoted-string-storage-item-part-3 generated-runtime-code-]
[-append-text-no-space word-to-use-in-handler generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-4 generated-runtime-code-]
[-append-text-no-space storage-item-pointer generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-5 generated-runtime-code-]
[-append-text-no-space generated-runtime-code output-results-all-storage-items-]
----
generate-storage-for-current-text:
[-create-new-text-storage-position-]
[-copy-text code-for-text-storage-position-part-1 runtime-code-for-storage-in-current-definition-]
[-append-text-no-space current-text-storage-position runtime-code-for-storage-in-current-definition-]
[-append-text code-for-text-storage-position-part-2 runtime-code-for-storage-in-current-definition-]
[-copy-and-replace current-text current-text-quotable character-apostrophe string-placeholder-special-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-apostrophe-within-quoted-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-apostrophe character-apostrophe-]
[-copy-and-replace current-text-quotable current-text-quotable character-backslash string-placeholder-special-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-backslash-within-quoted-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-backslash character-backslash-]
[-copy-and-replace current-text-quotable current-text-quotable string-apostrophe-apostrophe-space-period-space empty-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-space-period-space-apostrophe-apostrophe empty-text-]
[-append-text-no-space current-text-quotable runtime-code-for-storage-in-current-definition-]
[-append-text-no-space code-for-text-storage-position-part-3 runtime-code-for-storage-in-current-definition-]
[-copy-from-phrase-append-to-file runtime-code-for-storage-in-current-definition [-filename-output-results-all-definition-items-]-]
----
generate-versions-of-function-point-to-word-in-operand:
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-one string-whichever string-one amenn
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-two string-whichever string-two amenn
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-three string-whichever string-three amenn
----
get-all-operands:
[-copy-text digit-0 number-of-operands-]
[-copy-text list-of-operands-for-result-storage-position-[-current-result-storage-position-] list-of-operands-raw-]
[-copy-without-extra-spaces list-of-operands-raw list-of-operands-raw-]
[-copy-and-replace list-of-operands-raw list-of-operands-for-counting string-space-fen-space string-placeholder-fen-]
[-copy-and-replace list-of-operands-for-counting list-of-operands-for-counting string-space-nospay-space string-placeholder-nospay-]
[-put-into-phrase number-of-operands [-get-count-of-words list-of-operands-for-counting-]-]
[-copy-text list-of-operands-for-counting operand-or-operands-]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-concatenated-all-operands-]

[-if-yes-begin [-yes-or-no-empty-phrase runtime-code-for-concatenated-all-operands-]-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-concatenated-all-operands-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 1 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 1 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-one-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-one-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 2 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 2 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-two-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-two-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 3 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 3 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-three-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-three-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 4 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 4 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-four-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-four-]
[-if-end-]
----
get-source-code-character-at-adjacent-position:
[-copy-characters-from-position-to-position source-code-as-words adjacent-character [-word-to-use-in-handler-] [-word-to-use-in-handler-]-]
[-append-text adjacent-character list-of-adjacent-characters-]
----
handle-definition-contains-ambee-amenn:
[-copy-text string-outside current-state-of-if-branching-]
[-create-new-result-storage-position-]
[-copy-text current-result-storage-position result-storage-position-for-current-phrase-]
[-copy-text code-parameter-result-storage-part-1 runtime-code-for-result-storage-at-end-of-expand-]
[-append-text-no-space result-storage-position-for-current-phrase runtime-code-for-result-storage-at-end-of-expand-]
[-append-text code-parameter-result-storage-part-2 runtime-code-for-result-storage-at-end-of-expand-]
[-copy-from-phrase-append-to-file runtime-code-for-result-storage-at-end-of-expand [-filename-output-results-all-definition-items-]-]

[-copy-and-replace phrase-being-defined phrase-being-defined-with-underscores character-hyphen character-underscore-]
[-copy-text list-of-tokens-in-current-definition list-of-tokens-in-complex-definition-]
[-copy-text character-space list-of-tokens-without-ambee-amenn-fen-]
[-append-text-no-space list-of-tokens-in-current-definition list-of-tokens-without-ambee-amenn-fen-]
[-append-text-no-space character-space list-of-tokens-without-ambee-amenn-fen-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-fen-space string-placeholder-special-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-special string-space-hyphen-space-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space-]
[-copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen-]

[-copy-text code-compiled-function-part-1 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-2 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined runtime-code-compiled-function-]
[-copy-and-replace code-compiled-function-part-3 code-compiled-function-part-3 string-placeholder-phrase-being-defined phrase-being-defined-]
[-append-text-no-space code-compiled-function-part-3 runtime-code-compiled-function-]
[-append-text list-of-tokens-in-current-definition runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-4 runtime-code-compiled-function-]
[-copy-from-phrase-append-to-file runtime-code-compiled-function [-filename-output-results-all-compiled-functions-]-]

[-copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-in-current-definition-]
[-handle-definition-simple-]

[-use-handler-with-each-word-in-phrase handle-token-next-case-1 list-of-tokens-in-complex-definition-]

[-terminate-branching-if-not-terminated-]

[-copy-text phrase-name-storage-position-for-definition-number-[-current-definition-number-] phrase-name-storage-position-for-current-definition-]
[-copy-text storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-] storage-position-for-word-list-associated-with-current-result-storage-position-]
[-get-all-operands-]
[-copy-text code-compiled-function-part-5 runtime-code-compiled-function-]
[-append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function-]
[-append-text code-compiled-function-part-6 runtime-code-compiled-function-]
[-append-text runtime-code-for-concatenated-all-operands runtime-code-compiled-function-]
[-append-text code-compiled-function-part-7 runtime-code-compiled-function-]
[-append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function-]
[-append-text code-compiled-function-part-8 runtime-code-compiled-function-]
[-append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function-]
[-append-text code-compiled-function-part-9 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-10 runtime-code-compiled-function-]
[-copy-from-phrase-append-to-file runtime-code-compiled-function [-filename-output-results-all-compiled-functions-]-]
[-append-text phrase-being-defined list-of-functions-generated-]
[-clear-phrase phrase-being-defined-]
[-clear-phrase list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
handle-definition-immediate:
[-generate-list-of-tokens-in-current-definition-quotable-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable phrase-definition-modified string-placeholder-space character-space-]
[-copy-without-extra-spaces phrase-definition-modified phrase-definition-modified-]

[-trace-show phrase-definition-modified-]

[-copy-and-replace phrase-definition-modified phrase-definition-modified string-space-new-line-in-brackets string-placeholder-special-]
[-copy-and-replace phrase-definition-modified phrase-definition-modified string-placeholder-special string-new-line-in-brackets-]

[-trace-show phrase-definition-modified-]

[-copy-and-replace phrase-definition-modified phrase-definition-modified string-new-line-in-brackets-space string-placeholder-special-]
[-copy-and-replace phrase-definition-modified phrase-definition-modified string-placeholder-special string-new-line-in-brackets-]

[-trace-show phrase-definition-modified-]

[-copy-and-replace phrase-definition-modified phrase-definition-modified string-new-line-in-brackets character-newline-]

[-trace-show phrase-definition-modified-]

[-copy-text phrase-definition-modified [-immediate-definition-phrase-name-]-modified-]
----
handle-definition-simple-or-immediate:
[-copy-words-found-in-both-lists phrase-being-defined list-of-immediate-definition-phrases possible-immediate-definition-phrase-name-]


[-trace-show phrase-being-defined-]


[-if-yes-begin [-yes-or-no-empty-phrase possible-immediate-definition-phrase-name-]-]
[-handle-definition-simple-]
[-if-else-]
[-copy-text possible-immediate-definition-phrase-name immediate-definition-phrase-name-]
[-handle-definition-immediate-]
[-if-end-]
----
handle-definition-simple:
[-create-new-text-storage-position-]
[-copy-text current-text-storage-position pointer-storage-position-for-phrase-name-]
[-create-new-text-storage-position-]
[-copy-text current-text-storage-position pointer-storage-position-for-phrase-definition-]
[-generate-list-of-tokens-in-current-definition-quotable-]
[-generate-runtime-code-for-phrase-definition-simple-]
[-copy-from-phrase-append-to-file runtime-code-for-phrase-definition-simple [-filename-output-results-all-definition-items-]-]
----
handle-fen-and-nospay-within-operand-or-operands:
[-copy-and-replace operand-or-operands operand-or-operands-step-1 character-space string-placeholder-special-]
[-copy-and-replace operand-or-operands-step-1 operand-or-operands-step-2 string-placeholder-fen runtime-code-between-items-for-concatenation-type-fen-]
[-copy-and-replace operand-or-operands-step-2 operand-or-operands-step-3 string-placeholder-nospay runtime-code-between-items-for-concatenation-type-nospay-]
[-copy-and-replace operand-or-operands-step-3 operand-or-operands string-placeholder-special runtime-code-inserted-separator-space-]
----
handle-non-zero-count-of-ambee-minus-amenn-tokens:
[-copy-text warning-ambee-amenn-imbalance-introduction warning-message-]
[-append-text phrase-being-defined warning-message-]

[-if-yes-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-]-]-]
[-append-text warning-more-ambee-than-amenn-tokens warning-message-]
[-if-else-]
[-append-text warning-more-amenn-than-ambee-tokens warning-message-]
[-if-end-]

[-append-text-no-space warning-message warning-messages-]
----
handle-token-ambee:
[-copy-text digit-0 count-of-tokens-after-ambee-]
[-recursion-stack-push-]
[-create-new-result-storage-position-]
[-copy-text code-parameter-result-storage-part-1 runtime-code-for-parameter-result-storage-]
[-append-text-no-space current-result-storage-position runtime-code-for-parameter-result-storage-]
[-append-text code-parameter-result-storage-part-2 runtime-code-for-parameter-result-storage-]
[-copy-from-phrase-append-to-file runtime-code-for-parameter-result-storage [-filename-output-results-all-definition-items-]-]
[-clear-phrase action-name-at-storage-position-[-current-result-storage-position-]-]
[-append-text string-ambee definition-for-phrase-being-defined-]
----
handle-token-amenn-case-action-not-empty:
[-clear-phrase needed-operand-checks-]
[-append-text string-amenn definition-for-phrase-being-defined-]
[-copy-text current-result-storage-position storage-item-pointer-]
[-expand-text template-runtime-code-storage-item-with-pointer runtime-code-storage-item-result-]
[-copy-text action-name-at-storage-position-[-current-result-storage-position-] action-name-]
[-put-into-phrase yes-or-no-action-recognized  no -]

[-if-no-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-put-into-phrase yes-or-no-action-recognized  yes -]
[-if-end-]

[-if-no-begin [-yes-or-no-empty-phrase operand-checks-for-action-[-action-name-]-]-]
[-put-into-phrase yes-or-no-action-recognized  yes -]
[-copy-text operand-checks-for-action-[-action-name-] needed-operand-checks-]
[-if-end-]

[-clear-phrase runtime-code-for-parameter-phrase-]

[-if-yes-begin [-yes-or-no-action-recognized-]-]
[-handle-token-amenn-case-action-recognized-]
[-if-else-]
[-handle-token-amenn-case-executable-phrase-]
[-if-end-]

[-generate-code-for-one-action-]
----
handle-token-amenn-case-action-recognized:
[-if-yes-begin [-yes-or-no-empty-phrase handle-token-amenn-case-[-action-name-]-]-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-if-else-]
[-handle-token-amenn-case-[-action-name-]-]
[-append-text action-name list-of-special-handled-dashrep-actions-used-]
[-if-end-]
----
handle-token-amenn-case-action-standard-or-has-template:
[-get-all-operands-]

[-if-yes-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-expand-text template-runtime-code-standard-action runtime-code-for-parameter-phrase-]
[-append-text action-name list-of-unconverted-dashrep-actions-used-]
[-if-else-]
[-expand-text template-runtime-code-for-action-[-action-name-] runtime-code-for-parameter-phrase-]
[-append-text action-name list-of-converted-dashrep-actions-used-]
[-if-end-]

[-if-no-begin [-yes-or-no-empty-phrase template-function-[-action-name-]-]-]
[-put-into-phrase requested-template-function  template-function-[-action-name-] -]
[-append-text requested-template-function list-of-template-functions-for-requested-actions-]
[-if-end-]
----
handle-token-amenn-case-executable-phrase:
[-copy-text digit-0 number-of-operands-]
[-copy-text string-two-apostrophes runtime-code-for-concatenated-all-operands-]
[-numeric-increment current-accumulator-pointer-]
[-copy-text action-name current-text-]
[-generate-storage-for-current-text-]
[-copy-text runtime-code-storage-item-reference-before-pointer operand-instead-of-action-name-]
[-append-text-no-space current-text-storage-position operand-instead-of-action-name-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer operand-instead-of-action-name-]
[-copy-text operand-instead-of-action-name list-of-operands-raw-]
[-append-text list-of-operands-for-result-storage-position-[-current-result-storage-position-] list-of-operands-raw-]
[-copy-text operand-or-operands saved-operand-or-operands-]


*---
[-trace-show list-of-operands-raw-]
---*


[-copy-without-extra-spaces list-of-operands-raw operand-or-operands-]
[-copy-words-found-in-both-lists operand-or-operands string-fen not-empty-if-operands-include-fen-]
[-copy-and-replace operand-or-operands operand-or-operands string-space-fen-space string-placeholder-fen-]
[-copy-and-replace operand-or-operands operand-or-operands string-space-nospay-space string-placeholder-nospay-]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-executable-phrase-]


*---
[-trace-show operand-or-operands-]
---*


[-copy-text saved-operand-or-operands operand-or-operands-]

[-if-yes-begin [-yes-or-no-empty-phrase not-empty-if-operands-include-fen-]-]
[-append-text action-name list-of-function-branches-needed-]
[-expand-text template-runtime-code-for-action-executable-phrase-without-fen runtime-code-for-parameter-phrase-]
[-if-else-]
[-expand-text template-runtime-code-for-action-executable-phrase runtime-code-for-parameter-phrase-]
[-if-end-]

[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-code-for-executable-phrase runtime-code-for-executable-phrase-]
[-copy-and-replace action-name action-name-with-underscores character-hyphen character-underscore-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-code-for-executable-phrase-with-underscores action-name-with-underscores-]
----
handle-token-amenn-case-expand-text:
[-numeric-increment current-accumulator-pointer-]
[-handle-token-amenn-case-standard-action-]
----
handle-token-amenn-case-if-else:
[-start-branching-if-not-started-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-copy-text string-else current-state-of-if-branching-]
----
handle-token-amenn-case-if-end:
[-start-branching-if-not-started-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-copy-text string-outside current-state-of-if-branching-]
----
handle-token-amenn-case-if-no-begin:
[-terminate-branching-if-not-terminated-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-copy-text string-begin current-state-of-if-branching-]
----
handle-token-amenn-case-if-yes-begin:
[-terminate-branching-if-not-terminated-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-copy-text string-begin current-state-of-if-branching-]
----
handle-token-amenn-case-standard-action:
[-get-all-operands-]

[-if-no-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-expand-text template-runtime-code-for-action-[-action-name-] runtime-code-for-parameter-phrase-]
[-if-else-]
[-expand-text template-runtime-code-standard-action runtime-code-for-parameter-phrase-]
[-if-end-]
----
handle-token-amenn-case-use-handler-with-each-word-in-phrase:
[-create-new-text-storage-position-]
[-clear-phrase contents-at-storage-position-[-current-text-storage-position-]-]
[-copy-text current-text-storage-position storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-]-]
[-copy-text storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-] storage-position-for-word-list-associated-with-loop-]
[-expand-text template-runtime-code-for-word-list-storage-position runtime-code-for-word-list-storage-position-]
[-copy-from-phrase-append-to-file runtime-code-for-word-list-storage-position [-filename-output-results-all-definition-items-]-]
[-get-all-operands-]
[-copy-word-at-position text-words-at-result-storage-position-[-current-result-storage-position-] handler-name 1 -]
[-copy-and-replace handler-name handler-name-with-underscores character-hyphen character-underscore-]
[-copy-word-at-position text-words-at-result-storage-position-[-current-result-storage-position-] phrase-name-for-list-of-words-for-loop 2 -]
[-expand-text template-runtime-code-for-action-use-handler-with-each-word-in-phrase runtime-code-for-parameter-phrase-]
----
handle-token-amenn:
[-if-no-begin [-yes-or-no-empty-phrase action-name-at-storage-position-[-current-result-storage-position-]-]-]
[-handle-token-amenn-case-action-not-empty-]
[-if-else-]
[-expand-text template-runtime-code-for-action-not-recognized runtime-code-for-parameter-phrase-]
[-generate-code-for-one-action-]
[-if-end-]
----
handle-token-fen:
[-append-text string-fen definition-for-phrase-being-defined-]
[-append-text string-fen list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
handle-token-next-case-1:
[-copy-text word-to-use-in-handler current-token-]
[-numeric-increment count-of-tokens-after-ambee-]
[-copy-words-found-in-both-lists current-token list-ambee-amenn-fen-nospay non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-handle-token-next-case-2-]
[-if-else-]
[-handle-token-[-current-token-]-]
[-if-end-]
----
handle-token-next-case-2:
[-if-no-begin [-yes-or-no-empty-phrase phrase-being-defined-]-]
[-handle-token-next-case-3-]
[-if-else-]
[-handle-token-phrase-name-]
[-if-end-]
----
handle-token-next-case-3:
[-append-text current-token definition-for-phrase-being-defined-]

[-if-no-begin [-yes-or-no-same-two-phrase-definitions digit-1 count-of-tokens-after-ambee-]-]
[-handle-token-text-word-]
[-if-else-]
[-copy-text current-token action-name-at-storage-position-[-current-result-storage-position-]-]
[-if-end-]
----
handle-token-nospay:
[-append-text string-nospay definition-for-phrase-being-defined-]
[-append-text string-nospay list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
handle-token-phrase-name:
[-copy-text current-token phrase-being-defined-]
[-numeric-increment current-definition-number-]
[-copy-text phrase-being-defined current-text-]
[-generate-storage-for-current-text-]
[-copy-text current-text-storage-position phrase-name-storage-position-for-definition-number-[-current-definition-number-]-]
[-clear-phrase current-text-]
[-create-new-result-storage-position-]
[-clear-phrase list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
[-clear-phrase recursion-stack-]
[-recursion-stack-push-]
[-copy-text current-definition-number phrase-number-for-phrase-name-[-phrase-being-defined-]-]
[-copy-text phrase-being-defined phrase-name-for-phrase-number-[-current-definition-number-]-]
[-clear-phrase definition-for-phrase-being-defined-]
----
handle-token-text-word:
[-copy-text current-token current-text-]
[-generate-storage-for-current-text-]
[-append-text current-text contents-at-storage-position-[-current-text-storage-position-]-]
[-append-text current-text text-words-at-result-storage-position-[-current-result-storage-position-]-]
[-copy-text runtime-code-storage-item-reference-before-pointer current-storage-operand-]
[-append-text-no-space current-text-storage-position current-storage-operand-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer current-storage-operand-]
[-append-text current-storage-operand list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
initialize-input-output-files:
*--- reminder: avoid backslashs here because they get interpreted in the runtime code ---*
[-copy-text character-period dashrep-path-prefix-for-file-writing-]
[-append-text-no-space character-backslash dashrep-path-prefix-for-file-writing-]
[-copy-text dashrep-path-prefix-for-file-writing dashrep-path-prefix-for-file-reading-]

[-put-into-phrase input-filename  input_to_dashrep_compiler.txt -]
[-put-into-phrase filename-output-results-from-compiler  output_from_dashrep_compiler.txt -]
[-delete-file [-filename-output-results-from-compiler-]-]
[-put-into-phrase filename-output-standard-runtime-functions  output_compiler_standard_runtime_functions.txt -]
[-delete-file [-filename-output-standard-runtime-functions-]-]
[-put-into-phrase filename-output-results-all-definition-items  output_compiler_all_definition_items.txt -]
[-delete-file [-filename-output-results-all-definition-items-]-]
[-put-into-phrase filename-output-results-all-function-branches  output_compiler_all_function_branches.txt -]
[-delete-file [-filename-output-results-all-function-branches-]-]
[-put-into-phrase filename-output-results-functions-replacement-only  output_compiler_functions_replacement_only.txt -]
[-delete-file [-filename-output-results-functions-replacement-only-]-]
[-put-into-phrase filename-output-results-all-compiled-functions  output_compiler_all_compiled_functions.txt -]
[-delete-file [-filename-output-results-all-compiled-functions-]-]
[-put-into-phrase filename-output-all-definitions-complex  output_compiler_all_tokens_for_definitions_complex.txt -]
[-delete-file [-filename-output-all-definitions-complex-]-]
[-put-into-phrase filename-output-all-phrase-names-complex  output_compiler_all_phrase_names_complex.txt -]
[-delete-file [-filename-output-all-phrase-names-complex-]-]
[-put-into-phrase filename-output-debug-trace-all-dashrep-definitions  output_compiler_debug_trace_all_definitions.txt -]
[-delete-file [-filename-output-debug-trace-all-dashrep-definitions-]-]
----
recursion-stack-pop-case-empty:
[-put-into-phrase current-result-storage-position  0 -]

*---
[-copy-text warning-ambee-amenn-imbalance-introduction warning-message-]
[-append-text phrase-being-defined warning-message-]
[-append-text warning-more-amenn-than-ambee-tokens warning-message-]
[-append-text-no-space warning-message warning-messages-]
---*
----
recursion-stack-pop-case-not-empty:
[-if-yes-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-position-top-of-stack-] 1 -]-]-]
[-copy-word-at-position recursion-stack current-result-storage-position [-position-top-of-stack-]-]
[-numeric-decrement position-top-of-stack-]
[-copy-words-from-position-to-position recursion-stack recursion-stack 1 [-position-top-of-stack-]-]
[-if-else-]
[-copy-text recursion-stack current-result-storage-position-]
[-clear-phrase recursion-stack-]
[-if-end-]
----
recursion-stack-pop:
[-put-into-phrase position-top-of-stack  [-get-count-of-words recursion-stack-] -]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-position-top-of-stack-] 1 -]-]-]
[-recursion-stack-pop-case-not-empty-]
[-if-else-]
[-recursion-stack-pop-case-empty-]
[-if-end-]

*---
[-recursion-stack-show-]
---*
----
recursion-stack-push:
[-append-text current-result-storage-position recursion-stack-]

*---
[-recursion-stack-show-]
---*
----
remove-colon-if-at-end-of-phrase-being-defined:
[-put-into-phrase phrase-length  [-get-count-of-characters phrase-being-defined-] -]
[-copy-characters-from-position-to-position phrase-being-defined possible-colon [-phrase-length-] [-phrase-length-]-]

[-if-yes-begin [-yes-or-no-same-two-phrase-definitions possible-colon character-colon-]-]
[-copy-characters-from-position-to-position phrase-being-defined phrase-being-defined 1 [-numeric-minus [-phrase-length-] 1 -]-]
[-if-end-]
----
run-compiler:
[-initialize-input-output-files-]
[-copy-from-file-to-phrase [-input-filename-] source-code-]
[-compile-source-code-generate-output-results-]
[-put-into-phrase yes-or-no-export-delimited-definitions  yes -]
[-generate-list-of-all-dashrep-phrases list-of-all-dashrep-phrases-]
[-write-results-to-output-file-]
[-write-dashrep-definitions-listed-in-phrase-to-file list-of-all-dashrep-phrases [-filename-output-debug-trace-all-dashrep-definitions-]-]

[-check-elapsed-time-]
----
start-branching-if-not-started:
[-if-yes-begin [-yes-or-no-same-two-phrase-definitions current-state-of-if-branching string-outside-]-]
[-expand-text template-runtime-code-for-overdue-start-of-if-branch runtime-code-for-overdue-start-of-if-branch-]
[-copy-from-phrase-append-to-file runtime-code-for-overdue-start-of-if-branch [-filename-output-results-all-compiled-functions-]-]
[-if-end-]
----
start-here:
[-run-compiler-]
----
terminate-branching-if-not-terminated:
[-if-no-begin [-yes-or-no-same-two-phrase-definitions current-state-of-if-branching string-outside-]-]
[-expand-text template-runtime-code-for-overdue-terminate-if-branch runtime-code-for-overdue-terminate-if-branch-]
[-copy-from-phrase-append-to-file runtime-code-for-overdue-terminate-if-branch [-filename-output-results-all-compiled-functions-]-]
[-if-end-]
----
write-results-to-output-file:
[-if-no-begin [-yes-or-no-empty-phrase warning-messages-]-]
[-copy-text runtime-code-at-top-if-warning-message output-warning-messages-]
[-append-text-no-space warning-messages output-warning-messages-]
[-append-text-no-space new-empty-lines output-warning-messages-]
[-copy-from-phrase-append-to-file output-warning-messages [-filename-output-results-from-compiler-]-]
[-if-end-]

[-copy-from-phrase-append-to-file segment-start-object-code-begin [-filename-output-results-from-compiler-]-]
[-copy-text character-pound-sign start-object-code-in-executable-code-]
[-append-text source-code-copyright-notice start-object-code-in-executable-code-]
[-copy-from-phrase-append-to-file start-object-code-in-executable-code [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-start-object-code-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-optional-import-statements-begin [-filename-output-results-from-compiler-]-]

[-if-no-begin [-yes-or-no-empty-phrase optional-import-statements-modified-]-]
[-copy-from-phrase-append-to-file optional-import-statements-modified [-filename-output-results-from-compiler-]-]
[-if-end-]

[-copy-from-phrase-append-to-file segment-optional-import-statements-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-initialize-begin [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file initialize-global-arrays [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file initialize-global-variables [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file output-results-all-storage-items [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-initialize-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-definition-items-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-definition-items-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-definition-items-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-branch-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-function-branches-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-branch-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-replacement-only-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-functions-replacement-only-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-functions-replacement-only-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-compiled-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-compiled-functions-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-functions-compiled-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-optional-extra-runtime-functions-begin [-filename-output-results-from-compiler-]-]

[-if-no-begin [-yes-or-no-empty-phrase optional-extra-runtime-functions-modified-]-]
[-copy-from-phrase-append-to-file optional-extra-runtime-functions-modified [-filename-output-results-from-compiler-]-]
[-if-end-]

[-copy-from-phrase-append-to-file segment-optional-extra-runtime-functions-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-runtime-begin [-filename-output-results-from-compiler-]-]

[-copy-and-replace template-function-interpreter_code_dashrep_expand_parameters modified-template-function-interpreter_code_dashrep_expand_parameters character-hyphen string-character-hyphen-in-brackets-]
[-copy-and-replace template-function-interpreter_code_actions_file_related modified-template-function-interpreter_code_actions_file_related character-hyphen string-character-hyphen-in-brackets-]

[-copy-words-found-only-in-first-list list-of-template-functions-for-requested-actions list-of-template-functions list-of-template-functions-for-requested-actions-]
[-copy-words-unique-only list-of-template-functions-for-requested-actions list-of-template-functions-for-requested-actions-]

[-expand-text list-of-template-functions output-results-all-runtime-functions-]
[-copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-hyphen-here string-bracketed-hyphen-here-]
[-copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-new-line string-bracketed-new-line-]
[-copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-empty-line string-bracketed-empty-line-]
[-copy-from-phrase-append-to-file output-results-all-runtime-functions [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-runtime-end [-filename-output-results-from-compiler-]-]
----
bracketed-placeholder-for-empty-line:
<placeholder_for_empty_line>
----
bracketed-placeholder-for-hyphen-here:
<placeholder_for_hyphen_here>
----
bracketed-placeholder-for-new-line:
<placeholder_for_new_line>
----
build-paired-replacements-for-converting-hyphens-into-defenns:
[-prepend-text string-defenn paired-replacements-for-converting-hyphens-into-defenns-]
[-prepend-text string-of-hyphens paired-replacements-for-converting-hyphens-into-defenns-]
[-prepend-text-no-space character-hyphen string-of-hyphens-]
----
build-paired-replacements-for-converting-to-combee-comenn:
[-prepend-text-no-space character-hyphen string-hyphens-and-asterisk-]
[-append-text-no-space character-hyphen string-asterisk-and-hyphens-]
[-prepend-text string-comenn paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-hyphens-and-asterisk paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-combee paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-asterisk-and-hyphens paired-replacements-for-converting-to-combee-comenn-]
----
character-apostrophe:
'
----
character-backslash:
\
----
character-close-angle-bracket:
>
----
character-close-bracket:
]
----
character-colon:
:
----
character-e:
e
----
character-equal-sign:
=
----
character-f:
f
----
character-n:
n
----
character-open-angle-bracket:
<
----
character-open-bracket:
[
----
character-period:
.
----
character-pound-sign:
#
----
character-quotation-mark:
"
----
character-semicolon:
;
----
character-underscore:
_
----
count-of-ambee-tokens:
0
----
count-of-amenn-tokens:
0
----
current-accumulator-pointer:
1
----
dashes-long-line:
dashes-twenty no-space dashes-twenty no-space dashes-twenty
----
dashes-twenty:
four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens
----
dashrep-compiled-code-output-phrase-name:
----
define-special-strings-that-are-padded-with-spaces:
[-copy-text string-ambee string-space-ambee-space-]
[-prepend-text-no-space character-space string-space-ambee-space-]
[-append-text-no-space character-space string-space-ambee-space-]

[-copy-text string-amenn string-space-amenn-space-]
[-prepend-text-no-space character-space string-space-amenn-space-]
[-append-text-no-space character-space string-space-amenn-space-]

[-copy-text string-fen string-space-fen-space-]
[-prepend-text-no-space character-space string-space-fen-space-]
[-append-text-no-space character-space string-space-fen-space-]

[-copy-text string-hyphen-here string-space-hyphen-here-space-]
[-prepend-text-no-space character-space string-space-hyphen-here-space-]
[-append-text-no-space character-space string-space-hyphen-here-space-]

[-copy-text string-combee string-space-combee-space-]
[-prepend-text-no-space character-space string-space-combee-space-]
[-append-text-no-space character-space string-space-combee-space-]

[-copy-text string-comenn string-space-comenn-space-]
[-prepend-text-no-space character-space string-space-comenn-space-]
[-append-text-no-space character-space string-space-comenn-space-]

[-copy-text code-concat string-space-concat-space-]
[-prepend-text-no-space character-space string-space-concat-space-]
[-append-text-no-space character-space string-space-concat-space-]

[-copy-text string-one-space string-space-one-space-space-]
[-prepend-text-no-space character-space string-space-one-space-space-]
[-append-text-no-space character-space string-space-one-space-space-]

[-copy-text character-hyphen string-space-hyphen-space-]
[-prepend-text-no-space character-space string-space-hyphen-space-]
[-append-text-no-space character-space string-space-hyphen-space-]

[-copy-text string-two-apostrophes string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-space string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-period string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-space string-apostrophe-apostrophe-space-period-space-]

[-copy-text character-space string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space character-period string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space character-space string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space string-two-apostrophes string-space-period-space-apostrophe-apostrophe-]

[-copy-text string-end-of string-space-end-of-line-here-space-]
[-prepend-text-no-space character-space string-space-end-of-line-here-space-]
[-append-text-no-space character-hyphen string-space-end-of-line-here-space-]
[-append-text-no-space string-line-here string-space-end-of-line-here-space-]
[-append-text-no-space character-space string-space-end-of-line-here-space-]

[-copy-text string-code-nospay-between-spaces-without-padded-spaces string-code-nospay-between-spaces-]
[-prepend-text-no-space character-space string-code-nospay-between-spaces-]
[-append-text-no-space character-space string-code-nospay-between-spaces-]

[-copy-text string-nospay string-space-nospay-space-]
[-prepend-text-no-space character-space string-space-nospay-space-]
[-append-text-no-space character-space string-space-nospay-space-]

[-copy-text string-amennfenambee string-space-amennfenambee-space-]
[-prepend-text-no-space character-space string-space-amennfenambee-space-]
[-append-text-no-space character-space string-space-amennfenambee-space-]

[-copy-text string-amenn string-space-amenn-fen-ambee-space-]
[-prepend-text-no-space character-space string-space-amenn-fen-ambee-space-]
[-append-text string-fen string-space-amenn-fen-ambee-space-]
[-append-text string-ambee string-space-amenn-fen-ambee-space-]
[-append-text-no-space character-space string-space-amenn-fen-ambee-space-]
----
define-special-strings-that-cannot-be-spelled-in-full:
[-copy-text character-f string-fen-]
[-append-text-no-space character-e string-fen-]
[-append-text-no-space character-n string-fen-]

[-copy-text string-am string-ambee-]
[-append-text-no-space string-bee string-ambee-]

[-copy-text string-am string-amenn-]
[-append-text-no-space string-enn string-amenn-]

[-copy-text string-amenn string-amennfen-]
[-append-text-no-space string-fen string-amennfen-]

[-copy-text string-com string-combee-]
[-append-text-no-space string-bee string-combee-]

[-copy-text string-com string-comenn-]
[-append-text-no-space string-enn string-comenn-]

[-copy-text string-def string-defenn-]
[-append-text-no-space string-enn string-defenn-]

[-copy-text string-fen string-fenambee-]
[-append-text-no-space string-bee string-fenambee-]

[-copy-text string-no string-nospay-]
[-append-text-no-space string-spay string-nospay-]

[-copy-text string-amenn string-amennfenambee-]
[-append-text-no-space string-fenambee string-amennfenambee-]
----
define-special-strings-that-contain-hyphens:
[-copy-text string-hyphen string-hyphen-here-]
[-append-text-no-space character-hyphen string-hyphen-here-]
[-append-text-no-space string-here string-hyphen-here-]

[-copy-text string-character string-character-hyphen-]
[-append-text-no-space character-hyphen string-character-hyphen-]
[-append-text-no-space string-hyphen string-character-hyphen-]

[-copy-text string-no string-no-space-]
[-append-text-no-space character-hyphen string-no-space-]
[-append-text-no-space string-space string-no-space-]

[-copy-text string-one string-one-space-]
[-append-text-no-space character-hyphen string-one-space-]
[-append-text-no-space string-space string-one-space-]

[-copy-text string-new string-new-line-]
[-append-text-no-space character-hyphen string-new-line-]
[-append-text-no-space string-line string-new-line-]

[-copy-text string-empty string-empty-line-]
[-append-text-no-space character-hyphen string-empty-line-]
[-append-text-no-space string-line string-empty-line-]

[-copy-text string-empty string-empty-text-]
[-append-text-no-space character-hyphen string-empty-text-]
[-append-text-no-space string-text string-empty-text-]
----
define-special-strings:
[-define-special-strings-that-cannot-be-spelled-in-full-]
[-define-special-strings-that-contain-hyphens-]
[-define-special-strings-that-are-padded-with-spaces-]

[-copy-text character-open-bracket string-open-bracket-dash-]
[-append-text-no-space character-hyphen string-open-bracket-dash-]

[-copy-text character-hyphen string-dash-close-bracket-]
[-append-text-no-space character-close-bracket string-dash-close-bracket-]

[-copy-text character-hyphen string-dash-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-dash-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-dash-]
[-append-text-no-space character-hyphen string-dash-close-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space character-hyphen string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-dash-close-bracket-dash-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text string-fen string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text string-open-bracket-dash string-dash-close-bracket-space-fen-space-open-bracket-dash-]

[-copy-text string-open-bracket-dash string-open-bracket-dash-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-open-bracket-dash-open-bracket-dash-]

[-copy-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-append-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-dash-close-bracket-]
[-append-text-no-space string-dash-close-bracket string-dash-close-bracket-dash-close-bracket-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]
[-append-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-dash-close-bracket-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-nospay-open-bracket-dash-]
[-append-text string-nospay string-dash-close-bracket-nospay-open-bracket-dash-]
[-append-text string-open-bracket-dash string-dash-close-bracket-nospay-open-bracket-dash-]

[-copy-text string-no-space string-space-no-space-character-hyphen-no-space-space-]
[-prepend-text-no-space character-space string-space-no-space-character-hyphen-no-space-space-]
[-append-text string-character-hyphen string-space-no-space-character-hyphen-no-space-space-]
[-append-text string-no-space string-space-no-space-character-hyphen-no-space-space-]
[-append-text-no-space character-space string-space-no-space-character-hyphen-no-space-space-]

[-copy-text string-fen string-space-fen-ambee-space-]
[-prepend-text-no-space character-space string-space-fen-ambee-space-]
[-append-text string-ambee string-space-fen-ambee-space-]
[-append-text-no-space character-space string-space-fen-ambee-space-]

[-copy-text string-amenn string-space-amenn-fen-space-]
[-prepend-text-no-space character-space string-space-amenn-fen-space-]
[-append-text string-fen string-space-amenn-fen-space-]
[-append-text-no-space character-space string-space-amenn-fen-space-]

[-copy-text character-period runtime-code-inserted-separator-space-]
[-append-text character-apostrophe runtime-code-inserted-separator-space-]
[-append-text character-apostrophe runtime-code-inserted-separator-space-]
[-append-text character-period runtime-code-inserted-separator-space-]
[-prepend-text-no-space character-space runtime-code-inserted-separator-space-]
[-append-text-no-space character-space runtime-code-inserted-separator-space-]

[-copy-text character-newline new-empty-line-]
[-copy-text new-empty-line new-empty-lines-]
[-append-text-no-space character-newline new-empty-lines-]

[-copy-text string-one-space string-space-one-space-no-space-space-]
[-prepend-text-no-space character-space string-space-one-space-no-space-space-]
[-append-text string-no-space string-space-one-space-no-space-space-]
[-append-text-no-space character-space string-space-one-space-no-space-space-]

[-copy-text string-no-space string-space-no-space-one-space-space-]
[-prepend-text-no-space character-space string-space-no-space-one-space-space-]
[-append-text string-one-space string-space-no-space-one-space-space-]
[-append-text-no-space character-space string-space-no-space-one-space-space-]

[-copy-text four-hyphens string-of-hyphens-]
[-generate-counts-from-integer-to-integer 2 8 list-2-to-8 -]
[-use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-hyphens-into-defenns list-2-to-8 -]

[-clear-phrase paired-replacements-for-converting-to-combee-comenn-]
[-put-into-phrase string-asterisk-and-hyphens  * -]
[-put-into-phrase string-hyphens-and-asterisk  * -]
[-append-text-no-space character-hyphen string-asterisk-and-hyphens-]
[-prepend-text-no-space character-hyphen string-hyphens-and-asterisk-]
[-generate-counts-from-integer-to-integer 2 8 list-2-to-8 -]
[-use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-to-combee-comenn list-2-to-8 -]

[-copy-text character-period runtime-code-between-items-for-concatenation-type-fen-]
[-prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen-]
[-append-text character-apostrophe runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-hyphen runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-apostrophe runtime-code-between-items-for-concatenation-type-fen-]
[-append-text character-period runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen-]

[-copy-text character-period runtime-code-between-items-for-concatenation-type-nospay-]
[-prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay-]
[-append-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay-]

[-copy-text character-apostrophe runtime-code-concatenated-empty-]
[-append-text-no-space character-apostrophe runtime-code-concatenated-empty-]

[-copy-text string-combee list-combee-comenn-defenn-]
[-append-text string-comenn list-combee-comenn-defenn-]
[-append-text string-defenn list-combee-comenn-defenn-]

[-copy-text string-ambee list-ambee-amenn-]
[-append-text string-amenn list-ambee-amenn-]

[-copy-text list-ambee-amenn list-ambee-amenn-fen-nospay-]
[-append-text string-fen list-ambee-amenn-fen-nospay-]
[-append-text string-nospay list-ambee-amenn-fen-nospay-]

[-copy-text string-placeholder-prefix string-placeholder-character-apostrophe-]
[-append-text-no-space string-apostrophe string-placeholder-character-apostrophe-]
[-append-text-no-space character-close-angle-bracket string-placeholder-character-apostrophe-]

[-copy-text string-placeholder-prefix string-placeholder-character-backslash-]
[-append-text-no-space string-backslash string-placeholder-character-backslash-]
[-append-text-no-space character-close-angle-bracket string-placeholder-character-backslash-]

[-copy-text string-placeholder-prefix string-placeholder-action-name-]
[-append-text-no-space string-action string-placeholder-action-name-]
[-append-text-no-space character-underscore string-placeholder-action-name-]
[-append-text-no-space string-name string-placeholder-action-name-]
[-copy-text string-placeholder-action-name string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-action-name-]
[-append-text-no-space character-underscore string-placeholder-action-name-with-underscores-]
[-append-text-no-space string-with string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-underscore string-placeholder-action-name-with-underscores-]
[-append-text-no-space string-underscores string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-action-name-with-underscores-]

[-copy-text string-placeholder-prefix string-placeholder-omit-]
[-append-text-no-space string-omit string-placeholder-omit-]
[-append-text-no-space character-close-angle-bracket string-placeholder-omit-]

[-copy-text string-placeholder-prefix string-placeholder-fen-]
[-append-text-no-space string-fen string-placeholder-fen-]
[-append-text-no-space character-close-angle-bracket string-placeholder-fen-]

[-copy-text string-placeholder-prefix string-placeholder-nospay-]
[-append-text-no-space string-nospay string-placeholder-nospay-]
[-append-text-no-space character-close-angle-bracket string-placeholder-nospay-]

[-copy-text string-placeholder-prefix string-placeholder-special-]
[-append-text-no-space string-special string-placeholder-special-]
[-append-text-no-space character-close-angle-bracket string-placeholder-special-]

[-copy-text string-placeholder-prefix string-placeholder-phrase-being-defined-]
[-append-text-no-space string-phrase string-placeholder-phrase-being-defined-]
[-append-text-no-space character-underscore string-placeholder-phrase-being-defined-]
[-append-text-no-space string-being string-placeholder-phrase-being-defined-]
[-append-text-no-space character-underscore string-placeholder-phrase-being-defined-]
[-append-text-no-space string-defined string-placeholder-phrase-being-defined-]
[-append-text-no-space character-close-angle-bracket string-placeholder-phrase-being-defined-]

[-copy-text string-placeholder-prefix string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-code string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-for string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-executable string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-phrase string-placeholder-code-for-executable-phrase-]
[-copy-text string-placeholder-code-for-executable-phrase string-placeholder-code-for-executable-phrase-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-with-underscores-]
[-append-text-no-space string-with string-placeholder-code-for-executable-phrase-with-underscores-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-with-underscores-]
[-append-text-no-space string-underscores string-placeholder-code-for-executable-phrase-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-code-for-executable-phrase-with-underscores-]

[-copy-text character-open-angle-bracket string-placeholder-for-space-one-space-space-]
[-append-text-no-space string-one string-placeholder-for-space-one-space-space-]
[-append-text-no-space character-underscore string-placeholder-for-space-one-space-space-]
[-append-text-no-space string-space string-placeholder-for-space-one-space-space-]
[-append-text-no-space character-close-angle-bracket string-placeholder-for-space-one-space-space-]

[-copy-text template-new-empty-line string-new-line-in-brackets-]
[-copy-text string-new-line-in-brackets string-space-new-line-in-brackets-]
[-prepend-text-no-space character-space string-space-new-line-in-brackets-]
[-copy-text string-new-line-in-brackets string-new-line-in-brackets-space-]
[-append-text-no-space character-space string-new-line-in-brackets-space-]

[-copy-text character-open-angle-bracket string-bracketed-hyphen-here-]
[-append-text-no-space string-hyphen string-bracketed-hyphen-here-]
[-append-text-no-space character-underscore string-bracketed-hyphen-here-]
[-append-text-no-space string-here string-bracketed-hyphen-here-]
[-append-text-no-space character-close-angle-bracket string-bracketed-hyphen-here-]

[-copy-text character-open-angle-bracket string-bracketed-empty-line-]
[-append-text-no-space string-empty string-bracketed-empty-line-]
[-append-text-no-space character-underscore string-bracketed-empty-line-]
[-append-text-no-space string-line string-bracketed-empty-line-]
[-append-text-no-space character-close-angle-bracket string-bracketed-empty-line-]

[-copy-text character-open-angle-bracket string-bracketed-new-line-]
[-append-text-no-space string-new string-bracketed-new-line-]
[-append-text-no-space character-underscore string-bracketed-new-line-]
[-append-text-no-space string-line string-bracketed-new-line-]
[-append-text-no-space character-close-angle-bracket string-bracketed-new-line-]
----
digit-0:
0
----
digit-1:
1
----
endless-loop-counter-limit-version-for-use-handler-loop:
100000
----
export-defs-all-begin:
<all_defs_begin>
----
export-defs-all-end:
<all_defs_end>
----
export-defs-def-begin:
<defs_def_begin>
----
export-defs-def-end:
<defs_def_end>
----
export-defs-phrase-begin:
<def_phrase_begin>
----
export-defs-phrase-end:
<def_phrase_end>
----
list-of-function-branches-already-generated:
start-here
----
list-of-functions-in-optional-code:
----
list-of-immediate-definition-phrases:
optional-import-statements
optional-extra-runtime-functions
list-of-functions-in-optional-code
dashrep-time-limit
dashrep-endless-loop-counter-limit
----
list-of-phrases-with-quoted-strings:
non-breaking-space
empty-text
character-space
character-hyphen
four-hyphens
character-newline
line-break
character-tab
character-open-square-bracket
character-close-square-bracket
comments-ignored
dashrep-undefined
dashrep-delete
dashrep-endless-loop-counter-limit
dashrep-gather-tag-begin
dashrep-gather-tag-end
dashrep-gather-tag-matching-id
dashrep-gather-tag-unique
dashrep-gather-tag-delete
dashrep-path-prefix-for-file-reading
dashrep-path-prefix-for-file-writing
dashrep-time-limit
dashrep-version
export-defs-all-begin
export-defs-all-end
export-defs-def-begin
export-defs-def-end
export-defs-phrase-begin
export-defs-phrase-end
linewise-input-line-from-file
linewise-input-line-count
list-of-compiled-executable-phrases
list-of-pointers-to-unique-words
list-of-unique-word-counts
numeric-map-tile-zoom
time-day-of-month
time-day-of-week
time-day-of-year
time-hour
time-minute
time-month-number
time-second
time-year
yes-or-no-indicate-line-endings
yes-or-no-permission-to-append-to-files
yes-or-no-permission-to-delete-or-overwrite-files
yes-or-no-use-two-spaces-as-column-delimiter
----
list-of-temporary-phrase-name-prefixes:
contents-at-storage-position-
action-name-at-storage-position-
storage-type-at-storage-position-
text-words-at-result-storage-position-
list-of-operands-for-result-storage-position-
storage-position-for-word-list-associated-with-result-storage-position-
----
object-code-copyright-notice:
(c) Copyright 2017 by the entity who owns the source code from which this object code was generated. ALL RIGHTS RESERVED.
----
optional-extra-runtime-functions:
----
optional-import-statements:
----
source-code-copyright-notice:
(c) Copyright 2016-2017 by Richard Fobes at www.github.com/cpsolver/Dashrep-language  ALL RIGHTS RESERVED.
----
storage-position-number:
0
----
string-action:
action
----
string-am:
am
----
string-apostrophe:
apostrophe
----
string-backslash:
backslash
----
string-bee:
bee
----
string-begin:
begin
----
string-being:
being
----
string-character-hyphen-in-brackets:
<character_hyphen>
----
string-character:
character
----
string-code:
code
----
string-com:
com
----
string-def:
def
----
string-defined:
defined
----
string-definition:
definition
----
string-else:
else
----
string-empty:
empty
----
string-end-of:
end-of
----
string-enn:
enn
----
string-executable-phrase:
executable-phrase
----
string-executable:
executable
----
string-for:
for
----
string-four:
four
----
string-here:
here
----
string-hyphen:
hyphen
----
string-line-here:
line-here
----
string-line:
line
----
string-name:
name
----
string-new-line-in-brackets:
[new_line]
----
string-new:
new
----
string-no:
no
----
string-one:
one
----
string-outside:
outside
----
string-phrase:
phrase
----
string-placeholder-prefix:
<dashrep_placeholder_
----
string-placeholder-space:
<character_space>
----
string-space:
space
----
string-spay:
spay
----
string-special:
special
----
string-text:
text
----
string-three:
three
----
string-two-apostrophes:
''
----
string-two:
two
----
string-underscores:
underscores
----
string-whichever:
whichever
----
string-with:
with
----
string-yes:
yes
----
template-new-empty-line:
<new_line>
----
template-new-empty-lines:
<new_line>
<new_line>
----
template-quoted-character-close-square-bracket:
']'
----
template-quoted-character-hyphen:
'-'
----
template-quoted-character-newline:
"\n"
----
template-quoted-character-open-square-bracket:
'['
----
template-quoted-character-space:
' '
----
template-quoted-character-tab:
"\t"
----
template-quoted-character-underscore:
'_'
----
template-quoted-comments-ignored:
''
----
template-quoted-dashrep-delete:
'delete_id'
----
template-quoted-dashrep-endless-loop-counter-limit:
'900000000'
----
template-quoted-dashrep-gather-tag-begin:
'entry_begin'
----
template-quoted-dashrep-gather-tag-delete:
'delete_id'
----
template-quoted-dashrep-gather-tag-end:
'entry_end'
----
template-quoted-dashrep-gather-tag-matching-id:
'1'
----
template-quoted-dashrep-gather-tag-unique:
'url'
----
template-quoted-dashrep-language-yes:
'yes'
----
template-quoted-dashrep-language:
'yes'
----
template-quoted-dashrep-path-prefix-for-file-reading:
''
----
template-quoted-dashrep-path-prefix-for-file-writing:
''
----
template-quoted-dashrep-time-limit:
'1200'
----
template-quoted-dashrep-undefined:
'dashrep_undefined'
----
template-quoted-dashrep-version:
'5.00'
----
template-quoted-empty-text:
''
----
template-quoted-export-defs-all-begin:
''
----
template-quoted-export-defs-all-end:
''
----
template-quoted-export-defs-def-begin:
''
----
template-quoted-export-defs-def-end:
''
----
template-quoted-export-defs-phrase-begin:
''
----
template-quoted-export-defs-phrase-end:
''
----
template-quoted-four-hyphens:
' no-space hyphen-here no-space hyphen-here no-space hyphen-here no-space hyphen-here no-space '
----
template-quoted-line-break:
'<br />'
----
template-quoted-linewise-input-line-count:
'0'
----
template-quoted-linewise-input-line-from-file:
''
----
template-quoted-list-of-compiled-executable-phrases:
''
----
template-quoted-list-of-pointers-to-unique-words:
''
----
template-quoted-list-of-unique-word-counts:
''
----
template-quoted-non-breaking-space:
'no-space &#160; no-space'
----
template-quoted-numeric-map-tile-zoom:
'1'
----
template-quoted-time-day-of-month:
'1'
----
template-quoted-time-day-of-week:
'1'
----
template-quoted-time-day-of-year:
'1'
----
template-quoted-time-hour:
'0'
----
template-quoted-time-minute:
'0'
----
template-quoted-time-month-number:
'1'
----
template-quoted-time-second:
'0'
----
template-quoted-time-year:
'1900'
----
template-quoted-yes-or-no-indicate-line-endings:
'yes'
----
template-quoted-yes-or-no-permission-administrator:
'yes'
----
template-quoted-yes-or-no-permission-to-append-to-files:
'yes'
----
template-quoted-yes-or-no-permission-to-delete-or-overwrite-files:
'yes'
----
template-quoted-yes-or-no-use-two-spaces-as-column-delimiter:
'no'
----
template-show-recursion-stack:
# recursion stack: recursion-stack ( no-space tokens-since-last-show-recursion-stack no-space )  <new_line>
----
template-warning-ambee-amenn-imbalance-introduction:
WARNING:  Definition of phrase
----
template-warning-more-ambee-than-amenn-tokens:
contains more am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
template-warning-more-amenn-than-ambee-tokens:
contains fewer am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
unused-template-quoted-empty-line:
"\n\n"
----
warning-wrong-number-of-required-operands-part-1:
WARNING:  Wrong number of required operands for action
----
warning-wrong-number-of-required-operands-part-2:
(required=
----
warning-wrong-number-of-required-operands-part-3:
, supplied=
----
warning-wrong-number-of-required-operands-part-4:
)  <new_line>
----
code-concat:
.
----
code-for-apostrophe-within-quoted-text:
' . "'" . '
----
code-for-backslash-within-quoted-text:
' . '\\' . '
----
code-for-text-storage-position-part-1:
my $storage_item__
----
code-for-text-storage-position-part-2:
= '
----
code-for-text-storage-position-part-3:
' ;
----
code-get-or-put-phrase-definition-begin:
$global_dashrep_replacement{
----
code-get-or-put-phrase-definition-end:
}
----
code-not-equals:
!=
----
function-name-prefix:
function_compiled__
----
initialize-variable-begin:
$storage_item__ no-space
----
list-of-static-segments-need-to-expand:
segment-initialize-begin
segment-initialize-end
segment-definition-items-begin
segment-definition-items-end
segment-start-object-code-begin
segment-start-object-code-end
segment-optional-import-statements-begin
segment-optional-import-statements-end
segment-functions-runtime-begin
segment-functions-runtime-end
segment-functions-compiled-begin
segment-functions-compiled-end
segment-branch-begin
segment-branch-end
segment-functions-replacement-only-begin
segment-functions-replacement-only-end
segment-optional-extra-runtime-functions-begin
segment-optional-extra-runtime-functions-end
initialize-global-arrays
initialize-global-variables
runtime-code-statement-end-with-new-line
warning-ambee-amenn-imbalance-introduction
warning-more-ambee-than-amenn-tokens
warning-more-amenn-than-ambee-tokens
runtime-code-at-top-if-warning-message
code-phrase-definition-simple-part-1
code-phrase-definition-simple-part-2
code-phrase-definition-simple-part-3
code-phrase-definition-simple-part-4
code-phrase-definition-simple-part-5
code-phrase-definition-simple-part-6
code-phrase-definition-simple-part-7
code-quoted-string-storage-item-part-1
code-quoted-string-storage-item-part-2
code-quoted-string-storage-item-part-3
code-quoted-string-storage-item-part-4
code-quoted-string-storage-item-part-5
code-function-branch-part-1
code-function-branch-part-2
code-function-branch-part-3
code-function-replacement-only-part-1
code-function-replacement-only-part-2
code-function-replacement-only-part-3
code-function-external-part-1
code-function-external-part-2
code-function-external-part-3
code-compiled-function-part-1
code-compiled-function-part-2
code-compiled-function-part-3
code-compiled-function-part-4
code-compiled-function-part-5
code-compiled-function-part-6
code-compiled-function-part-7
code-compiled-function-part-8
code-compiled-function-part-9
code-compiled-function-part-10
code-parameter-result-storage-part-1
code-parameter-result-storage-part-2
runtime-code-for-text-storage-position-end
----
optional-extra-runtime-functions:
----
optional-import-statements:
----
runtime-code-check-operand-begin-contains-real-numbers:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_contains_real_numbers(
----
runtime-code-check-operand-begin-file-open-for-reading:
$global_yes_or_no = &function_parameterized__file_opens_for_reading(
----
runtime-code-check-operand-begin-is-file-name:
$global_yes_or_no = &function_parameterized__yes_or_no_file_name(
----
runtime-code-check-operand-begin-is-integer:
$global_yes_or_no = &function_parameterized__yes_or_no_integer(
----
runtime-code-check-operand-begin-is-phrase-name:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_name(
----
runtime-code-check-operand-begin-is-phrase-not-empty:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_definition_not_empty(
----
runtime-code-check-operand-begin-is-positive-integer:
$global_yes_or_no = &function_parameterized__yes_or_no_positive_integer(
----
runtime-code-check-operand-begin-is-real-number:
$global_yes_or_no = &function_parameterized__yes_or_no_real_number(
----
runtime-code-check-operand-count-after-number:
) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'operand_count' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-count-before-number:
if ( number-of-operands code-not-equals
----
runtime-code-check-operand-end-contains-real-numbers:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'real_numbers' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-file-open-for-reading:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'file_open_for_reading' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-file-name:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'file_name' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-integer:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'integer' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-phrase-name:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'phrase_name' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-phrase-not-empty:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'phrase_not_empty' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-positive-integer:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'positive_integer' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-real-number:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'real_number' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-initialize:
$global_yes_or_no_operand_error = $global_no ;  <new_line>
----
runtime-code-conditionally-insert-separator-space-begin:
# todo: use this new code to more-fastly append repeatedly -- in places where code currently uses ".= ' '" or "ne"  <new_line>

if ( $global_yes_or_no_conditionally_need_separator_space == $global_yes ) {  <new_line>
----
runtime-code-conditionally-insert-separator-space-end:
} else {  <new_line>
   $global_yes_or_no_conditionally_need_separator_space = $global_yes ;  <new_line>
}  <new_line>
----
runtime-code-conditionally-insert-separator-space-initialize:
$global_yes_or_no_conditionally_need_separator_space = $global_no ;  <new_line>
----
runtime-code-storage-item-reference-after-pointer:
----
runtime-code-storage-item-reference-before-pointer:
$storage_item__
----
string-code-nospay-between-spaces-without-padded-spaces:
. ' ' . '' . ' ' .
----
template-code-compiled-function-part-1:
# no-space dashes-long-line  <new_line>
sub function-name-prefix
----
template-code-compiled-function-part-10:
<new_line>
----
template-code-compiled-function-part-2:
( ) {  <new_line>
# $global_phrase_usage_count_for_phrase_number[ 1 ] ++  <new_line>
# $global_replacement_count_for_item_name{ '
----
template-code-compiled-function-part-3:
' } ++ ;  <new_line>
my $saved_accumulator_pointer = -1 ;  <new_line>
<new_line>
#
----
template-code-compiled-function-part-4:
<new_line>
<new_line>
template-runtime-code-check-for-endless-loop
<new_line>
template-runtime-code-check-for-time-limit-exceeded
----
template-code-compiled-function-part-5:
# save concatenated result  <new_line>
template-storage-item-prefix
----
template-code-compiled-function-part-6:
=
----
template-code-compiled-function-part-7:
;  <new_line>
if ( $global_no == &function_parameterized__yes_or_no_empty( template-storage-item-prefix
----
template-code-compiled-function-part-8:
) ) {  <new_line>
if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= template-storage-item-prefix
----
template-code-compiled-function-part-9:
;  <new_line>
}  <new_line>
<new_line>
return '' ;  <new_line>
} # end of function-name-prefix
----
template-code-function-branch-part-1:
} elsif ( $global_phrase_name_to_match eq '
----
template-code-function-branch-part-2:
' ) {  <new_line>
&function_compiled__
----
template-code-function-branch-part-3:
( ) ;
----
template-code-function-external-part-1:
sub function_compiled__
----
template-code-function-external-part-2:
( ) {  <new_line>
&
----
template-code-function-external-part-3:
( ) ;  <new_line>
}  <new_line>
----
template-code-function-replacement-only-part-1:
sub function_compiled__
----
template-code-function-replacement-only-part-2:
( ) {  <new_line>
$global_phrase_name = '
----
template-code-function-replacement-only-part-3:
' ;  <new_line>
&special_function_do_single_replacement_only( ) ;  <new_line>
}  <new_line>
----
template-code-parameter-result-storage-part-1:
my template-storage-item-prefix
----
template-code-parameter-result-storage-part-2:
= '' ; # result storage
----
template-code-phrase-definition-simple-part-1:
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-2:
= '
----
template-code-phrase-definition-simple-part-3:
' ;  <new_line>
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-4:
= '
----
template-code-phrase-definition-simple-part-5:
' ; <new_line>
code-get-or-put-phrase-definition-begin initialize-variable-begin
----
template-code-phrase-definition-simple-part-6:
code-get-or-put-phrase-definition-end = initialize-variable-begin
----
template-code-phrase-definition-simple-part-7:
;
----
template-code-quoted-string-storage-item-part-1:
my initialize-variable-begin
----
template-code-quoted-string-storage-item-part-2:
=
----
template-code-quoted-string-storage-item-part-3:
;  <new_line>
$global_dashrep_replacement{ '
----
template-code-quoted-string-storage-item-part-4:
' } = initialize-variable-begin
----
template-code-quoted-string-storage-item-part-5:
;  <new_line>
----
template-displayed-list-of-possible-new-executable-phrases:
# no-space dashes-long-line  <new_line>
#  Possible new executable phrases (not yet declared)  <new_line>
<new_line>
# list-of-possible-new-executable-phrases  <new_line>
----
template-function-dashrep-expand-phrases:
# no-space dashes-long-line  <new_line>
# dashrep_expand_phrases  <new_line>
<new_line>

sub dashrep_expand_phrases( ) {  <new_line>

my $expand_endless_cycle_count_maximum ;  <new_line>
my $supplied_text ;  <new_line>
my $current_phrase ;  <new_line>
my $result_text ;  <new_line>
my $output_buffer ;  <new_line>
my $space_directive ;  <new_line>
my $expand_endless_loop_counter ;  <new_line>
my $expand_endless_loop_counter_maximum ;  <new_line>
my $recursion_level ;  <new_line>
my $pointer_to_phrase_begin ;  <new_line>
my $pointer_to_next_space ;  <new_line>
my $pointer_to_phrase_end ;  <new_line>
my $prior_length ;  <new_line>
my $prefix ;  <new_line>
my $possible_phrase_name_with_underscores ;  <new_line>
my $length_of_tag ;  <new_line>
my $new_output_buffer ;  <new_line>
my $pointer_to_remainder_of_output_buffer ;  <new_line>
my $possible_phrase_name_with_hyphens ;  <new_line>
my $pointer_to_close_angle_bracket ;  <new_line>
my $length_of_output_buffer ;  <new_line>
my $maximum_cycle_count ;  <new_line>
my $phrase_name ;  <new_line>
my $cycle_count ;  <new_line>
my $phrase_name_with_highest_cycle_count ;  <new_line>
my $length_of_code_at_recursion_level_current ;  <new_line>
my @code_at_recursion_level ;  <new_line>
my @length_of_code_at_recursion_level ;  <new_line>
my @pointer_to_remainder_of_code_at_recursion_level ;  <new_line>

*---
Get the hyphenated phrase or supplied string.
---*

if ( scalar( @_ ) == 1 ) {  <new_line>
$supplied_text = $_[ 0 ] ;  <new_line>
} else {  <new_line>
$result_text = '' ;  <new_line>
return $result_text ;  <new_line>
}  <new_line>

*---
Initialization.
---*

$space_directive = 'none' ;  <new_line>
$result_text = '' ;  <new_line>
$output_buffer = '' ;  <new_line>
$pointer_to_remainder_of_output_buffer = 0 ;  <new_line>
$new_output_buffer = '' ;  <new_line>
$possible_phrase_name_with_underscores = '' ;  <new_line>
$expand_endless_loop_counter = 0 ;  <new_line>
$expand_endless_loop_counter_maximum = 100000 ;  <new_line>
$expand_endless_cycle_count_maximum = 100000 ;  <new_line>
@code_at_recursion_level = ( ) ;  <new_line>
@length_of_code_at_recursion_level = ( ) ;  <new_line>
@pointer_to_remainder_of_code_at_recursion_level = ( ) ;  <new_line>
$code_at_recursion_level[ 0 ] = 'unused' ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ 0 ] = 0 ;  <new_line>
$length_of_code_at_recursion_level[ 0 ] = 0 ;  <new_line>

*---
Begin a loop that handles each space delimited string
in the phrase definition.
---*

$code_at_recursion_level[ 1 ] = $supplied_text ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ 1 ] = 0 ;  <new_line>
$length_of_code_at_recursion_level[ 1 ] = length( $code_at_recursion_level[ 1 ] ) ;  <new_line>
$recursion_level = 1 ;  <new_line>
while ( ( $recursion_level > 0 ) && ( $expand_endless_loop_counter <= $expand_endless_loop_counter_maximum ) ) {  <new_line>
$expand_endless_loop_counter ++ ;  <new_line>

*---
Get the next phrase name.
If there is no more code at the current recursion
level, shift back to the previous recursion level.
When the recursion_level reaches zero, the loop
will end.
---*

$length_of_code_at_recursion_level_current = $length_of_code_at_recursion_level[ $recursion_level ] ;  <new_line>
if ( $length_of_code_at_recursion_level_current == 0 ) {  <new_line>
$recursion_level <character_hyphen><character_hyphen> ;  <new_line>
next ;  <new_line>
}  <new_line>
$pointer_to_phrase_begin = $pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] ;  <new_line>
while ( ( $pointer_to_phrase_begin < $length_of_code_at_recursion_level_current ) && ( substr( $code_at_recursion_level[ $recursion_level ] , $pointer_to_phrase_begin , 1 ) eq ' ' ) ) {  <new_line>
$pointer_to_phrase_begin ++ ;  <new_line>
}  <new_line>
$pointer_to_next_space = index( $code_at_recursion_level[ $recursion_level ] , ' ' , $pointer_to_phrase_begin ) ;  <new_line>
if ( $pointer_to_next_space == -1 ) {  <new_line>
$pointer_to_phrase_end = $length_of_code_at_recursion_level_current - 1 ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $length_of_code_at_recursion_level_current ;  <new_line>
} else {  <new_line>
$pointer_to_next_space = index( $code_at_recursion_level[ $recursion_level ] , ' ' , $pointer_to_phrase_begin ) ;  <new_line>
if ( $pointer_to_next_space > $pointer_to_phrase_begin ) {  <new_line>
$pointer_to_phrase_end = $pointer_to_next_space - 1 ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $pointer_to_next_space ;  <new_line>
} else {  <new_line>
$pointer_to_phrase_end = <character_hyphen>2 ;  <new_line>
}  <new_line>
}  <new_line>
if ( $pointer_to_phrase_begin > $pointer_to_phrase_end ) {  <new_line>
$recursion_level <character_hyphen><character_hyphen> ;  <new_line>
next ;  <new_line>
}  <new_line>
$current_phrase = substr( $code_at_recursion_level[ $recursion_level ] , $pointer_to_phrase_begin , ( $pointer_to_phrase_end - $pointer_to_phrase_begin + 1 ) ) ;  <new_line>

*---
Check for an endless loop caused by the same
phrase name being encountered too many times.
If this occurs, exit the endless loop.
---*

if ( $global_yes_or_no_count_phrase_usage == $global_yes ) {  <new_line>
$global_number_of_times_encountered_phrase_named{ $current_phrase } ++ ;  <new_line>
if ( $global_number_of_times_encountered_phrase_named{ $current_phrase } >= $expand_endless_cycle_count_maximum ) {  <new_line>
$maximum_cycle_count = 0 ;  <new_line>
foreach $phrase_name ( keys( %global_number_of_times_encountered_phrase_named ) ) {  <new_line>
$cycle_count = $global_number_of_times_encountered_phrase_named{ $phrase_name } ;  <new_line>
if ( $cycle_count > $maximum_cycle_count ) {  <new_line>
$maximum_cycle_count = $cycle_count ;  <new_line>
$phrase_name = $phrase_name_with_highest_cycle_count ;  <new_line>
}  <new_line>
}  <new_line>
$global_trace_log .= '{{trace; in subroutine dashrep_expand_phrases encountered phrase ' . $phrase_name_with_highest_cycle_count . ' ' . $maximum_cycle_count . ' number of times}}' . "\n" ;  <new_line>
warn 'Warning: The dashrep_expand_phrases subroutine has encountered an endless loop.' . "\n" . 'Stopped' ;  <new_line>
return '' ;  <new_line>
}  <new_line>
}  <new_line>


*---
If the phrase name is a hyphen directive, or a
space directive, or a line directive, handle it.
---*

if ( $current_phrase eq ( 'hyphen' . '-' . 'here' ) ) {  <new_line>
$output_buffer .= '-' ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'no' . '-' . 'space' ) ) {  <new_line>
if ( $space_directive ne 'one_requested' ) {  <new_line>
$space_directive = 'none' ;  <new_line>
}  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'no_space' . '>' ) ) {  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'one' . '-' . 'space' ) ) {  <new_line>
$space_directive = 'one_requested' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'one_space' . '>' ) ) {  <new_line>
$space_directive = 'one_requested' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'new' . '-' . 'line' ) ) {  <new_line>
$output_buffer .= "\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'new_line' . '>' ) ) {  <new_line>
$output_buffer .= "\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'empty' . '-' . 'line' ) ) {  <new_line>
$output_buffer .= "\n\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'empty_line' . '>' ) ) {  <new_line>
$output_buffer .= "\n\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>

*---
If the phrase name has a definition (which can be
empty), and it is not a space directive or line
directive, insert phrase definition into the text
being expanded, and remove the phrase name.
---*

if ( ( $current_phrase =~ /[^ \<character_hyphen>]\<character_hyphen>[^ \<character_hyphen>]/ ) && ( exists( $global_dashrep_replacement{ $current_phrase } ) ) ) {  <new_line>
$recursion_level ++ ;  <new_line>
$code_at_recursion_level[ $recursion_level ] = $global_dashrep_replacement{ $current_phrase } ;  <new_line>
$length_of_code_at_recursion_level[ $recursion_level ] = length( $code_at_recursion_level[ $recursion_level ] ) ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = 0 ;  <new_line>
next ;  <new_line>
}  <new_line>

*---
If a space should be inserted here, insert it.
Specify a default of inserting one space after
the next phrase insertion.
---*

if ( ( $space_directive eq 'one' ) || ( $space_directive eq 'one_requested' ) ) {  <new_line>
$output_buffer .= ' ' ;  <new_line>
}  <new_line>
$space_directive = 'one' ;  <new_line>

*---
At this point the current text string is not the
name of a defined phrase, so just use the text string.
---*

$output_buffer .= $current_phrase ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $pointer_to_phrase_end + 1 ;  <new_line>

*---
In the output buffer, if there is a
"<specify " string that needs to be
combined with the preceding tag, combine it into
a single XML or HTML tag.
Handle tags of type "<xyz />" as well as "<xyz>".
---*

if ( index( $output_buffer , '<specify ' ) > 0 ) {  <new_line>
$prior_length = 0 ;  <new_line>
while ( length( $output_buffer ) != $prior_length ) {  <new_line>
$prior_length = length( $output_buffer ) ;  <new_line>
$output_buffer =~ s/ *\/> *<specify +([^>]+)>/ $1 \/>/ ;  <new_line>
}  <new_line>
if ( index( $output_buffer , '<specify ' ) > 0 ) {  <new_line>
$prior_length = 0 ;  <new_line>
while ( length( $output_buffer ) != $prior_length ) {  <new_line>
$prior_length = length( $output_buffer ) ;  <new_line>
$output_buffer =~ s/ *> *<specify +/ / ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>

*---
If the output buffer contains a recognized phrase
name using underscores instead of hyphens, and it
is enclosed in angle brackets (with no spaces),
then replace that text with the definition of the
specified phrase.
---*

$output_buffer =~ s/ *<placeholder_for_hyphen_here> */<character_hyphen>/sg ;  <new_line>
$output_buffer =~ s/ *<placeholder_for_new_line> */\n/sg ;  <new_line>
$output_buffer =~ s/ *<placeholder_for_empty_line> */\n/sg ;  <new_line>

if ( $output_buffer =~ /<((no_space)|(hyphen_ no-space here)|(new_line))> *$/ ) {  <new_line>
$space_directive = 'none' ;  <new_line>
}  <new_line>
$length_of_output_buffer = -1 ;  <new_line>
$pointer_to_remainder_of_output_buffer = 0 ;  <new_line>
$new_output_buffer = '' ;  <new_line>
while ( substr( $output_buffer , $pointer_to_remainder_of_output_buffer ) =~ /^(.*?)<([^ \<character_hyphen><character_close_angle_bracket>]+_[^ \<character_hyphen><character_close_angle_bracket>]+)<character_close_angle_bracket>/s ) {  <new_line>
$prefix = $1 ;  <new_line>
$possible_phrase_name_with_underscores = $2 ;  <new_line>
$length_of_output_buffer = length( $output_buffer ) ;  <new_line>
$new_output_buffer .= $prefix ;  <new_line>
$length_of_tag = length( $possible_phrase_name_with_underscores ) ;  <new_line>
$pointer_to_remainder_of_output_buffer += length( $prefix ) + $length_of_tag + 2 ;  <new_line>

$possible_phrase_name_with_hyphens = $possible_phrase_name_with_underscores ;  <new_line>
$possible_phrase_name_with_hyphens =~ s/_/<character_hyphen>/g ;  <new_line>
if ( exists( $global_dashrep_replacement{ $possible_phrase_name_with_hyphens } ) ) {  <new_line>
$new_output_buffer .= $global_dashrep_replacement{ $possible_phrase_name_with_hyphens } ;  <new_line>
} else {  <new_line>
$new_output_buffer .= '<' . $possible_phrase_name_with_underscores . '>' ;  <new_line>
}  <new_line>
}  <new_line>
if ( $length_of_output_buffer != -1 ) {  <new_line>
$output_buffer = $new_output_buffer . substr( $output_buffer , $pointer_to_remainder_of_output_buffer ) ;  <new_line>
$new_output_buffer = '' ;  <new_line>
$possible_phrase_name_with_underscores = '' ;  <new_line>
}  <new_line>

*---
If the output buffer does not contain any text
that might need to be revised, then append it to
the result text.
---*

$pointer_to_close_angle_bracket = index( $output_buffer , '>' ) ;  <new_line>
if ( $pointer_to_close_angle_bracket < 0 ) {  <new_line>
$result_text .= $output_buffer ;  <new_line>
$output_buffer = '' ;  <new_line>
} elsif ( length( $output_buffer ) > 1000 ) {  <new_line>
$result_text .= substr( $output_buffer , 0 , 500 ) ;  <new_line>
$output_buffer = substr( $output_buffer , 500 ) ;  <new_line>
}  <new_line>

*---
Repeat the loop that handles each space delimited
string.
---*

}  <new_line>

*---
Supply the results.
---*

$result_text .= $output_buffer ;  <new_line>
return $result_text ;  <new_line>

template-function-segment-ending
----
template-function-handle-endless-loop-encountered:
# no-space dashes-long-line  <new_line>
# handle_endless_loop_encountered  <new_line>
<new_line>

sub handle_endless_loop_encountered( ) {  <new_line>


*--- todo: eliminate use of phrase dashrep_debug_trace_log ---*


print 'Exceeded endless hyphen-here loop count of ' . $global_endless_loop_counter_limit . "\n" ;  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep-debug-trace-log' code-get-or-put-phrase-definition-end .= 'Exceeded endless hyphen-here loop count of ' . $global_endless_loop_counter_limit . "\n" ;  <new_line>

template-runtime-code-print-trace-output

exit ;  <new_line>

template-function-segment-ending
----
template-function-handle-time-limit-exceeded:
# no-space dashes-long-line  <new_line>
# handle_time_limit_exceeded  <new_line>
<new_line>

sub handle_time_limit_exceeded( ) {  <new_line>
print 'Exceeded time limit of ' . $global_endless_loop_counter_limit . ' seconds' . "\n" ;  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep-debug-trace-log' code-get-or-put-phrase-definition-end .= 'Exceeded time limit of ' . $global_endless_loop_counter_limit . ' seconds' . "\n" ;  <new_line>

template-runtime-code-print-trace-output

exit ;  <new_line>

template-function-segment-ending
----
template-initialize-global-arrays:
my %global_dashrep_replacement = ( ) ;  <new_line>

my @global_phrase_usage_count_for_phrase_number = ( ) ;  <new_line>
my %global_replacement_count_for_item_name = ( ) ;  <new_line>

my @global_accumulator = ( ) ;  <new_line>
$global_accumulator[ 0 ] = '' ;  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>

my %global_yes_found_word = ( ) ;  <new_line>

my @global_count_of_items_appended_to_accumulator = ( ) ;  <new_line>
$global_count_of_items_appended_to_accumulator[ 0 ] = 0 ;  <new_line>
$global_count_of_items_appended_to_accumulator[ 1 ] = 0 ;  <new_line>

my @global_begin_position_for_word = ( ) ;  <new_line>
$global_begin_position_for_word[ 0 ] = 0 ;  <new_line>
$global_begin_position_for_word[ 1 ] = 0 ;  <new_line>

my @global_length_of_word = ( ) ;  <new_line>
$global_length_of_word[ 0 ] = 0 ;  <new_line>
$global_length_of_word[ 1 ] = 0 ;  <new_line>

my @global_pointer_to_whitespace_type = ( ) ;  <new_line>
$global_pointer_to_whitespace_type[ 0 ] = 0 ;  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = 0 ;  <new_line>

my @global_yes_find_next_whitespace_of_type = ( ) ;  <new_line>
$global_yes_find_next_whitespace_of_type[ 0 ] = 0 ;  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>

my @global_word_begin_operand_one_at_word = ( ) ;  <new_line>
my @global_word_length_operand_one_at_word = ( ) ;  <new_line>
my @global_word_begin_operand_two_at_word = ( ) ;  <new_line>
my @global_word_length_operand_two_at_word = ( ) ;  <new_line>
my @global_word_begin_operand_three_at_word = ( ) ;  <new_line>
my @global_word_length_operand_three_at_word = ( ) ;  <new_line>
my @global_word_begin_operand_four_at_word = ( ) ;  <new_line>
my @global_word_length_operand_four_at_word = ( ) ;  <new_line>

my @global_list_of_items_one = ( ) ;  <new_line>
my @global_list_of_items_two = ( ) ;  <new_line>
my @global_column_position_for_item_number = ( ) ;  <new_line>
my @global_input_list = ( ) ;  <new_line>
my @global_input_list_one = ( ) ;  <new_line>
my @global_input_list_two = ( ) ;  <new_line>
my @global_item_number_found_at_position = ( ) ;  <new_line>
my @global_left_and_up_direction_value_for_item_number = ( ) ;  <new_line>
my $global_list_indicating_sort_order_text_string = '' ;  <new_line>
my $global_list_name_prefix = '' ;  <new_line>
my $global_list_of_words_as_text = '' ;  <new_line>
my $global_list_of_x_values_as_text = '' ;  <new_line>
my $global_list_of_y_values_as_text = '' ;  <new_line>
my @global_list = ( ) ;  <new_line>
my $global_list_length = 0 ;  <new_line>
my @global_list_of_file_names = '' ;  <new_line>
my @global_list_of_positions = '' ;  <new_line>
my @global_list_of_storage_names = '' ;  <new_line>
my @global_list_indicating_sort_order = ( ) ;  <new_line>
my @global_list_of_action_names = ( ) ;  <new_line>
my @global_list_of_key_values = ( ) ;  <new_line>
my @global_list_of_loop_words = ( ) ;  <new_line>
my @global_list_of_paired_words = ( ) ;  <new_line>
my @global_list_of_parameter_words = ( ) ;  <new_line>
my @global_list_of_phrase_names = ( ) ;  <new_line>
my @global_list_of_phrases = ( ) ;  <new_line>
my @global_list_of_remaining_item_numbers = ( ) ;  <new_line>
my @global_list_of_sorted_numbers = ( ) ;  <new_line>
my @global_list_of_source_words = ( ) ;  <new_line>
my @global_list_of_start_matching_positions = ( ) ;  <new_line>
my @global_list_of_strings_to_match = ( ) ;  <new_line>
my @global_list_of_tag_names = ( ) ;  <new_line>
my @global_list_of_tag_values_in_sequence_encountered = ( ) ;  <new_line>
my @global_list_of_text_items_to_find = ( ) ;  <new_line>
my @global_list_of_unique_values = ( ) ;  <new_line>
my @global_list_of_values_in_column = ( ) ;  <new_line>
my @global_list_of_words = ( ) ;  <new_line>
my @global_list_of_words_to_check = ( ) ;  <new_line>
my @global_list_of_x_values = ( ) ;  <new_line>
my @global_list_of_y_values = ( ) ;  <new_line>
my @global_octet_number_at_position = ( ) ;  <new_line>
my @global_phrase_naming_convention_for_column = ( ) ;  <new_line>
my @global_right_and_up_direction_value_for_item_number = ( ) ;  <new_line>
my @global_right_direction_text_for_item_number = ( ) ;  <new_line>
my @global_right_direction_value_for_item_number = ( ) ;  <new_line>
my @global_row_position_for_item_number = ( ) ;  <new_line>
my @global_sequence_of_phrases = ( ) ;  <new_line>
my @global_sort_order = ( ) ;  <new_line>
my @global_text_item_in_column = ( ) ;  <new_line>
my @global_unique_word_at_position = ( ) ;  <new_line>
my @global_up_direction_text_for_item_number = ( ) ;  <new_line>
my @global_up_direction_value_for_item_number = ( ) ;  <new_line>
my @global_value_in_column = ( ) ;  <new_line>
my @global_zero_if_not_remaining_item_number = ( ) ;  <new_line>
my @global_name_value_pairs = ( ) ;  <new_line>
<new_line>

my %global_content_for_tag = ( ) ;  <new_line>
my %global_endless_loop_replacements_with_count = ( ) ;  <new_line>
my %global_found_unique_value = ( ) ;  <new_line>
my %global_item_number_at_row_column = ( ) ;  <new_line>
my %global_listed_word = ( ) ;  <new_line>
my %global_occurrence_count_for_word = ( ) ;  <new_line>
my %global_text_to_find_at_position = ( ) ;  <new_line>
my %global_words_at_numeric_value = ( ) ;  <new_line>
<new_line>
<new_line>


# todo: remove these when no longer used  <new_line>

my %global_number_of_times_encountered_phrase_named ;  <new_line>
%global_number_of_times_encountered_phrase_named = ( ) ;  <new_line>
----
template-initialize-global-variables:
my $global_string_word_to_use_in_handler = 'word-to-use-in-handler' ;  <new_line>
my $global_word_to_use_in_handler = '' ;  <new_line>
my $global_source_text = '' ;  <new_line>
my $global_target_text = '' ;  <new_line>
my $global_temporary_text = '' ;  <new_line>
my $global_default_text = '' ;  <new_line>
my $global_text_expanded_parameters_only = '' ;  <new_line>
my $global_action_name = '' ;  <new_line>
my $global_action_operand_one = '' ;  <new_line>
my $global_action_operand_two = '' ;  <new_line>
my $global_action_operand_three = '' ;  <new_line>
my $global_action_operand_four = '' ;  <new_line>
my $global_action_operand_five = '' ;  <new_line>
my $global_action_operands_all = '' ;  <new_line>
my $global_action_result = '' ;  <new_line>
my $global_operand_one = '' ;  <new_line>
my $global_operand_two = '' ;  <new_line>
my $global_operand_three = '' ;  <new_line>
my $global_operand_four = '' ;  <new_line>
my $global_operand_five = '' ;  <new_line>
my $global_operands_all = '' ;  <new_line>
my $global_operand_one_words = '' ;  <new_line>
my $global_operand_two_words = '' ;  <new_line>
my $global_operand_three_words = '' ;  <new_line>
my $global_phrase_name = '' ;  <new_line>
my $global_phrase_name_to_match = '' ;  <new_line>
my $output_results = '' ;  <new_line>
my $global_current_word = '' ;  <new_line>
my $global_concatenated_all_operands = '' ;  <new_line>
my $global_concatenated_all_operands_modified = '' ;  <new_line>
my $global_string_to_be_replaced = '' ;  <new_line>
my $global_text_to_insert = '' ;  <new_line>
my $global_word_pointer_text = '0' ;  <new_line>
my $global_phrase_name_currently_executing = '' ;  <new_line>
my $global_input_file_name = '' ;  <new_line>
my $global_output_file_name = '' ;  <new_line>
my $global_accumulated_matching_entry_info = '' ;  <new_line>
my $global_accumulated_text = '' ;  <new_line>
my $global_action_name_exists = '' ;  <new_line>
my $global_all_defs_begin = '' ;  <new_line>
my $global_all_defs_end = '' ;  <new_line>
my $global_all_lines = '' ;  <new_line>
my $global_angle_in_radians = '' ;  <new_line>
my $global_bottom_left_open_column = '' ;  <new_line>
my $global_bottom_right_open_column = '' ;  <new_line>
my $global_bottom_row_number = '' ;  <new_line>
my $global_character_code_to_decode = '' ;  <new_line>
my $global_character_pointer_to_next_word_zero_based = 0 ;  <new_line>
my $global_runtime_error_type = '' ;  <new_line>
<new_line>

my $global_yes = 1 ;  <new_line>
my $global_no = 0 ;  <new_line>
my $global_yes_or_no = 0 ;  <new_line>
my $global_yes_or_no_operand_error = $global_no ;  <new_line>
my $global_storage_number = 1 ;  <new_line>
my $global_accumulator_pointer = 1 ;  <new_line>
my $global_plus_or_minus_one = 1 ;  <new_line>
my $global_number_of_operands = 0 ;  <new_line>
my $global_numeric_value_first = 0 ;  <new_line>
my $global_numeric_value_second = 0 ;  <new_line>
my $global_character_pointer = 0 ;  <new_line>
my $global_character_pointer_begin = 0 ;  <new_line>
my $global_character_pointer_end = 0 ;  <new_line>
my $global_length_of_text = 0 ;  <new_line>
my $global_length_of_text_source = 0 ;  <new_line>
my $global_length_of_text_segment = 0 ;  <new_line>
my $global_length_of_string_to_be_replaced = 0 ;  <new_line>
my $global_pointer_to_next_space = 0 ;  <new_line>
my $global_pointer_to_first_space = 0 ;  <new_line>
my $global_pointer_to_future_space = 0 ;  <new_line>
my $global_pointer_to_previous_space = 0 ;  <new_line>
my $global_pointer_to_next_whitespace = 0 ;  <new_line>
my $global_pointer_to_previous_whitespace = 0 ;  <new_line>
my $global_pointer_to_left_bracket = 0 ;  <new_line>
my $global_pointer_to_right_bracket = 0 ;  <new_line>
my $global_pointer_to_hyphen = 0 ;  <new_line>
my $global_pointer_to_underscore = 0 ;  <new_line>
my $global_whitespace_type = 0 ;  <new_line>
my $global_counter_number_of_adjacent_spaces = 0 ;  <new_line>
my $global_pointer_to_word = 0 ;  <new_line>
my $global_pointer_to_next_word = 0 ;  <new_line>
my $global_number_of_words = 0 ;  <new_line>
my $global_word_pointer_numeric = 0 ;  <new_line>
my $global_calculated_value = 0 ;  <new_line>
my $global_normalized_calculated_value = 0 ;  <new_line>
my $global_count_range = 0 ;  <new_line>
my $global_counter = 0 ;  <new_line>
my $global_count_number = 0 ;  <new_line>
my $global_count_of_items_appended = 0 ;  <new_line>
my $global_word_pointer_operand_one = 0 ;  <new_line>
my $global_word_pointer_operand_two = 0 ;  <new_line>
my $global_word_pointer_operand_three = 0 ;  <new_line>
my $global_word_pointer_operand_four = 0 ;  <new_line>
<new_line>

my $global_action_debug_line = '' ;  <new_line>
my $global_endless_loop_counter = 0 ;  <new_line>
my $global_endless_loop_counter_limit = 900000 ;  <new_line>
my $global_time_limit = 300 ;  # 300 seconds = 5 minutes  <new_line>
my $global_starting_time = time ;  <new_line>
my $global_interval_count_for_time_limit_check = 0 ;  <new_line>
my $global_nesting_level_of_file_actions = 0 ;  <new_line>
my $global_recursion_level_of_expand_parameters = 0 ;  <new_line>
my $global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
<new_line>

my $global_file_write_protection_mode = 0600 ;  # octal number that specifies no "world" read access  <new_line>
my $global_file_public_read_protection_mode = 0644 ;  # octal number that specifies public "world" read access  <new_line>
<new_line>

my $global_character_position = 0 ;  <new_line>
my $global_character_to_capitalize = '' ;  <new_line>
my $global_character_to_replace = '' ;  <new_line>
my $global_column_number = 0 ;  <new_line>
my $global_column_pointer = 0 ;  <new_line>
my $global_content_for_tag = '' ;  <new_line>
my $global_cosine_of_angle = 0 ;  <new_line>
my $global_count = 0 ;  <new_line>
my $global_count_list_one = 0 ;  <new_line>
my $global_count_list_two = 0 ;  <new_line>
my $global_counter_one = 0 ;  <new_line>
my $global_counter_two = 0 ;  <new_line>
my $global_current_character_position_number = 0 ;  <new_line>
my $global_day_of_month = 0 ;  <new_line>
my $global_day_of_year = 0 ;  <new_line>
my $global_def_begin = '' ;  <new_line>
my $global_def_end = '' ;  <new_line>
my $global_definitions_or_phrase_names = '' ;  <new_line>
my $global_destination_phrase = '' ;  <new_line>
my $global_possible_phrase = '' ;  <new_line>
my $global_directory = '' ;  <new_line>
my $global_do_nothing = 0 ;  <new_line>
my $global_elapsed_time = 0 ;  <new_line>
my $global_ending_character_position = 0 ;  <new_line>
my $global_ending_count = 0 ;  <new_line>
my $global_ending_first_count = 0 ;  <new_line>
my $global_endless_loop_replacements_with_count = 0 ;  <new_line>
my $global_entry_begin = '' ;  <new_line>
my $global_entry_delete = '' ;  <new_line>
my $global_entry_end = '' ;  <new_line>
my $global_entry_matching_id = '' ;  <new_line>
my $global_entry_unique = '' ;  <new_line>
my $global_epoch_seconds = 0 ;  <new_line>
my $global_extra_info = '' ;  <new_line>
my $global_extra_words_without_sort_value = '' ;  <new_line>
my $global_file_name = '' ;  <new_line>
my $global_file_size = 0 ;  <new_line>
my $global_fill_direction = '' ;  <new_line>
my $global_fill_direction_bottom_left = '' ;  <new_line>
my $global_fill_direction_bottom_right = '' ;  <new_line>
my $global_fill_direction_top_left = '' ;  <new_line>
my $global_fill_direction_top_right = '' ;  <new_line>
my $global_final_result = '' ;  <new_line>
my $global_first_object_of_action = '' ;  <new_line>
my $global_first_or_second = '' ;  <new_line>
my $global_first_word = '' ;  <new_line>
my $global_found_unique_value = '' ;  <new_line>
my $global_full_path = '' ;  <new_line>
my $global_generated_list = '' ;  <new_line>
my $global_dashrep_text_list_of_phrase_names = '' ;  <new_line>
my $global_growing_text_to_append = '' ;  <new_line>
my $global_handler_phrase_name = '' ;  <new_line>
my $global_hour = 0 ;  <new_line>
my $global_input_line = '' ;  <new_line>
my $global_input_list_one_phrase_name = '' ;  <new_line>
my $global_input_list_two_phrase_name = '' ;  <new_line>
my $global_item_number = 0 ;  <new_line>
my $global_item_number_at_min_or_max = 0 ;  <new_line>
my $global_item_number_at_row_column = 0 ;  <new_line>
my $global_item_number_found_at_position = 0 ;  <new_line>
my $global_last_pointer = 0 ;  <new_line>
my $global_length_desired = 0 ;  <new_line>
my $global_length_of_first_word = 0 ;  <new_line>
my $global_length_of_loop_list = 0 ;  <new_line>
my $global_length_of_string = 0 ;  <new_line>
my $global_line_count = 0 ;  <new_line>
my $global_line_ending = '' ;  <new_line>
my $global_line_number = 0 ;  <new_line>
my $global_line_status = '' ;  <new_line>
my $global_listed_word = '' ;  <new_line>
my $global_local_endless_loop_counter = 0 ;  <new_line>
my $global_local_endless_loop_counter_maximum = 0 ;  <new_line>
my $global_loop_status_done = '' ;  <new_line>
my $global_map_tile_n = 0 ;  <new_line>
my $global_map_tile_zoom = 0 ;  <new_line>
my $global_matching_text = '' ;  <new_line>
my $global_max_or_min_value = 0 ;  <new_line>
my $global_minimum_number_of_columns = 0 ;  <new_line>
my $global_minute = 0 ;  <new_line>
my $global_month_number = 0 ;  <new_line>
my $global_multiline_value_name = '' ;  <new_line>
my $global_multiplier_for_right_direction_values = 0 ;  <new_line>
my $global_multiplier_for_up_direction_values = 0 ;  <new_line>
my $global_name_of_parameter_for_handler = '' ;  <new_line>
my $global_name_of_phrase_that_contains_list_of_index_values = '' ;  <new_line>
my $global_need_maximum = '' ;  <new_line>
my $global_need_maximum_or_minimum = '' ;  <new_line>
my $global_need_minimum = '' ;  <new_line>
my $global_next_number = 0 ;  <new_line>
my $global_next_value_to_compare = 0 ;  <new_line>
my $global_number_of_characters_to_get = 0 ;  <new_line>
my $global_number_of_column_names = 0 ;  <new_line>
my $global_number_of_columns = 0 ;  <new_line>
my $global_number_of_full_rows = 0 ;  <new_line>
my $global_number_of_items = 0 ;  <new_line>
my $global_number_of_items_in_bottom_row = 0 ;  <new_line>
my $global_number_of_items_remaining = 0 ;  <new_line>
my $global_number_of_items_to_find = 0 ;  <new_line>
my $global_number_of_rows = 0 ;  <new_line>
my $global_number_of_unique_words = 0 ;  <new_line>
my $global_number_of_zeros_needed = 0 ;  <new_line>
my $global_numeric_return_value = 0 ;  <new_line>
my $global_numeric_value = 0 ;  <new_line>
my $global_octet_number = 0 ;  <new_line>
my $global_odd_or_even_based_on_zero_or_one = '' ;  <new_line>
my $global_output_list_one_phrase_name = '' ;  <new_line>
my $global_output_list_two_phrase_name = '' ;  <new_line>
my $global_pair_pointer = 0 ;  <new_line>
my $global_pair_pointer_offset_zero = 0 ;  <new_line>
my $global_pair_status = '' ;  <new_line>
my $global_paired_words_as_text = '' ;  <new_line>
my $global_parameter_begin_or_end_string = '' ;  <new_line>
my $global_parameter_level = 0 ;  <new_line>
my $global_partial_translation = '' ;  <new_line>
my $global_phrase_begin = '' ;  <new_line>
my $global_phrase_being_edited = '' ;  <new_line>
my $global_phrase_end = '' ;  <new_line>
my $global_phrase_length = 0 ;  <new_line>
my $global_phrase_name_containing_parameter_list = '' ;  <new_line>
my $global_phrase_name_containing_pattern = '' ;  <new_line>
my $global_phrase_name_containing_source_words = '' ;  <new_line>
my $global_phrase_name_to_clear = '' ;  <new_line>
my $global_phrase_naming_convention_for_column = '' ;  <new_line>
my $global_phrase_naming_convention_for_this_column = '' ;  <new_line>
my $global_phrase_type = '' ;  <new_line>
my $global_phrase_words = '' ;  <new_line>
my $global_pi = 0 ;  <new_line>
my $global_pointer = 0 ;  <new_line>
my $global_pointer_one = 0 ;  <new_line>
my $global_pointer_to_matching_text = 0 ;  <new_line>
my $global_pointer_two = 0 ;  <new_line>
my $global_position = 0 ;  <new_line>
my $global_position_as_string = 0 ;  <new_line>
my $global_position_begin = 0 ;  <new_line>
my $global_position_end = 0 ;  <new_line>
my $global_position_of_text_found = 0 ;  <new_line>
my $global_possible_error_message = '' ;  <new_line>
my $global_possible_match = '' ;  <new_line>
my $global_possible_matching_entry_info = '' ;  <new_line>
my $global_possible_new_limit = '' ;  <new_line>
my $global_possible_phrase_name = '' ;  <new_line>
my $global_prefix = '' ;  <new_line>
my $global_prefix_text = '' ;  <new_line>
my $global_range_of_right_direction_values = '' ;  <new_line>
my $global_range_of_up_direction_values = '' ;  <new_line>
my $global_read_time = 0 ;  <new_line>
my $global_remainder = 0 ;  <new_line>
my $global_remainder_of_line = '' ;  <new_line>
my $global_remaining_text = '' ;  <new_line>
my $global_repeat_count = 0 ;  <new_line>
my $global_replacement_count = 0 ;  <new_line>
my $global_replacement_count_text = '' ;  <new_line>
my $global_result_text = '' ;  <new_line>
my $global_result_value = 0 ;  <new_line>
my $global_result_word_list = '' ;  <new_line>
my $global_right_and_up_direction_value_for_item_number = '' ;  <new_line>
my $global_right_direction_maximum_value = 0 ;  <new_line>
my $global_right_direction_minimum_value = 0 ;  <new_line>
my $global_row_number = 0 ;  <new_line>
my $global_row_position_for_item_number = 0 ;  <new_line>
my $global_search_starting_position = 0 ;  <new_line>
my $global_second_object_of_action = '' ;  <new_line>
my $global_second_time = 0 ;  <new_line>
my $global_second_word = '' ;  <new_line>
my $global_segment_if_first = '' ;  <new_line>
my $global_segment_if_second = '' ;  <new_line>
my $global_segment_that_might_include_else = '' ;  <new_line>
my $global_separator = '' ;  <new_line>
my $global_separator_one = '' ;  <new_line>
my $global_separator_two = '' ;  <new_line>
my $global_sequence_of_phrases = '' ;  <new_line>
my $global_sine_of_angle = 0 ;  <new_line>
my $global_single_value = 0 ;  <new_line>
my $global_slash_or_backslash_for_path = '' ;  <new_line>
my $global_sort_order = '' ;  <new_line>
my $global_source_definitions = '' ;  <new_line>
my $global_source_filename = '' ;  <new_line>
my $global_source_phrase_name = '' ;  <new_line>
my $global_starting_character_position = 0 ;  <new_line>
my $global_starting_count = 0 ;  <new_line>
my $global_starting_second_count = 0 ;  <new_line>
my $global_storage_name = '' ;  <new_line>
my $global_string_in_phrase = '' ;  <new_line>
my $global_string_to_find = '' ;  <new_line>
my $global_string_to_insert = '' ;  <new_line>
my $global_string_to_match = '' ;  <new_line>
my $global_string_to_search = '' ;  <new_line>
my $global_suffix = '' ;  <new_line>
my $global_supplied_text = '' ;  <new_line>
my $global_tag_name = '' ;  <new_line>
my $global_target_column_number = 0 ;  <new_line>
my $global_target_filename = '' ;  <new_line>
my $global_target_operand = '' ;  <new_line>
my $global_target_phrase_name = '' ;  <new_line>
my $global_target_row_number = 0 ;  <new_line>
my $global_target_sub_folder = '' ;  <new_line>
my $global_temp_text = '' ;  <new_line>
my $global_text_begin = '' ;  <new_line>
my $global_text_being_edited = '' ;  <new_line>
my $global_text_end = '' ;  <new_line>
my $global_text_for_right_direction_values = '' ;  <new_line>
my $global_text_for_up_direction_values = '' ;  <new_line>
my $global_text_item_in_column = '' ;  <new_line>
my $global_text_list_key = '' ;  <new_line>
my $global_text_list_loop = '' ;  <new_line>
my $global_text_list_of_start_matching_positions = '' ;  <new_line>
my $global_text_list_of_unique_word_counts = '' ;  <new_line>
my $global_text_list_of_unique_word_pointers = '' ;  <new_line>
my $global_text_parameter = '' ;  <new_line>
my $global_text_parameter_content = '' ;  <new_line>
my $global_text_parameter_name = '' ;  <new_line>
my $global_text_parameter_value = '' ;  <new_line>
my $global_text_string = '' ;  <new_line>
my $global_text_to_append = '' ;  <new_line>
my $global_text_to_expand = '' ;  <new_line>
my $global_text_to_find = '' ;  <new_line>
my $global_text_to_find_at_position = '' ;  <new_line>
my $global_raw_input = '' ;  <new_line>
my $global_name_value = '' ;  <new_line>
my $global_name = '' ;  <new_line>

my $global_top_left_open_column = 0 ;  <new_line>
my $global_top_right_open_column = 0 ;  <new_line>
my $global_top_row_number = 0 ;  <new_line>
my $global_tracking_on_yes_or_no = '' ;  <new_line>
my $global_translation = '' ;  <new_line>
my $global_undeleted_phrase_content = '' ;  <new_line>
my $global_unicode_number = 0 ;  <new_line>
my $global_unique_word_at_position = '' ;  <new_line>
my $global_up_direction_maximum_value = 0 ;  <new_line>
my $global_up_direction_minimum_value = 0 ;  <new_line>
my $global_use_two_spaces_as_delimiter = '' ;  <new_line>
my $global_use_value_direction = '' ;  <new_line>
my $global_value = 0 ;  <new_line>
my $global_value_direction_left_and_up = 0 ;  <new_line>
my $global_value_direction_right = 0 ;  <new_line>
my $global_value_direction_right_and_up = 0 ;  <new_line>
my $global_value_direction_up = 0 ;  <new_line>
my $global_value_in_column = 0 ;  <new_line>
my $global_value_of_operand_one = 0 ;  <new_line>
my $global_value_one = 0 ;  <new_line>
my $global_value_two = 0 ;  <new_line>
my $global_weekday = '' ;  <new_line>
my $global_word = '' ;  <new_line>
my $global_word_count = 0 ;  <new_line>
my $global_word_number = 0 ;  <new_line>
my $global_word_number_begin = 0 ;  <new_line>
my $global_word_number_end = 0 ;  <new_line>
my $global_word_position = 0 ;  <new_line>
my $global_word_to_check = '' ;  <new_line>
my $global_word_to_find = '' ;  <new_line>
my $global_words_at_numeric_value = '' ;  <new_line>
my $global_words_to_find = '' ;  <new_line>
my $global_words_to_match = '' ;  <new_line>
my $global_write_time = '' ;  <new_line>
my $global_year = 0 ;  <new_line>
my $global_yes_or_no_within_ampersand_encoded_character = '' ;  <new_line>
my $global_zero_if_not_remaining_item_number = '' ;  <new_line>
my $global_zero_padding = '' ;  <new_line>
my $global_cgi_string_length_limit = 100000 ;  <new_line>
my $global_cgi_line_length_limit = 100 ;  <new_line>
my $global_unique_value = '' ;  <new_line>
my $global_yes_or_no_conditionally_need_separator_space = $global_no ;  <new_line>
<new_line>
<new_line>


# todo: remove these when no longer used  <new_line>

my $global_trace_log = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep-debug-trace-log' } = '' ;  <new_line>
----
template-runtime-code-at-top-if-warning-message:
print 'Compiler error; for details see warning messages at top of compiler output file.' . "\n" ;  <new_line>
exit ;  <new_line>
# All done!  <new_line>
<new_line>
----
template-runtime-code-check-for-endless-loop:
# Check for endless loop  <new_line>
$global_endless_loop_counter ++ ;  <new_line>
if ( $global_endless_loop_counter > $global_endless_loop_counter_limit ) {  <new_line>
&handle_endless_loop_encountered( ) ;  <new_line>
exit ;  <new_line>
}  <new_line>
----
template-runtime-code-check-for-time-limit-exceeded:
# Check for time limit exceeded  <new_line>
$global_interval_count_for_time_limit_check ++ ;  <new_line>
if ( $global_interval_count_for_time_limit_check > 10000 ) {  <new_line>
$global_interval_count_for_time_limit_check = 0 ;  <new_line>
$elapsed_time = time - $global_starting_time ;  <new_line>
if ( $elapsed_time > $global_time_limit ) {  <new_line>
&handle_time_limit_exceeded( ) ;  <new_line>
exit ;  <new_line>
}  <new_line>
}  <new_line>
----
template-runtime-code-for-text-storage-position-begin:
my template-storage-item-prefix current-text-storage-position = '
----
template-runtime-code-for-text-storage-position-end:
' ;
----
template-runtime-code-for-word-list-storage-position:
my template-storage-item-prefix storage-position-for-word-list-associated-with-loop = '' ;  *--- # stores list of words for loop ---*
----
template-runtime-code-one-storage-position-declaration:
my storage-position-name = '' ;  <new_line>
----
template-runtime-code-print-trace-output:
*--- todo: eliminate use of variable global_trace_log ---*

print TRACE_OUT "\n\n" . '******************** global trace log ********************' . "\n\n" . code-get-or-put-phrase-definition-begin 'dashrep hyphen-here debug hyphen-here trace hyphen-here log' code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep hyphen-here debug hyphen-here trace hyphen-here log' code-get-or-put-phrase-definition-end = '' ;  <new_line>
$global_trace_log = '' ;  <new_line>
----
template-runtime-code-statement-end-with-new-line:
;  <new_line>
----
template-runtime-code-storage-item-with-pointer:
template-storage-item-prefix storage-item-pointer
----
template-segment-branch-begin:
# no-space dashes-long-line  <new_line>
#  Function branching based on phrase name  <new_line>
#  <new_line>
<new_line>
sub function_branch_based_on_phrase_name( ) {  <new_line>
<new_line>

template-runtime-code-check-for-endless-loop
<new_line>
template-runtime-code-check-for-time-limit-exceeded
<new_line>

if ( $global_phrase_name_to_match eq $global_phrase_name_currently_executing ) {  <new_line>
print 'ERROR:  Phrase ' . $global_phrase_name_to_match . ' has requested executing itself, which would cause an endless loop, so exiting now!' . "\n" ;  <new_line>

template-runtime-code-print-trace-output

exit ;  <new_line>
}  <new_line>

if ( index( $global_phrase_name_to_match , ' ' ) >= 0 ) {  <new_line>
print 'ERROR:  Phrase "' . $global_phrase_name_to_match . '" is not a valid phrase name, which means a major error has occurred, so exiting now!' . "\n" ;  <new_line>

template-runtime-code-print-trace-output

exit ;  <new_line>
}  <new_line>

if ( $global_phrase_name_to_match eq 'start-here' ) {  <new_line>
&function_compiled__start_here( ) ;
----
template-segment-branch-end:
} elsif ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ) ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>

if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>

$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= $global_phrase_name_to_match ;  <new_line>
} # end of branching  <new_line>
return '' ;  <new_line>
} # end of function_branch_based_on_phrase_name  <new_line>
<new_line>
----
template-segment-definition-items-begin:
# no-space dashes-long-line  <new_line>
#  Begin text encountered in definitions  <new_line>
<new_line>
----
template-segment-definition-items-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End text encountered in definitions  <new_line>
<new_line>
----
template-segment-functions-compiled-begin:
# no-space dashes-long-line  <new_line>
#  Begin compiled functions  <new_line>
<new_line>
----
template-segment-functions-compiled-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End compiled functions  <new_line>
<new_line>
<new_line>
----
template-segment-functions-replacement-only-begin:
# no-space dashes-long-line  <new_line>
#  Functions that only do simple (single-item) replacement  <new_line>
#  <new_line>
<new_line>
----
template-segment-functions-replacement-only-end:
<new_line>
sub special_function_do_single_replacement_only( ) {  <new_line>
if ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= $global_phrase_name ;  <new_line>
}  <new_line>
return '' ;  <new_line>
}  <new_line>
<new_line>

<new_line>
#  End of functions that only do single-item replacement only  <new_line>
<new_line>
----
template-segment-functions-runtime-begin:
# no-space dashes-long-line  <new_line>
#  Execute starting/main function  <new_line>
<new_line>

# special initialization to fix bug somewhere earlier in code, but some or most of these are probably not needed:  <new_line>

$global_dashrep_replacement{ 'dashrep hyphen-here version' } = '4.00' ;  <new_line>
$global_dashrep_replacement{ 'empty hyphen-here text' } = '' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here space' } = ' ' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here hyphen' } = '<character_hyphen>' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here newline' } = "\n" ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here open hyphen-here square hyphen-here bracket' } = '[' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here close hyphen-here square hyphen-here bracket' } = ']' ;  <new_line>
$global_dashrep_replacement{ 'character hyphen-here tab' } = "\t" ;  <new_line>
$global_dashrep_replacement{ 'four hyphen-here hyphens' } = '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here comments hyphen-here ignored' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here endless hyphen-here loop hyphen-here counter hyphen-here limit' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here time hyphen-here limit' } = '1200' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here debug hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here xml hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here xml hyphen-here level hyphen-here reset hyphen-here if hyphen-here zero' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here first hyphen-here xml hyphen-here tag hyphen-here name' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here export hyphen-here delimited hyphen-here definitions' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here stop hyphen-here translation' } = '' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here phrases hyphen-here newly hyphen-here defined' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here undefined' } = 'dashrep_undefined' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here begin' } = 'entry_begin' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here end' } = 'entry_end' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here unique' } = 'url' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here matching hyphen-here id' } = '1' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here delete' } = 'delete_id' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here recent hyphen-here phrase hyphen-here name hyphen-here replaced' } = '' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here use hyphen-here slower hyphen-here subset hyphen-here expand' } = 'no' ;  <new_line>
$global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here expand hyphen-here special hyphen-here phrases' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here language hyphen-here yes' } = 'yes' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here unique hyphen-here word hyphen-here counts' } = '' ;  <new_line>
$global_dashrep_replacement{ 'list hyphen-here of hyphen-here pointers hyphen-here to hyphen-here unique hyphen-here words' } = '' ;  <new_line>
$global_dashrep_replacement{ 'dashrep hyphen-here list hyphen-here of hyphen-here recognized hyphen-here phrase hyphen-here names' } = $global_dashrep_text_list_of_phrase_names ;  <new_line>

<new_line>

if ( ( exists( $global_dashrep_replacement{ 'yes-or-no-count-phrase-usage' } ) ) && ( $global_dashrep_replacement{ 'yes-or-no-count-phrase-usage' } eq 'yes' ) ) {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
}  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>
open ( TRACE_OUT , '>' . 'output_trace.txt' ) ;  <new_line>
# if ( length( code-get-or-put-phrase-definition-begin 'start<characer_hyphen>here' code-get-or-put-phrase-definition-end ) > 10 ) {  <new_line>
& no-space function-name-prefix no-space start_here( ) ;  <new_line>
# } else {  <new_line>
# $global_accumulator[ 1 ] = code-get-or-put-phrase-definition-begin 'source<characer_hyphen>code<characer_hyphen>as<characer_hyphen>words' code-get-or-put-phrase-definition-end ;  <new_line>
# }  <new_line>
$output_results = &dashrep_expand_phrases( $global_accumulator[ 1 ] ) ;  <new_line>
if ( ( exists( code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ) ) && ( code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ne '' ) ) {  <new_line>
print code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ;  <new_line>
print TRACE_OUT "\n\n\n" . $output_results . "\n" ;  <new_line>
} else {  <new_line>
print $output_results . "\n" ;  <new_line>
}  <new_line>

template-runtime-code-print-trace-output

exit ;  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Begin runtime functions  <new_line>
<new_line>
----
template-segment-functions-runtime-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End runtime functions  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  All done.  <new_line>
<new_line>

exit;  <new_line>

1;  <new_line>
----
template-segment-initialize-begin:
# no-space dashes-long-line  <new_line>
#  Declare and initialize global arrays and variables  <new_line>
<new_line>
----
template-segment-initialize-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End of initialize variables  <new_line>
<new_line>
----
template-segment-optional-extra-runtime-functions-begin:
# no-space dashes-long-line  <new_line>
#  Begin optional extra runtime functions  <new_line>
#  <new_line>
#  Reminder: Only the following Dashrep conversions are done:  <new_line>
#  * Dashrep comments are removed.  <new_line>
#  * New line directives in angle brackets are handled.  <new_line>
#  * Character space directives in angle brackets are replaced.  <new_line>
#  * Multiple adjacent spaces are compressed to a single space.  <new_line>
<new_line>
----
template-segment-optional-extra-runtime-functions-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End optional extra runtime functions  <new_line>
<new_line>
----
template-segment-optional-import-statements-begin:
# no-space dashes-long-line  <new_line>
#  Begin optional import statements  <new_line>
#  <new_line>
#  Reminder: Only the following Dashrep conversions are done:  <new_line>
#  * Dashrep comments are removed.  <new_line>
#  * New line directives in angle brackets are handled.  <new_line>
#  * Character space directives in angle brackets are replaced.  <new_line>
#  * Multiple adjacent spaces are compressed to a single space.  <new_line>
<new_line>
----
template-segment-optional-import-statements-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End optional import statements  <new_line>
<new_line>
----
template-segment-start-object-code-begin:
#!/usr/bin/perl  <new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  Dashrep compiler output  <new_line>
<new_line>
# object-code-copyright-notice  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Copyright notice within phrase "source<character_hyphen>code<character_hyphen>copyright<character_hyphen>notice":  <new_line>
<new_line>
----
template-segment-start-object-code-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End of introduction to object code that follows  <new_line>
<new_line>
----
template-storage-item-containing-word-list-associated-with-loop:
template-storage-item-prefix storage-position-for-word-list-associated-with-loop
----
template-storage-item-prefix:
$storage_item__ no-space
----
check-operand-count-is-four:
runtime-code-check-operand-count-before-number 4 runtime-code-check-operand-count-after-number
----
check-operand-count-is-one:
runtime-code-check-operand-count-before-number 1 runtime-code-check-operand-count-after-number
----
check-operand-count-is-three:
runtime-code-check-operand-count-before-number 3 runtime-code-check-operand-count-after-number
----
check-operand-count-is-two:
runtime-code-check-operand-count-before-number 2 runtime-code-check-operand-count-after-number
----
check-operand-count-is-zero:
runtime-code-check-operand-count-before-number 0 runtime-code-check-operand-count-after-number
----
check-operand-four-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-four runtime-code-check-operand-end-is-phrase-name
----
check-operand-four-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-four runtime-code-check-operand-end-is-positive-integer
----
check-operand-one-file-exists:
runtime-code-check-operand-begin-file-exists runtime-code-for-operand-number-one runtime-code-check-operand-end-file-exists
----
check-operand-one-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-one runtime-code-check-operand-end-is-file-name
----
check-operand-one-is-integer:
runtime-code-check-operand-begin-is-integer runtime-code-for-operand-number-one runtime-code-check-operand-end-is-integer
----
check-operand-one-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end-is-phrase-name
----
check-operand-one-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-one runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-one-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-one runtime-code-check-operand-end-is-positive-integer
----
check-operand-one-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end-is-real-number
----
check-operand-three-contains-real-numbers:
runtime-code-check-operand-begin-contains-real-numbers runtime-code-for-operand-number-three runtime-code-check-operand-end-contains-real-numbers
----
check-operand-three-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-three runtime-code-check-operand-end-is-phrase-name
----
check-operand-three-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-three runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-three-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-three runtime-code-check-operand-end-is-positive-integer
----
check-operand-two-contains-real-numbers:
runtime-code-check-operand-begin-contains-real-numbers runtime-code-for-operand-number-two runtime-code-check-operand-end-contains-real-numbers
----
check-operand-two-file-exists:
runtime-code-check-operand-begin-file-exists runtime-code-for-operand-number-two runtime-code-check-operand-end-file-exists
----
check-operand-two-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-two runtime-code-check-operand-end-is-file-name
----
check-operand-two-is-integer:
runtime-code-check-operand-begin-is-integer runtime-code-for-operand-number-two runtime-code-check-operand-end-is-integer
----
check-operand-two-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end-is-phrase-name
----
check-operand-two-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-two runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-two-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-two runtime-code-check-operand-end-is-positive-integer
----
check-operand-two-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-two runtime-code-check-operand-end-is-real-number
----
check-user-has-permission-administrator:
if ( ( exists( code-get-or-put-phrase-definition-begin 'yes-or-no-permission-administrator' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes-or-no-permission-administrator' code-get-or-put-phrase-definition-end eq 'yes' ) ) {  <new_line>
$global_yes_or_no = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no = $global_no ;  <new_line>
}  <new_line>

if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'permission_administrator' ;  <new_line>
}  <new_line>
----
check-user-has-permission-append-to-files:
if ( ( exists( code-get-or-put-phrase-definition-begin 'yes-or-no-permission-to-append-to-files' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes-or-no-permission-to-append-to-files' code-get-or-put-phrase-definition-end eq 'yes' ) ) {  <new_line>
$global_yes_or_no = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no = $global_no ;  <new_line>
}  <new_line>

if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'permission_append' ;  <new_line>
}  <new_line>
----
check-user-has-permission-delete-or-overwrite-files:
if ( ( exists( code-get-or-put-phrase-definition-begin 'yes-or-no-permission-to-delete-or-overwrite-files' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes-or-no-permission-to-delete-or-overwrite-files' code-get-or-put-phrase-definition-end eq 'yes' ) ) {  <new_line>
$global_yes_or_no = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no = $global_no ;  <new_line>
}  <new_line>

if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'permission_delete_overwrite' ;  <new_line>
}  <new_line>
----
check-valid-path-for-reading:
$global_yes_or_no = &function_parameterized__yes_or_no_valid_path( code-get-or-put-phrase-definition-begin 'dashrep-path-prefix-for-file-reading' code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'path_reading' ;  <new_line>
}  <new_line>
----
check-valid-path-for-writing:
$global_yes_or_no = &function_parameterized__yes_or_no_valid_path( code-get-or-put-phrase-definition-begin 'dashrep-path-prefix-for-file-writing' code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'path_writing' ;  <new_line>
}  <new_line>
----
list-of-template-functions:
template-function-parameterized-yes-or-no-empty
template-function-parameterized-remove-leading-trailing-spaces
template-function-parameterized-yes-or-no-phrase-name
template-function-parameterized-yes-or-no-phrase-definition-not-empty
template-function-parameterized-yes-or-no-positive-integer
template-function-parameterized-yes-or-no-integer
template-function-parameterized-yes-or-no-real-number
template-function-parameterized-yes-or-no-phrase-contains-real-numbers
template-function-parameterized-normalize-calculated-value
template-function-parameterized-convert-numeric-text-into-numeric-value
template-function-parameterized-convert-numeric-value-into-numeric-text
template-function-parameterized-get-list-of-words
template-function-parameterized-yes-or-no-file-name
template-function-parameterized-yes-or-no-valid-path
template-function-parameterized-yes-or-no-input-file-exists
template-function-parameterized-yes-or-no-output-file-exists

template-function-point-to-words
template-function-point-to-words-in-operand-one
template-function-point-to-words-in-operand-two
template-function-point-to-words-in-operand-three
template-function-remove-extra-spaces
template-function-get-count-of-words
template-function-get-word-at-position
template-function-handle-endless-loop-encountered
template-function-handle-time-limit-exceeded
template-function-dashrep-expand-phrases

list-of-template-functions-for-requested-actions
----
operand-checks-for-action-append-multiple-from-phrases-named-in-pattern:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-append-new-line:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-append-repeatedly-using-count:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer
----
operand-checks-for-action-append-text-no-space:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-append-text:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-clear-listed-phrases:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-clear-phrase:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-convert-from-spoken-dashrep-code:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-convert-into-spoken-dashrep-code:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-convert-unicode-to-html-entities:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-and-move-attributes-into-xml-tags:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-and-remove-attributes-from-xml-tags:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-and-replace-using-paired-listed-words:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-not-empty
----
operand-checks-for-action-copy-and-replace:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name
----
operand-checks-for-action-copy-append-file-to-file:
check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-file-name
----
operand-checks-for-action-copy-characters-from-position-to-position:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer check-operand-four-is-positive-integer
----
operand-checks-for-action-copy-definition-of-named-phrase:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-from-columns-in-file-to-column-lists:
check-operand-count-is-two check-operand-one-is-file-name
----
operand-checks-for-action-copy-from-columns-in-file-to-named-phrases:
check-operand-count-is-three check-operand-one-is-file-name
----
operand-checks-for-action-copy-from-file-to-phrase:
check-operand-count-is-two check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-from-phrase-append-to-file:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-file-name
----
operand-checks-for-action-copy-initial-caps:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-listed-words-to-phrases-named-in-pattern:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-lowercase-only:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-text:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-uppercase-only:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-without-extra-spaces:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-word-at-position:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer
----
operand-checks-for-action-copy-words-at-skip-interval:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer check-operand-four-is-positive-integer
----
operand-checks-for-action-copy-words-found-in-both-lists:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-found-in-either-list:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-found-only-in-first-list:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-words-from-position-to-position:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer check-operand-four-is-positive-integer
----
operand-checks-for-action-copy-words-order-reversed:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-words-rearrange-using-order-sort-alphabetic:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-rearrange-using-order-sort-numeric:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-sort-alphabetic:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-words-sort-numeric:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-words-that-begin-with-listed-words:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-that-begin-with-text:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-that-contain-listed-words:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-copy-words-unique-only:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-copy-zero-pad-left-to-length:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer
----
operand-checks-for-action-create-empty-file:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-create-empty-sub-folder:
check-operand-count-is-one check-operand-one-is-phrase-not-empty
----
operand-checks-for-action-decode-from-cgi-parameter:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-delete-file:
check-operand-count-is-one check-operand-one-is-file-name check-valid-path-for-writing check-user-has-permission-delete-or-overwrite-files
----
operand-checks-for-action-delete-listed-phrases:
check-operand-count-is-one
----
operand-checks-for-action-encode-as-cgi-parameter:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-expand-parameters-only:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-expand-text:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-find-line-in-file-that-begins-with-text:
check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name
----
operand-checks-for-action-find-lines-in-file-that-begin-with-any-listed-word:
check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name
----
operand-checks-for-action-find-lines-in-file-that-begin-with-any-two-words-listed:
check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name
----
operand-checks-for-action-flush-trace-log:
check-operand-count-is-zero
----
operand-checks-for-action-gather-from-tagged-file-one-entry:
check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-name
----
operand-checks-for-action-gather-tagged-info-from-file:
check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-name
----
operand-checks-for-action-generate-counts-from-integer-to-integer:
check-operand-count-is-three check-operand-one-is-integer check-operand-two-is-integer check-operand-three-is-phrase-name
----
operand-checks-for-action-generate-every-ordered-pairwise-combination-of-words:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-generate-every-pairwise-combination-of-words:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name
----
operand-checks-for-action-generate-list-of-all-dashrep-phrases:
check-operand-count-is-one check-operand-one-is-phrase-name check-user-has-permission-administrator
----
operand-checks-for-action-generate-list-of-files-in-current-read-directory:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-generate-list-of-folders-in-current-read-directory:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-generate-phrase-usage-counts:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-generate-positions-of-delimiter:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-generate-positions-of-first-matching-delimiter-after-listed-positions:
check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name
----
operand-checks-for-action-generate-positions-of-listed-words:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-get-cgi-information:
check-operand-count-is-zero
----
operand-checks-for-action-get-characters-from-position-to-position:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-positive-integer check-operand-three-is-positive-integer
----
operand-checks-for-action-get-count-of-characters:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-get-count-of-words:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-get-current-time-in-epoch-seconds:
check-operand-count-is-zero
----
operand-checks-for-action-get-definitions-from-file:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-get-position-of-matching-text:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-get-position-of-word:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-get-word-at-position:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-positive-integer
----
operand-checks-for-action-insert-angle-bracketed-definitions:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-insert-codeview-tags:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-linewise-read-from-file-and-use-handler:
check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-not-empty
----
operand-checks-for-action-modification-time-of-file:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-numeric-absolute:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-cosine:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-decrement:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-numeric-divide-by:
check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number
----
operand-checks-for-action-numeric-equal-greater-less-compare:
check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number
----
operand-checks-for-action-numeric-increment:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-numeric-integer:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-logarithm-base-10:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-logarithm-base-e:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-minus:
check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number
----
operand-checks-for-action-numeric-odd-or-even:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-sine:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-numeric-two-dimensional-sort-into-columns-and-rows:
check-operand-count-is-four check-operand-one-is-positive-integer check-operand-two-contains-real-numbers check-operand-three-contains-real-numbers
----
operand-checks-for-action-numeric-vector-absolutes:
check-operand-count-is-two check-operand-two-is-phrase-name
----
operand-checks-for-action-numeric-vector-add-number:
check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-real-number check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-vector-integers:
check-operand-count-is-two check-operand-two-is-phrase-name
----
operand-checks-for-action-numeric-vector-multiply-by-number:
check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-real-number check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-vectors-add:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-vectors-divide-by:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-vectors-from-delta-values-calculate-distances:
check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-vectors-multiply:
check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name
----
operand-checks-for-action-numeric-y-map-tile-number-based-on-latitude:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-prepend-text-no-space:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-prepend-text:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-put-into-phrase:
check-operand-one-is-phrase-name
----
operand-checks-for-action-rename-file:
check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-file-name
----
operand-checks-for-action-set-file-permission-public-read:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-size-of-file:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-split-epoch-seconds-into-named-components-for-zero-meridian:
check-operand-count-is-one check-operand-one-is-positive-integer
----
operand-checks-for-action-split-epoch-seconds-into-named-components:
check-operand-count-is-one check-operand-one-is-real-number
----
operand-checks-for-action-trace-show:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-use-handler-with-each-word-in-phrase:
check-operand-count-is-two check-operand-one-is-phrase-not-empty check-operand-two-is-phrase-name
----
operand-checks-for-action-write-dashrep-definitions-listed-in-phrase-to-file:
check-operand-count-is-two check-operand-one-is-phrase-not-empty check-operand-two-is-file-name
----
operand-checks-for-action-write-gathered-listed-items-to-end-of-file:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-file-name
----
operand-checks-for-action-xml-move-attributes-into-tag-elements:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-yes-or-no-empty-phrase:
check-operand-count-is-one check-operand-one-is-phrase-name
----
operand-checks-for-action-yes-or-no-file-exists:
check-operand-count-is-one check-operand-one-is-file-name
----
operand-checks-for-action-yes-or-no-folder-exists:
check-operand-count-is-one check-operand-one-is-phrase-not-empty
----
operand-checks-for-action-yes-or-no-same-two-phrase-definitions:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-yes-or-no-same-two-words:
check-operand-one-is-phrase-name
----
operand-checks-for-action-yes-or-no-word-is-in-phrase:
check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name
----
operand-checks-for-action-zero-one-multiple:
check-operand-count-is-one check-operand-one-is-positive-integer
----
operand-checks-for-action-zero-or-nonzero:
check-operand-count-is-one check-operand-one-is-positive-integer
----
runtime-code-word-within-source-text:
substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer_numeric ] , $global_length_of_word[ $global_word_pointer_numeric ] )
----
template-current-word-in-operand-one:
substr( $global_operand_one_words , $global_word_begin_operand_one_at_word[ $global_word_pointer_operand_one ] , $global_word_length_operand_one_at_word[ $global_word_pointer_operand_one ] )
----
template-current-word-in-operand-three:
substr( $global_operand_three_words , $global_word_begin_operand_three_at_word[ $global_word_pointer_operand_three ] , $global_word_length_operand_three_at_word[ $global_word_pointer_operand_three ] )
----
template-current-word-in-operand-two:
substr( $global_operand_two_words , $global_word_begin_operand_two_at_word[ $global_word_pointer_operand_two ] , $global_word_length_operand_two_at_word[ $global_word_pointer_operand_two ] )
----
template-function-append-multiple-from-phrases-named-in-pattern:
template-interpreter-function-begin

sub function__append_multiple_from_phrases_named_in_pattern( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_phrase_name_containing_pattern = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
$global_phrase_name_containing_source_words = '' ;  <new_line>
if ( ( defined( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } ) ) && ( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } =~ /^([^ ]*)ambee<character_hyphen>([^ ]*)<character_hyphen>amenn([^ ]*)$/ ) ) {  <new_line>
    $global_prefix = $1 ;  <new_line>
    $global_phrase_name_containing_parameter_list = $2 ;  <new_line>
    $global_suffix = $3 ;  <new_line>
} else {  <new_line>
    $global_action_result = 'runtime_operand_error_append_multiple_from_phrases_named_in_pattern' ;  <new_line>
    return ;  <new_line>
}  <new_line>
$global_prefix =~ s/[ \n]+//g ;  <new_line>
$global_prefix =~ s/^<character_hyphen>+// ;  <new_line>
$global_suffix =~ s/[ \n]+//g ;  <new_line>
$global_suffix =~ s/<character_hyphen>+$// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/[ \n]+//g ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ) ) ) {  <new_line>
    $global_action_result = 'runtime_operand_error_append_multiple_from_phrases_named_in_pattern' ;  <new_line>
    return ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'runtime_operand_error_append_multiple_from_phrases_named_in_pattern' ;  <new_line>
    return ;  <new_line>
}  <new_line>
@global_list_of_parameter_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
for ( $global_pointer = 0 ; $global_pointer <= $#global_list_of_parameter_words ; $global_pointer ++ ) {  <new_line>
    $global_source_phrase_name = $global_prefix . $global_list_of_parameter_words[ $global_pointer ] . $global_suffix ;  <new_line>
    if ( ( $global_source_phrase_name =~ /^[^ ]+$/ ) && ( defined( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
        $global_text_string = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
        $global_text_string =~ s/\n/ /sg ;  <new_line>
        $global_text_string =~ s/^ +// ;  <new_line>
        $global_text_string =~ s/ +$// ;  <new_line>
        $global_dashrep_replacement{ $global_target_phrase_name } .= ' ' . $global_text_string ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-append-repeatedly-using-count:
template-interpreter-function-begin

sub function__append_repeatedly_using_count( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_to_append = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_action_result = '' ;  <new_line>
    return ;  <new_line>
}  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
}  <new_line>
$global_text_to_append =~ s/^ +//s ;  <new_line>
$global_text_to_append =~ s/ +$//s ;  <new_line>
if ( $global_operand_three eq '0' ) {  <new_line>
    $global_repeat_count = 0 ;  <new_line>
} else {  <new_line>
    $global_repeat_count = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
}  <new_line>
if ( ( $global_repeat_count < 1 ) || ( $global_repeat_count > 99999 ) ) {  <new_line>
    $global_action_result = '' ;  <new_line>
} else {  <new_line>
    $global_growing_text_to_append = '' ;  <new_line>
    if ( $global_dashrep_replacement{ $global_operand_two } eq '' ) {  <new_line>
        $global_growing_text_to_append = $global_text_to_append ;  <new_line>
    } else {  <new_line>
        $global_growing_text_to_append = ' ' . $global_text_to_append ;  <new_line>
    }  <new_line>
    for ( $global_count = 2 ; $global_count <= $global_repeat_count ; $global_count ++ ) {  <new_line>
        $global_growing_text_to_append .= ' ' . $global_text_to_append ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_operand_two } .= $global_growing_text_to_append ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-clear-listed-phrases:
template-interpreter-function-begin

sub function__clear_listed_phrases( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( not ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_phrase_names = split( / +/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
foreach $global_phrase_name_to_clear ( @global_list_of_phrase_names ) {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ) {  <new_line>
        $global_dashrep_replacement{ $global_phrase_name_to_clear } = '' ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-convert-unicode-to-html-entities:
template-interpreter-function-begin

sub function__convert_unicode_to_html_entities( ) {  <new_line>

#  Converts non hyphen-here ASCII characters, and convert a few  <new_line>
#  ASCII characters such as:  <new_line>
#  11 which is "LF" (line feed)  <new_line>
#  13 which is "CR" (carriage return)  <new_line>
#  127 which is "del"  <new_line>

$global_action_result = '' ;  <new_line>
if ( $global_action_name eq 'convert hyphen-here unicode hyphen-here to hyphen-here html hyphen-here entities' ) {  <new_line>
    $global_source_phrase_name = $global_operand_one ;  <new_line>
    $global_target_phrase_name = $global_operand_two ;  <new_line>
    if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
        $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
    }  <new_line>
    $global_accumulated_text = '' ;  <new_line>
    @global_octet_number_at_position = unpack( "C*" , $global_dashrep_replacement{ $global_source_phrase_name } ) ;  <new_line>
    $global_yes_or_no_within_ampersand_encoded_character = 'no' ;  <new_line>
    $global_pointer = -1 ;  <new_line>
    while ( $global_pointer < $#global_octet_number_at_position ) {  <new_line>
        $global_pointer ++ ;  <new_line>
        $global_octet_number = $global_octet_number_at_position[ $global_pointer ] ;  <new_line>
        if ( $global_octet_number < 32 ) {  <new_line>
            $global_unicode_number = $global_octet_number ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        } elsif ( $global_octet_number < 127 ) {  <new_line>
            $global_accumulated_text .= chr( $global_octet_number ) ;  <new_line>
        } elsif ( $global_octet_number >= 0xfc ) {  <new_line>
            $global_unicode_number = ( ( ( ( ( ( ( ( ( ( $global_octet_number - 0xfc ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 4 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 5 ] - 128 ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
            $global_pointer += 5 ;  <new_line>
        } elsif ( $global_octet_number >= 0xf8 ) {  <new_line>
            $global_unicode_number = ( ( ( ( ( ( ( ( $global_octet_number - 0xf8 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 4 ] - 128 ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
            $global_pointer += 4 ;  <new_line>
        } elsif ( $global_octet_number >= 0xf0 ) {  <new_line>
            $global_unicode_number = ( ( ( ( ( ( $global_octet_number - 0xf0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
            $global_pointer += 3 ;  <new_line>
        } elsif ( $global_octet_number >= 0xe0 ) {  <new_line>
            $global_unicode_number = ( ( ( ( $global_octet_number - 0xe0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
            $global_pointer += 2 ;  <new_line>
        } elsif ( $global_octet_number >= 0xc0 ) {  <new_line>
            $global_unicode_number = ( ( $global_octet_number - 0xc0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
            $global_pointer += 1 ;  <new_line>
        } elsif ( $global_octet_number > 0 ) {  <new_line>
            $global_unicode_number = $global_octet_number ;  <new_line>
            $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_text ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-and-move-attributes-into-xml-tags:
template-interpreter-function-begin

sub function__copy_and_move_attributes_into_xml_tags( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
while( $global_text_being_edited =~ / *\/> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *\/> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4 \/>/sg ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit <character_hyphen> 100 ) {  <new_line>
        $global_action_result = 'error_endless_loop_within_action_copy_and_move_attributes_into_xml_tags';  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
while( $global_text_being_edited =~ / *> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4>/sg ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit <character_hyphen> 100 ) {  <new_line>
        $global_action_result = 'error_endless_loop_within_action_copy_and_move_attributes_into_xml_tags';  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_text_being_edited ;  <new_line>

template-interpreter-function-end
----
template-function-copy-and-remove-attributes-from-xml-tags:
template-interpreter-function-begin

sub function__copy_and_remove_attributes_from_xml_tags( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/< *(\/?) *([a<character_hyphen>zA<character_hyphen>Z]+)[^>\/]*(\/?)[^>]*>/<$1$2$3>/gi ;  <new_line>
$global_text_being_edited =~ s/><!\[CDATA\[/>/gi ;  <new_line>
$global_text_being_edited =~ s/\]\]></</gi ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_text_being_edited ;  <new_line>

template-interpreter-function-end
----
template-function-copy-and-replace-using-paired-listed-words:
template-interpreter-function-begin

sub function__copy_and_replace_using_paired_listed_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = '' ;  <new_line>
}  <new_line>

$global_result_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>

if ( not( exists( $global_dashrep_replacement{ $global_operand_three } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_three } = '' ;  <new_line>
}  <new_line>

$global_paired_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_paired_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_paired_words_as_text =~ s/^ +// ;  <new_line>
$global_paired_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_paired_words = split( / +/ , $global_paired_words_as_text ) ;  <new_line>
$global_pair_status = 'search' ;  <new_line>
for ( $global_pair_pointer_offset_zero = 0 ; $global_pair_pointer_offset_zero <= $#global_list_of_paired_words ; $global_pair_pointer_offset_zero ++ ) {  <new_line>
    if ( $global_pair_status eq 'search' ) {  <new_line>
        $global_string_to_be_replaced = $global_list_of_paired_words[ $global_pair_pointer_offset_zero ] ;  <new_line>
        $global_pair_status = 'replace' ;  <new_line>
    } else {  <new_line>
        $global_string_to_insert = $global_list_of_paired_words[ $global_pair_pointer_offset_zero ] ;  <new_line>
        $global_remaining_text = $global_result_text ;  <new_line>
        $global_result_text = '' ;  <new_line>
        $global_pointer_to_matching_text = index( $global_remaining_text , $global_string_to_be_replaced ) ;  <new_line>
        while ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            if ( $global_pointer_to_matching_text > 0 ) {  <new_line>
                $global_result_text .= substr( $global_remaining_text , 0 , $global_pointer_to_matching_text ) ;  <new_line>
            }  <new_line>
            $global_result_text .= $global_string_to_insert ;  <new_line>
            $global_remaining_text = substr( $global_remaining_text , ( $global_pointer_to_matching_text + length( $global_string_to_be_replaced ) ) ) ;  <new_line>
            $global_pointer_to_matching_text = index( $global_remaining_text , $global_string_to_be_replaced ) ;  <new_line>
        }  <new_line>
        $global_result_text .= $global_remaining_text ;  <new_line>
        $global_pair_status = 'search' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_result_text ;  <new_line>

template-interpreter-function-end
----
template-function-copy-and-replace:
template-interpreter-function-begin

sub function__copy_and_replace( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>

if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>

$global_string_to_be_replaced = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_four } ) ) {  <new_line>
    $global_text_to_insert = $global_dashrep_replacement{ $global_operand_four } ;  <new_line>
} else {  <new_line>
    $global_text_to_insert = '' ;  <new_line>
}  <new_line>

$global_source_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
if ( ( length( $global_text_to_insert ) >= length( $global_string_to_be_replaced ) ) && ( index( $global_text_to_insert , $global_string_to_be_replaced ) >= 0 ) ) {  <new_line>
} elsif ( ( length( $global_string_to_be_replaced ) >= length( $global_text_to_insert ) ) && ( length( $global_text_to_insert ) > 0 ) && ( index( $global_string_to_be_replaced , $global_text_to_insert ) >= 0 ) ) {  <new_line>
} else {  <new_line>
    $global_length_of_string_to_be_replaced = length( $global_string_to_be_replaced ) ;  <new_line>
    $global_character_position = index( $global_source_text , $global_string_to_be_replaced ) ;  <new_line>
    while ( $global_character_position >= 0 ) {  <new_line>
        $global_source_text = substr( $global_source_text , 0 , $global_character_position ) . $global_text_to_insert . substr( $global_source_text , $global_character_position + $global_length_of_string_to_be_replaced ) ;  <new_line>
        $global_character_position = index( $global_source_text , $global_string_to_be_replaced ) ;  <new_line>
        $global_endless_loop_counter ++ ;  <new_line>
        $global_replacement_count_for_item_name{ 'loop within action ' . $global_action_name } ++ ;  <new_line>
        if ( $global_endless_loop_counter > $global_endless_loop_counter_limit - 100 ) {  <new_line>
            $global_trace_log .= '{{trace; Error: During the action ' . $global_action_name . ' the endless loop counter got within 100 counts of exceeding its limit, so no more replacements will be done by this action.}}' . "\n";  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_target_phrase_name } = $global_source_text ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-append-file-to-file:
template-interpreter-function-begin

sub function__copy_append_file_to_file( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_target_filename eq "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_target_filename . "]" ;  <new_line>
} elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to copy from phrase " . $global_source_phrase_name . " to end of file " . $global_target_filename . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to append to files]" ;  <new_line>
}  <new_line>
if ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
}  <new_line>
if ( open ( OUTFILE , '>>' . $global_target_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be opened for writing]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    while ( $global_input_line = <INFILE> ) {  <new_line>
        chomp( $global_input_line ) ;  <new_line>
        print OUTFILE $global_input_line . "\n" ;  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; copied from file " . $global_source_filename . " to file " . $global_target_filename . "}}\n" ;  <new_line>
    }  <new_line>
} else  <new_line>
{  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>
close( OUTFILE ) ;  <new_line>
if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-characters-from-position-to-position:
template-interpreter-function-begin

sub function__copy_characters_from_position_to_position( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_pointer_one = -1 ;  <new_line>
$global_pointer_two = -1 ;  <new_line>
if ( $global_operand_three =~ /^([0<character_hyphen>9]+)$/ ) {  <new_line>
    $global_pointer_one = $1 ;  <new_line>
}  <new_line>
if ( $global_operand_four =~ /^([0<character_hyphen>9]+)$/ ) {  <new_line>
    $global_pointer_two = $1 ;  <new_line>
}  <new_line>
if ( ( $global_pointer_one == -1 ) || ( $global_pointer_two == -1 ) || ( $global_pointer_one > $global_pointer_two ) ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_characters_from_position_to_position' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_source_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = substr( $global_source_text , ( $global_pointer_one - 1 ) , ( $global_pointer_two - $global_pointer_one + 1 ) ) ;  <new_line>

template-interpreter-function-end
----
template-function-copy-from-columns-in-file-to-column-lists:
template-interpreter-function-begin

sub function__copy_from_columns_in_file_to_column_lists( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_operand_two eq "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
} elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_list_name_prefix = $global_operand_two ;  <new_line>
    @global_list_of_values_in_column = ( ) ;  <new_line>
    $global_minimum_number_of_columns = 999 ;  <new_line>
    while ( $global_input_line = <INFILE> ) {  <new_line>
        chomp( $global_input_line ) ;  <new_line>
        $global_input_line =~ s/[\n\t]+/ /g ;  <new_line>
        $global_input_line =~ s/^ +// ;  <new_line>
        $global_input_line =~ s/ +$// ;  <new_line>
        @global_value_in_column = split( / +/ , $global_input_line ) ;  <new_line>
        $global_number_of_columns = scalar( @global_value_in_column ) ;  <new_line>
        if ( $global_number_of_columns < 1 ) {  <new_line>
            return '' ;  <new_line>
        } elsif ( $global_number_of_columns < $global_minimum_number_of_columns ) {  <new_line>
            $global_minimum_number_of_columns = $global_number_of_columns ;  <new_line>
        }  <new_line>
        if ( $global_number_of_columns > 0 ) {  <new_line>
            for ( $global_column_pointer = 1 ; $global_column_pointer <= $global_minimum_number_of_columns ; $global_column_pointer ++ ) {  <new_line>
                $global_list_of_values_in_column[ $global_column_pointer ] .= $global_value_in_column[ $global_column_pointer <character_hyphen> 1 ] . " " ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    for ( $global_column_pointer = 1 ; $global_column_pointer <= $global_minimum_number_of_columns ; $global_column_pointer ++ ) {  <new_line>
        $global_list_of_values_in_column[ $global_column_pointer ] =~ s/ +$// ;  <new_line>
        $global_dashrep_replacement{ $global_list_name_prefix . "<character_hyphen>" . $global_column_pointer } = $global_list_of_values_in_column[ $global_column_pointer ] ;  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; copied from columns in file " . $global_source_filename . " to phrase names with prefix " . $global_operand_two . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
if ( $global_possible_error_message ne "" ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-copy-from-columns-in-file-to-named-phrases:
template-interpreter-function-begin

sub function__copy_from_columns_in_file_to_named_phrases( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_operand_two eq "" ) || ( $global_operand_three eq "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . " and " . $global_operand_three . "]" ;  <new_line>
} elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
    $global_temp_text =~ s/^ +// ;  <new_line>
    $global_temp_text =~ s/ +$//s ;  <new_line>
    if ( $global_temp_text =~ / / ) {  <new_line>
        @global_phrase_naming_convention_for_column = split( /[ \n\r]+/ , $global_temp_text ) ;  <new_line>
        $global_number_of_column_names = scalar( @global_phrase_naming_convention_for_column ) ;  <new_line>
        $global_prefix_text = $global_phrase_naming_convention_for_column[ 0 ] ;  <new_line>
    } else {  <new_line>
        $global_phrase_naming_convention_for_column[ 1 ] = "" ;  <new_line>
        $global_number_of_column_names = 2 ;  <new_line>
        $global_prefix_text = $global_temp_text ;  <new_line>
    }  <new_line>
    if ( $global_prefix_text !~ /^[^ ]+$/ ) {  <new_line>
        $global_possible_error_message .= " [warning, action " . $global_action_name . " has prefix of " . $global_prefix_text . " that is not valid]" ;  <new_line>
    }  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_name_of_phrase_that_contains_list_of_index_values = $global_operand_three ;  <new_line>
    if ( $global_name_of_phrase_that_contains_list_of_index_values !~ /^[a hyphen-here z0<character_hyphen>9_\<character_hyphen>]+$/i ) {  <new_line>
        $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid third operand " . $global_name_of_phrase_that_contains_list_of_index_values . "]" ;  <new_line>
    }  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_list_of_unique_values = "" ;  <new_line>
    $global_dashrep_replacement{ $global_name_of_phrase_that_contains_list_of_index_values } = $global_list_of_unique_values ;  <new_line>
    if ( ( exists( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here use hyphen-here two hyphen-here spaces hyphen-here as hyphen-here column hyphen-here delimiter" } ) ) && ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here use hyphen-here two hyphen-here spaces hyphen-here as hyphen-here column hyphen-here delimiter" } eq "yes" ) ) {  <new_line>
        $global_use_two_spaces_as_delimiter = "yes" ;  <new_line>
    } else {  <new_line>
        $global_use_two_spaces_as_delimiter = "no" ;  <new_line>
    }  <new_line>
    while ( $global_input_line = <INFILE> ) {  <new_line>
        chomp( $global_input_line ) ;  <new_line>
        $global_input_line =~ s/[ \n\t]+$// ;  <new_line>
        if ( $global_use_two_spaces_as_delimiter eq "yes" ) {  <new_line>
            @global_text_item_in_column = split( /<character_space> +/ , $global_input_line ) ;  <new_line>
        } else {  <new_line>
            @global_text_item_in_column = split( /[\t ]/ , $global_input_line ) ;  <new_line>
        }  <new_line>
        $global_unique_value = $global_text_item_in_column[ 0 ] ;  <new_line>
        if ( $global_unique_value =~ / / ) {  <new_line>
            $global_unique_value =~ s/ +/_/g ;  <new_line>
        }  <new_line>
        $global_number_of_columns = scalar( @global_text_item_in_column ) ;  <new_line>
        if ( $global_number_of_columns > $global_number_of_column_names ) {  <new_line>
            $global_number_of_columns = $global_number_of_column_names ;  <new_line>
        }  <new_line>
        if ( $global_number_of_columns > 0 ) {  <new_line>
            $global_list_of_unique_values .= " " . $global_unique_value ;  <new_line>
            for ( $global_column_pointer = 2 ; $global_column_pointer <= $global_number_of_column_names ; $global_column_pointer ++ ) {  <new_line>
                if ( $global_phrase_naming_convention_for_column[ $global_column_pointer <character_hyphen> 1 ] ne "" ) {  <new_line>
                    $global_phrase_naming_convention_for_this_column = $global_prefix_text . "<character_hyphen>" . $global_unique_value . "<character_hyphen>" . $global_phrase_naming_convention_for_column[ $global_column_pointer <character_hyphen> 1 ] ;  <new_line>
                } else {  <new_line>
                    $global_phrase_naming_convention_for_this_column = $global_prefix_text . "<character_hyphen>" . $global_unique_value ;  <new_line>
                }  <new_line>
                if ( $global_column_pointer <= $global_number_of_columns ) {  <new_line>
                    $global_dashrep_replacement{ $global_phrase_naming_convention_for_this_column } = $global_text_item_in_column[ $global_column_pointer <character_hyphen> 1 ] ;  <new_line>
                } else {  <new_line>
                    $global_dashrep_replacement{ $global_phrase_naming_convention_for_this_column } = "" ;  <new_line>
                }  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_list_of_unique_values =~ s/^ +// ;  <new_line>
    $global_dashrep_replacement{ $global_name_of_phrase_that_contains_list_of_index_values } = $global_list_of_unique_values ;  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; copied from columns in file " . $global_source_filename . " to phrase names specified in phrase " . $global_target_phrase_name . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
if ( $global_possible_error_message ne "" ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-copy-from-file-to-phrase:
template-interpreter-function-begin

sub function__copy_from_file_to_phrase( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_target_phrase_name eq "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_target_phrase_name . "]" ;  <new_line>
} elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_all_lines = "" ;  <new_line>
    $global_line_ending = "" ;  <new_line>
    $global_line_number = 0 ;  <new_line>
    if ( not( exists( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings" } ) ) ) {  <new_line>
        $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings" } = "no" ;  <new_line>
    }  <new_line>
    if ( ( exists( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings" } ) ) && ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings" } eq "yes" ) ) {  <new_line>
        $global_line_ending = " end hyphen-here of hyphen-here line hyphen-here here " ;  <new_line>
    } else {  <new_line>
        $global_line_ending = " " ;  <new_line>
    }  <new_line>
    while ( $global_input_line = <INFILE> ) {  <new_line>
        chomp( $global_input_line ) ;  <new_line>
        $global_input_line =~ s/[\t\f\n\r]+/ /g ;  <new_line>
        $global_input_line =~ s/^ +/ / ;  <new_line>
        $global_input_line =~ s/ +$/ / ;  <new_line>
        if ( $global_action_name eq "copy hyphen-here from hyphen-here file hyphen-here to hyphen-here phrase" ) {  <new_line>
            if ( ( $global_input_line ne "" ) || ( $global_line_ending ne " " ) ) {  <new_line>
                $global_all_lines .= $global_input_line . $global_line_ending ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_target_phrase_name } = $global_all_lines ;  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; copied from file " . $global_source_filename . " to phrase " . $global_target_phrase_name . "}}\n" ;  <new_line>
    }  <new_line>
} else  <new_line>
{  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-copy-from-phrase-append-to-file:
template-interpreter-function-begin

sub function__copy_from_phrase_append_to_file( ) {  <new_line>

template-interpreter-function-middle

if ( $global_target_filename eq "" ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_phrase_name . " and " . $global_target_filename . "]" ;  <new_line>
} elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to copy from phrase " . $global_source_phrase_name . " to end of file " . $global_target_filename . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to append to files]" ;  <new_line>
} elsif ( open ( OUTFILE , '>>' . $global_target_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be opened for writing]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) {  <new_line>
        print OUTFILE $global_dashrep_replacement{ $global_source_phrase_name } . "\n" ;  <new_line>
    } else {  <new_line>
        print OUTFILE $global_source_phrase_name . "\n" ;  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; copied from phrase " . $global_source_phrase_name . " to end of file " . $global_target_filename . "}}\n" ;  <new_line>
    }  <new_line>
} else  <new_line>
{  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( OUTFILE ) ;  <new_line>
if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-initial-caps:
template-interpreter-function-begin

sub function__copy_initial_caps( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
$global_remaining_text = $global_temp_text ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
if ( $global_remaining_text =~ /^([a<character_hyphen>z])(.*)$/ ) {  <new_line>
    $global_character_to_capitalize = $1 ;  <new_line>
    $global_remaining_text = $2 ;  <new_line>
    $global_accumulated_text .= uc( $global_character_to_capitalize ) ;  <new_line>
}  <new_line>
while ( $global_remaining_text =~ /^(.*?) ([a<character_hyphen>z])(.*)$/ ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_to_capitalize = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= ' ' . uc( $global_character_to_capitalize ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_text ;  <new_line>

template-interpreter-function-end
----
template-function-copy-listed-words-to-phrases-named-in-pattern:
template-interpreter-function-begin

sub function__copy_listed_words_to_phrases_named_in_pattern( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_phrase_name_containing_source_words = $global_operand_one ;  <new_line>
$global_phrase_name_containing_pattern = $global_operand_two ;  <new_line>
$global_target_phrase_name = '' ;  <new_line>
if ( ( defined( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } ) ) && ( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } =~ /^([^ ]*)ambee<character_hyphen>([^ ]*)<character_hyphen>amenn([^ ]*)$/ ) ) {  <new_line>
    $global_prefix = $1 ;  <new_line>
    $global_phrase_name_containing_parameter_list = $2 ;  <new_line>
    $global_suffix = $3 ;  <new_line>
}  <new_line>
$global_prefix =~ s/[ \n]+//g ;  <new_line>
$global_prefix =~ s/^<character_hyphen>+// ;  <new_line>
$global_suffix =~ s/[ \n]+//g ;  <new_line>
$global_suffix =~ s/<character_hyphen>+$// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/[ \n]+//g ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ) ) ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_listed_words_to_phrases_named_in_pattern' ;  <new_line>
    return ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_listed_words_to_phrases_named_in_pattern' ;  <new_line>
    return ;  <new_line>
}  <new_line>
@global_list_of_parameter_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_phrase_name_containing_source_words =~ s/[ \n]+//sg ;  <new_line>
$global_phrase_name_containing_source_words =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_source_words =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_source_words } ) ) ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_listed_words_to_phrases_named_in_pattern' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_source_words } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_listed_words_to_phrases_named_in_pattern' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_source_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
for ( $global_pointer = 0 ; $global_pointer <= $#global_list_of_parameter_words ; $global_pointer ++ ) {  <new_line>
    $global_source_phrase_name = $global_prefix . $global_list_of_parameter_words[ $global_pointer ] . $global_suffix ;  <new_line>
    if ( ( $global_source_phrase_name =~ /^[^ ]+$/ ) && ( defined( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
        $global_text_string = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
        $global_text_string =~ s/\n/ /sg ;  <new_line>
        $global_text_string =~ s/^ +// ;  <new_line>
        $global_text_string =~ s/ +$// ;  <new_line>
        $global_dashrep_replacement{ $global_target_phrase_name } .= ' ' . $global_text_string ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-words-at-skip-interval:
----
template-function-copy-words-found-in-both-lists:
template-interpreter-function-begin

sub function__copy_words_found_in_both_lists( ) {  <new_line>


# todo: rewrite this code to use new functions: point_to_words_in_operand_one and point_to_words_in_operand_two  <new_line>
# also use: $global_yes_found_word{ }  <new_line>


$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_two } ) ) {  <new_line>
    $global_text_list_key = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
} else {  <new_line>
    $global_text_list_key = '' ;  <new_line>
}  <new_line>
$global_destination_phrase = $global_operand_three ;  <new_line>

$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( ( exists( $global_listed_word{ $global_word } ) ) && ( $global_occurrence_count_for_word{ $global_word } == 1 ) ) {  <new_line>
            $global_result_word_list .= $global_word . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-found-in-either-list:
template-interpreter-function-begin

sub function__copy_words_found_in_either_list( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_text_list_key = $global_dashrep_replacement{ $global_operand_one } . ' ' . $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_text_list_key ne '' ) {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
    %global_listed_word = ( ) ;  <new_line>
    foreach $global_word ( @global_list_of_key_values ) {  <new_line>
        $global_listed_word{ $global_word } = 'exists' ;  <new_line>
    }  <new_line>
    foreach $global_word ( keys( %global_listed_word ) ) {  <new_line>
        $global_result_word_list .= $global_word . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_result_word_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-found-only-in-first-list:
template-interpreter-function-begin

sub function__copy_words_found_only_in_first_list( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

if ( $global_action_name eq 'copy<character_hyphen>words<character_hyphen>unique<character_hyphen>only' ) {  <new_line>
    $global_text_list_key = '' ;  <new_line>
    $global_destination_phrase = $global_operand_two ;  <new_line>
} else {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_operand_two } ) ) {  <new_line>
        $global_text_list_key = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
    } else {  <new_line>
        $global_text_list_key = '' ;  <new_line>
    }  <new_line>
    $global_destination_phrase = $global_operand_three ;  <new_line>
}  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( not( exists( $global_listed_word{ $global_word } ) ) ) {  <new_line>
            $global_result_word_list .= $global_word . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-from-position-to-position:
template-interpreter-function-begin

sub function__copy_words_from_position_to_position( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_word_number_begin = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
$global_word_number_end = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_four ) ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_temp_text =~ s/\n/ /sg ;  <new_line>
    $global_temp_text =~ s/^ +// ;  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
    @global_list = split( / +/ , $global_temp_text ) ;  <new_line>
} else  <new_line>
{  <new_line>
    @global_list = ( ) ;  <new_line>
}  <new_line>
$global_word_count = $#global_list + 1 ;  <new_line>
if ( $global_word_number_end > $global_word_count ) {  <new_line>
    $global_word_number_end = $global_word_count ;  <new_line>
}  <new_line>
if ( ( $global_word_count < 1 ) || ( $global_word_number_begin < 1 ) || ( $global_word_number_end < 1 ) || ( $global_word_number_begin > $global_word_count ) || ( $global_word_number_end < $global_word_number_begin ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_result_text = '' ;  <new_line>
    $global_separator = '' ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
    for ( $global_word_number = $global_word_number_begin ; $global_word_number <= $global_word_number_end ; $global_word_number ++ ) {  <new_line>
        $global_result_text .= $global_separator . $global_list[ $global_word_number - 1 ] ;  <new_line>
        $global_separator = ' ' ;  <new_line>
    }  <new_line>
    $global_result_text =~ s/ +$// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_result_text ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-words-order-reversed:
template-interpreter-function-begin

sub function__copy_words_order_reversed( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_temp_text =~ s/\n/ /sg ;  <new_line>
    $global_temp_text =~ s/^ +// ;  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
    @global_list = split( / +/ , $global_temp_text ) ;  <new_line>
} else {  <new_line>
    @global_list = ( ) ;  <new_line>
}  <new_line>
$global_count = $#global_list + 1 ;  <new_line>
$global_temp_text = '' ;  <new_line>
if ( $global_count > 0 ) {  <new_line>
    for ( $global_word_number = $global_count ; $global_word_number >= 1 ; $global_word_number <character_hyphen><character_hyphen> ) {  <new_line>
        $global_temp_text .= $global_list[ $global_word_number - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_temp_text ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-rearrange-using-order-sort-alphabetic:
template-interpreter-function-begin

sub function__copy_words_rearrange_using_order_sort_alphabetic( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_operand_one =~ s/\n/ /g ;  <new_line>

if ( ( $global_operand_one !~ /^[^ ]+$/ ) || ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) || ( not( defined( $global_dashrep_replacement{ $global_operand_one } ) ) ) ) {  <new_line>
} else {  <new_line>

    $global_source_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_source_text =~ s/\n/ /sg ;  <new_line>
    $global_source_text =~ s/^ +// ;  <new_line>
    $global_source_text =~ s/ +$// ;  <new_line>
    if ( $global_source_text =~ / / ) {  <new_line>
        @global_list_of_words = split( / +/ , $global_source_text ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_words = ( ) ;  <new_line>
        $global_list_of_words[ 0 ] = $global_source_text ;  <new_line>
    }  <new_line>
    $global_list_indicating_sort_order_text_string = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/\n/ /s ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/^ +// ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/ +$// ;  <new_line>
    @global_list_indicating_sort_order = split( / +/ , $global_list_indicating_sort_order_text_string ) ;  <new_line>
    @global_sort_order = sort( @global_list_indicating_sort_order ) ;  <new_line>
    $global_extra_words_without_sort_value = '' ;  <new_line>
    if ( $#global_list_indicating_sort_order < $#global_list_of_words ) {  <new_line>
        for ( $global_word_position = ( $#global_list_indicating_sort_order + 2 ) ; $global_word_position <= ( $#global_list_of_words + 1 ) ; $global_word_position ++ ) {  <new_line>
            $global_extra_words_without_sort_value .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
    %global_words_at_numeric_value = ( ) ;  <new_line>
    for ( $global_word_position = 1 ; $global_word_position <= ( $#global_list_indicating_sort_order + 1 ) ; $global_word_position ++ ) {  <new_line>
        $global_numeric_value = $global_list_indicating_sort_order[ $global_word_position - 1 ] ;  <new_line>
        $global_words_at_numeric_value{ $global_numeric_value } .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_text_string = '' ;  <new_line>
    foreach $global_numeric_value ( @global_sort_order ) {  <new_line>
        if ( $global_words_at_numeric_value{ $global_numeric_value } =~ /[^ ]/ ) {  <new_line>
            $global_text_string .= $global_words_at_numeric_value{ $global_numeric_value } . ' ' ;  <new_line>
            $global_words_at_numeric_value{ $global_numeric_value } = '' ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_text_string .= ' ' . $global_extra_words_without_sort_value ;  <new_line>
    $global_text_string =~ s/ +/ /g ;  <new_line>
    $global_text_string =~ s/ $// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_text_string ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-words-rearrange-using-order-sort-numeric:
template-interpreter-function-begin

sub function__copy_words_rearrange_using_order_sort_numeric( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( $global_dashrep_replacement{ $global_operand_three } =~ /[^0<character_hyphen>9\.\<character_hyphen> ]/ ) {  <new_line>
    $global_action_result = 'runtime_operand_error_copy_words_rearrange_using_order_sort_numeric' ;  <new_line>
    return ;  <new_line>
}  <new_line>

$global_operand_one =~ s/\n/ /g ;  <new_line>

if ( ( $global_operand_one !~ /^[^ ]+$/ ) || ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) || ( not( defined( $global_dashrep_replacement{ $global_operand_one } ) ) ) ) {  <new_line>
} else {  <new_line>

    $global_source_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_source_text =~ s/\n/ /sg ;  <new_line>
    $global_source_text =~ s/^ +// ;  <new_line>
    $global_source_text =~ s/ +$// ;  <new_line>
    if ( $global_source_text =~ / / ) {  <new_line>
        @global_list_of_words = split( / +/ , $global_source_text ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_words = ( ) ;  <new_line>
        $global_list_of_words[ 0 ] = $global_source_text ;  <new_line>
    }  <new_line>
    $global_list_indicating_sort_order_text_string = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/\n/ /s ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/^ +// ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/ +$// ;  <new_line>
    @global_list_indicating_sort_order = split( / +/ , $global_list_indicating_sort_order_text_string ) ;  <new_line>
    @global_sort_order = sort { $a <=> $b } @global_list_indicating_sort_order ;  <new_line>
    $global_extra_words_without_sort_value = '' ;  <new_line>
    if ( $#global_list_indicating_sort_order < $#global_list_of_words ) {  <new_line>
        for ( $global_word_position = ( $#global_list_indicating_sort_order + 2 ) ; $global_word_position <= ( $#global_list_of_words + 1 ) ; $global_word_position ++ ) {  <new_line>
            $global_extra_words_without_sort_value .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
    %global_words_at_numeric_value = ( ) ;  <new_line>
    for ( $global_word_position = 1 ; $global_word_position <= ( $#global_list_indicating_sort_order + 1 ) ; $global_word_position ++ ) {  <new_line>
        $global_numeric_value = $global_list_indicating_sort_order[ $global_word_position - 1 ] ;  <new_line>
        $global_words_at_numeric_value{ $global_numeric_value } .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_text_string = '' ;  <new_line>
    foreach $global_numeric_value ( @global_sort_order ) {  <new_line>
        if ( $global_words_at_numeric_value{ $global_numeric_value } =~ /[^ ]/ ) {  <new_line>
            $global_text_string .= $global_words_at_numeric_value{ $global_numeric_value } . ' ' ;  <new_line>
            $global_words_at_numeric_value{ $global_numeric_value } = '' ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_text_string .= ' ' . $global_extra_words_without_sort_value ;  <new_line>
    $global_text_string =~ s/ +/ /g ;  <new_line>
    $global_text_string =~ s/ $// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_text_string ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-copy-words-sort-alphabetic:
template-interpreter-function-begin

sub function__copy_words_sort_alphabetic( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
@global_list_of_sorted_numbers = sort( @global_list ) ;  <new_line>
$global_temp_text = join( ' ' , @global_list_of_sorted_numbers ) ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_temp_text ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-sort-numeric:
template-interpreter-function-begin

sub function__copy_words_sort_numeric( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
@global_list_of_sorted_numbers = sort { $a <=> $b } @global_list ;  <new_line>
$global_temp_text = join( ' ' , @global_list_of_sorted_numbers ) ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_temp_text ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-that-begin-with-listed-words:
template-interpreter-function-begin

sub function__copy_words_that_begin_with_listed_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_words_to_check = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_strings_to_match = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word_to_check ( @global_list_of_words_to_check ) {  <new_line>
    foreach $global_string_to_match ( @global_list_of_strings_to_match ) {  <new_line>
        $global_pointer_to_matching_text = index( $global_word_to_check , $global_string_to_match ) ;  <new_line>
        if ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            if ( $global_pointer_to_matching_text == 0 ) {  <new_line>
                $global_generated_list .= $global_word_to_check . ' ' ;  <new_line>
                last ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-that-begin-with-text:
template-interpreter-function-begin

sub function__copy_words_that_begin_with_text( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_list_of_words_as_text = '' ;  <new_line>
}  <new_line>

$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
    @global_list_of_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
} elsif ( $global_list_of_words_as_text eq '' ) {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
}  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_length_of_string = length( $global_string_to_search ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word ( @global_list_of_words ) {  <new_line>
    if ( substr( $global_word , 0 , $global_length_of_string ) eq $global_string_to_search ) {  <new_line>
        $global_generated_list .= $global_word . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-that-contain-listed-words:
template-interpreter-function-begin

sub function__copy_words_that_contain_listed_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_words_to_check = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_strings_to_match = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word_to_check ( @global_list_of_words_to_check ) {  <new_line>
    foreach $global_string_to_match ( @global_list_of_strings_to_match ) {  <new_line>
        $global_pointer_to_matching_text = index( $global_word_to_check , $global_string_to_match ) ;  <new_line>
        if ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            $global_generated_list .= $global_word_to_check . ' ' ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-interpreter-function-end
----
template-function-copy-words-unique-only:
template-interpreter-function-begin

sub function__copy_words_unique_only( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

$global_text_list_key = '' ;  <new_line>
$global_destination_phrase = $global_operand_two ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( not( exists( $global_listed_word{ $global_word } ) ) ) {  <new_line>
            if ( $global_occurrence_count_for_word{ $global_word } == 1 ) {  <new_line>
                $global_result_word_list .= $global_word . ' ' ;  <new_line>
                $global_number_of_unique_words ++ ;  <new_line>
                $global_unique_word_at_position[ $global_number_of_unique_words ] = $global_word ;  <new_line>
                $global_text_list_of_unique_word_pointers .= $global_pointer . ' ' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>
$global_text_list_of_unique_word_counts = '' ;  <new_line>
for ( $global_pointer = 1 ; $global_pointer <= $global_number_of_unique_words ; $global_pointer ++ ) {  <new_line>
    if ( $global_pointer > 1 ) {  <new_line>
        $global_text_list_of_unique_word_counts .= ' ' ;  <new_line>
    }  <new_line>
    $global_text_list_of_unique_word_counts .= sprintf( "%d" , $global_occurrence_count_for_word{ $global_unique_word_at_position[ $global_pointer ] } ) ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>unique<character_hyphen>word<character_hyphen>counts' } = $global_text_list_of_unique_word_counts ;  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>pointers<character_hyphen>to<character_hyphen>unique<character_hyphen>words' } = $global_text_list_of_unique_word_pointers ;  <new_line>

template-interpreter-function-end
----
template-function-create-empty-file:
template-interpreter-function-begin

sub function__create_empty_file( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_target_filename eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_target_filename . " and " . $global_operand_two . "]" ;  <new_line>
} elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to create empty file: " . $global_target_filename . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to delete or overwrite files]" ;  <new_line>
} else  <new_line>
{  <new_line>
    if ( open ( OUTFILE , '>' . $global_target_filename ) ) {  <new_line>
        $global_possible_error_message .= "" ;  <new_line>
    } else {  <new_line>
        $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be created]" ;  <new_line>
    }  <new_line>
    if ( $global_possible_error_message eq "" ) {  <new_line>
        print OUTFILE "" ;  <new_line>
        if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
            $global_trace_log .= "{{trace; created empty file: " . $global_target_filename . "}}\n" ;  <new_line>
        }  <new_line>
    } else {  <new_line>
        if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
            $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
        }  <new_line>
    }  <new_line>
    close( OUTFILE ) ;  <new_line>
    if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) ) {  <new_line>
        if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
            $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-create-empty-sub-folder:
template-interpreter-function-begin

sub function__create_empty_sub_folder( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_operand_one eq "" ) || ( $global_operand_one !~ /^[a hyphen-here z0<character_hyphen>9_\<character_hyphen>]+$/i ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operand " . $global_operand_one . "]" ;  <new_line>
} elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to create empty folder: " . $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing" } . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to create files or folders]" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_target_sub_folder = $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing" } . $global_operand_one ;  <new_line>
    if ( $global_target_sub_folder =~ /([\/\\])/ ) {  <new_line>
        $global_slash_or_backslash_for_path = $1 ;  <new_line>
    } else {  <new_line>
        $global_slash_or_backslash_for_path = '/' ;  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing" } !~ /[\/\\]$/ ) {  <new_line>
        $global_target_sub_folder = $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing" } . $global_slash_or_backslash_for_path . $global_operand_one ;  <new_line>
    }  <new_line>
    if ( <character_hyphen>d $global_target_sub_folder ) {  <new_line>
        if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
            $global_trace_log .= "{{trace; sub hyphen-here folder " . $global_target_sub_folder . " already exists, so not created". "}}\n" ;  <new_line>
        }  <new_line>
        $global_possible_error_message .= "" ;  <new_line>
    } else {  <new_line>
        umask( 0077 ) ;  <new_line>
        if ( mkdir( $global_target_sub_folder ) ) {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; sub hyphen-here folder " . $global_target_sub_folder . " created". "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; sub hyphen-here folder " . $global_target_sub_folder . " could not be created". "}}\n" ;  <new_line>
            }  <new_line>
            $global_possible_error_message .= " [warning, sub hyphen-here folder named " . $global_target_sub_folder . " could not be created]" ;  <new_line>
        }  <new_line>
    }  <new_line>
    if ( $global_possible_error_message ne "" ) {  <new_line>
        if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
            $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-decode-from-cgi-parameter:
template-interpreter-function-begin

sub function__decode_from_cgi_parameter( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/\+/ /sg ;  <new_line>
$global_remaining_text = $global_text_being_edited ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
while ( $global_remaining_text =~ /^(.*?)\%([0<character_hyphen>9a hyphen-here fA hyphen-here F][0<character_hyphen>9a hyphen-here fA hyphen-here F])(.*)$/s ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_code_to_decode = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= chr( hex( $global_character_code_to_decode ) ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_accumulated_text =~ s/\+/ /sg ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_accumulated_text ;  <new_line>

template-interpreter-function-end
----
template-function-delete-listed-phrases:
template-interpreter-function-begin

sub function__delete_listed_phrases( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( not ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_phrase_names = split( / +/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
foreach $global_phrase_name_to_clear ( @global_list_of_phrase_names ) {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ) {  <new_line>
        delete( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-encode-as-cgi-parameter:
template-interpreter-function-begin

sub function__encode_as_cgi_parameter( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/\n/ /sg ;  <new_line>
$global_text_being_edited =~ s/ /\+/g ;  <new_line>
$global_remaining_text = $global_text_being_edited ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
while ( $global_remaining_text =~ /^(.*?)([^a hyphen-here zA hyphen-here Z0<character_hyphen>9])(.*)$/s ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_to_replace = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= '%' . sprintf( "%02x" , ord( $global_character_to_replace ) ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_accumulated_text ;  <new_line>

template-interpreter-function-end
----
template-function-file-open-input:
# no-space dashes-long-line  <new_line>
# function__file_open_input  <new_line>
#  <new_line>
#  Input is $global_input_file_name  <new_line>
#  Output is file INFILE  <new_line>
<new_line>

sub function__file_open_input( ) {  <new_line>



template-function-segment-ending
----
template-function-file-open-output:
# no-space dashes-long-line  <new_line>
# function__file_open_input  <new_line>
#  <new_line>
#  Input is $global_output_file_name  <new_line>
#  Output is file OUTFILE  <new_line>
<new_line>

sub function__file_open_output( ) {  <new_line>



template-function-segment-ending
----
template-function-file-write-protect:
# no-space dashes-long-line  <new_line>
# function__file_write_protect  <new_line>
#  <new_line>
#  Input is $global_output_file_name  <new_line>
<new_line>

sub function__file_write_protect( ) {  <new_line>



template-function-segment-ending
----
template-function-find-line-in-file-that-begins-with-text:
template-interpreter-function-begin

sub function__find_line_in_file_that_begins_with_text( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) {  <new_line>
        $global_list_of_storage_names = "" ;  <new_line>
        if ( ( $global_source_filename eq "" ) || ( $global_operand_two eq "" ) || ( $global_operand_three eq "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . " and " . $global_operand_three . "]" ;  <new_line>
        } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has empty search word in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( ( ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has no search words in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else {  <new_line>
            $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            if ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) {  <new_line>
                $global_string_to_find = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for string " . $global_string_to_find . "}}\n" ;  <new_line>
                }  <new_line>
                $global_length_of_string = length( $global_string_to_find ) ;  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_string ) ;  <new_line>
                    if ( $global_possible_match eq $global_string_to_find ) {  <new_line>
                        $global_dashrep_replacement{ $global_operand_three } = $global_input_line ;  <new_line>
                        if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                            $global_trace_log .= "{{trace; in file " . $global_source_filename . " found starting string " . $global_string_to_find . "}}\n" ;  <new_line>
                        }  <new_line>
                        last ;  <new_line>
                    }  <new_line>
                }  <new_line>
            } else {  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for words in phrase " . $global_operand_two . "}}\n" ;  <new_line>
                }  <new_line>
                $global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                $global_list_of_words_as_text =~ s/^ +// ;  <new_line>
                $global_list_of_words_as_text =~ s/ +$//s ;  <new_line>
                if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
                    @global_list_of_words = split( /[ \n\r]+/ , $global_list_of_words_as_text ) ;  <new_line>
                } else {  <new_line>
                    @global_list_of_words = ( ) ;  <new_line>
                    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
                }  <new_line>
                foreach $global_word ( @global_list_of_words ) {  <new_line>
                    $global_matching_text{ $global_word } = "match" ;  <new_line>
                }  <new_line>
                if ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) {  <new_line>
                    $global_words_to_match = 1 ;  <new_line>
                } else {  <new_line>
                    $global_words_to_match = 2 ;  <new_line>
                }  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_length_of_first_word = index( $global_input_line , " " ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_first_word ) ;  <new_line>
                    if ( ( exists( $global_matching_text{ $global_possible_match } ) ) && ( $global_matching_text{ $global_possible_match } eq "match" ) ) {  <new_line>
                        if ( $global_words_to_match == 1 ) {  <new_line>
                            $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                            $global_storage_number ++ ;  <new_line>
                            $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                            $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                        } else {  <new_line>
                            if ( $global_input_line =~ /^[^ ]+ +([^ ]+)(( )|($))/ ) {  <new_line>
                                $global_second_word = $1 ;  <new_line>
                                if ( ( exists( $global_matching_text{ $global_second_word } ) ) && ( $global_matching_text{ $global_second_word } eq "match" ) ) {  <new_line>
                                    $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                                    $global_storage_number ++ ;  <new_line>
                                    if ( $global_list_of_storage_names eq "" ) {  <new_line>
                                        $global_list_of_storage_names = $global_storage_name . " " ;  <new_line>
                                    } else {  <new_line>
                                        $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                                    }  <new_line>
                                    $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                                }  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_storage_names =~ s/ +$// ;  <new_line>
                $global_dashrep_replacement{ $global_operand_three } = $global_list_of_storage_names ;  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; finished searching, previous message indicates any matches " . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-find-lines-in-file-that-begin-with-any-listed-word:
template-interpreter-function-begin

sub function__find_lines_in_file_that_begin_with_any_listed_word( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) {  <new_line>
        $global_list_of_storage_names = "" ;  <new_line>
        if ( ( $global_source_filename eq "" ) || ( $global_operand_two eq "" ) || ( $global_operand_three eq "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . " and " . $global_operand_three . "]" ;  <new_line>
        } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has empty search word in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( ( ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has no search words in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else {  <new_line>
            $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            if ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) {  <new_line>
                $global_string_to_find = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for string " . $global_string_to_find . "}}\n" ;  <new_line>
                }  <new_line>
                $global_length_of_string = length( $global_string_to_find ) ;  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_string ) ;  <new_line>
                    if ( $global_possible_match eq $global_string_to_find ) {  <new_line>
                        $global_dashrep_replacement{ $global_operand_three } = $global_input_line ;  <new_line>
                        if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                            $global_trace_log .= "{{trace; in file " . $global_source_filename . " found starting string " . $global_string_to_find . "}}\n" ;  <new_line>
                        }  <new_line>
                        last ;  <new_line>
                    }  <new_line>
                }  <new_line>
            } else {  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for words in phrase " . $global_operand_two . "}}\n" ;  <new_line>
                }  <new_line>
                $global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                $global_list_of_words_as_text =~ s/^ +// ;  <new_line>
                $global_list_of_words_as_text =~ s/ +$//s ;  <new_line>
                if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
                    @global_list_of_words = split( /[ \n\r]+/ , $global_list_of_words_as_text ) ;  <new_line>
                } else {  <new_line>
                    @global_list_of_words = ( ) ;  <new_line>
                    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
                }  <new_line>
                foreach $global_word ( @global_list_of_words ) {  <new_line>
                    $global_matching_text{ $global_word } = "match" ;  <new_line>
                }  <new_line>
                if ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) {  <new_line>
                    $global_words_to_match = 1 ;  <new_line>
                } else {  <new_line>
                    $global_words_to_match = 2 ;  <new_line>
                }  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_length_of_first_word = index( $global_input_line , " " ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_first_word ) ;  <new_line>
                    if ( ( exists( $global_matching_text{ $global_possible_match } ) ) && ( $global_matching_text{ $global_possible_match } eq "match" ) ) {  <new_line>
                        if ( $global_words_to_match == 1 ) {  <new_line>
                            $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                            $global_storage_number ++ ;  <new_line>
                            $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                            $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                        } else {  <new_line>
                            if ( $global_input_line =~ /^[^ ]+ +([^ ]+)(( )|($))/ ) {  <new_line>
                                $global_second_word = $1 ;  <new_line>
                                if ( ( exists( $global_matching_text{ $global_second_word } ) ) && ( $global_matching_text{ $global_second_word } eq "match" ) ) {  <new_line>
                                    $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                                    $global_storage_number ++ ;  <new_line>
                                    if ( $global_list_of_storage_names eq "" ) {  <new_line>
                                        $global_list_of_storage_names = $global_storage_name . " " ;  <new_line>
                                    } else {  <new_line>
                                        $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                                    }  <new_line>
                                    $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                                }  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_storage_names =~ s/ +$// ;  <new_line>
                $global_dashrep_replacement{ $global_operand_three } = $global_list_of_storage_names ;  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; finished searching, previous message indicates any matches " . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-find-lines-in-file-that-begin-with-any-two-words-listed:
template-interpreter-function-begin

sub function__find_lines_in_file_that_begin_with_any_two_words_listed( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) {  <new_line>
        $global_list_of_storage_names = "" ;  <new_line>
        if ( ( $global_source_filename eq "" ) || ( $global_operand_two eq "" ) || ( $global_operand_three eq "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . " and " . $global_operand_three . "]" ;  <new_line>
        } elsif ( ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has empty search word in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( ( ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) || ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here two hyphen-here words hyphen-here listed" ) ) && ( ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) || ( $global_dashrep_replacement{ $global_operand_two } !~ /[^ ]/ ) ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has no search words in phrase " . $global_operand_two . "]" ;  <new_line>
        } elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else {  <new_line>
            $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            if ( $global_action_name eq "find hyphen-here line hyphen-here in hyphen-here file hyphen-here that hyphen-here begins hyphen-here with hyphen-here text" ) {  <new_line>
                $global_string_to_find = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for string " . $global_string_to_find . "}}\n" ;  <new_line>
                }  <new_line>
                $global_length_of_string = length( $global_string_to_find ) ;  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_string ) ;  <new_line>
                    if ( $global_possible_match eq $global_string_to_find ) {  <new_line>
                        $global_dashrep_replacement{ $global_operand_three } = $global_input_line ;  <new_line>
                        if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                            $global_trace_log .= "{{trace; in file " . $global_source_filename . " found starting string " . $global_string_to_find . "}}\n" ;  <new_line>
                        }  <new_line>
                        last ;  <new_line>
                    }  <new_line>
                }  <new_line>
            } else {  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; searching in file " . $global_source_filename . " for words in phrase " . $global_operand_two . "}}\n" ;  <new_line>
                }  <new_line>
                $global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
                $global_list_of_words_as_text =~ s/^ +// ;  <new_line>
                $global_list_of_words_as_text =~ s/ +$//s ;  <new_line>
                if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
                    @global_list_of_words = split( /[ \n\r]+/ , $global_list_of_words_as_text ) ;  <new_line>
                } else {  <new_line>
                    @global_list_of_words = ( ) ;  <new_line>
                    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
                }  <new_line>
                foreach $global_word ( @global_list_of_words ) {  <new_line>
                    $global_matching_text{ $global_word } = "match" ;  <new_line>
                }  <new_line>
                if ( $global_action_name eq "find hyphen-here lines hyphen-here in hyphen-here file hyphen-here that hyphen-here begin hyphen-here with hyphen-here any hyphen-here listed hyphen-here word" ) {  <new_line>
                    $global_words_to_match = 1 ;  <new_line>
                } else {  <new_line>
                    $global_words_to_match = 2 ;  <new_line>
                }  <new_line>
                while ( $global_input_line = <INFILE> ) {  <new_line>
                    chomp( $global_input_line ) ;  <new_line>
                    $global_length_of_first_word = index( $global_input_line , " " ) ;  <new_line>
                    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_first_word ) ;  <new_line>
                    if ( ( exists( $global_matching_text{ $global_possible_match } ) ) && ( $global_matching_text{ $global_possible_match } eq "match" ) ) {  <new_line>
                        if ( $global_words_to_match == 1 ) {  <new_line>
                            $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                            $global_storage_number ++ ;  <new_line>
                            $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                            $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                        } else {  <new_line>
                            if ( $global_input_line =~ /^[^ ]+ +([^ ]+)(( )|($))/ ) {  <new_line>
                                $global_second_word = $1 ;  <new_line>
                                if ( ( exists( $global_matching_text{ $global_second_word } ) ) && ( $global_matching_text{ $global_second_word } eq "match" ) ) {  <new_line>
                                    $global_storage_name = "dashrep hyphen-here storage<character_hyphen>" . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                                    $global_storage_number ++ ;  <new_line>
                                    if ( $global_list_of_storage_names eq "" ) {  <new_line>
                                        $global_list_of_storage_names = $global_storage_name . " " ;  <new_line>
                                    } else {  <new_line>
                                        $global_list_of_storage_names .= $global_storage_name . " " ;  <new_line>
                                    }  <new_line>
                                    $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
                                }  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_storage_names =~ s/ +$// ;  <new_line>
                $global_dashrep_replacement{ $global_operand_three } = $global_list_of_storage_names ;  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; finished searching, previous message indicates any matches " . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-gather-from-tagged-file-one-entry:
template-interpreter-function-begin

sub function__gather_from_tagged_file_one_entry( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) || ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) ) {  <new_line>
        $global_accumulated_matching_entry_info = "" ;  <new_line>
        if ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else {  <new_line>
            $global_possible_error_message .= " [warning: file named " . $global_source_filename . " not found, or could not be opened" . "]\n" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            $global_entry_begin = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here begin" } ;  <new_line>
            if ( $global_entry_begin !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_begin = "entry_begin" ;  <new_line>
            }  <new_line>
            $global_entry_end = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here end" } ;  <new_line>
            if ( $global_entry_end !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_end = "entry_end" ;  <new_line>
            }  <new_line>
            $global_entry_unique = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here unique" } ;  <new_line>
            if ( $global_entry_unique !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_unique = "url" ;  <new_line>
            }  <new_line>
            $global_entry_delete = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here delete" } ;  <new_line>
            if ( $global_entry_delete !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_delete = "delete_id" ;  <new_line>
            }  <new_line>
            if ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) {  <new_line>
                $global_entry_matching_id = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here matching hyphen-here id" } ;  <new_line>
                if ( $global_entry_matching_id !~ /^[^ ]+$/ ) {  <new_line>
                    $global_entry_matching_id = "1" ;  <new_line>
                }  <new_line>
            } elsif ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) {  <new_line>
                $global_entry_matching_id = "" ;  <new_line>
            }  <new_line>
            $global_accumulated_matching_entry_info = "" ;  <new_line>
            $global_possible_matching_entry_info = "" ;  <new_line>
            $global_unique_value = "" ;  <new_line>
            $global_list_of_tag_values_in_sequence_encountered = "" ;  <new_line>
            %content_for_tag = ( ) ;  <new_line>
            %found_unique_value = ( ) ;  <new_line>
            %exists_tag_name = ( ) ;  <new_line>
            $global_line_status = "between" ;  <new_line>
            while ( $global_input_line = <INFILE> ) {  <new_line>
                chomp( $global_input_line ) ;  <new_line>
                $global_pointer = index( $global_input_line , "\r" ) ;  <new_line>
                if ( $global_pointer >= 0 ) {  <new_line>
                    $global_input_line =~ s/[\r\n]+//gs ;  <new_line>
                }  <new_line>
                if ( $global_entry_matching_id ne "" ) {  <new_line>
#                   This section of code applies to action: gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry  <new_line>
                    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        if ( $global_first_word eq $global_entry_begin ) {  <new_line>
                            $global_line_status = "within" ;  <new_line>
                            $global_possible_matching_entry_info = "" ;  <new_line>
                        } elsif ( $global_first_word eq $global_entry_end ) {  <new_line>
                            if ( $global_line_status eq "within hyphen-here matching" ) {  <new_line>
                                $global_accumulated_matching_entry_info .= $global_possible_matching_entry_info ;  <new_line>
                            }  <new_line>
                            $global_possible_matching_entry_info = "" ;  <new_line>
                            $global_line_status = "between" ;  <new_line>
                        } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                        }  <new_line>

                    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ \t\n\r]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        $global_second_word = $2 ;  <new_line>
                        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
                            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                                $global_line_status = "within hyphen-here matching" ;  <new_line>
                                $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                            } else {  <new_line>
                                $global_line_status = "within hyphen-here not hyphen-here matching" ;  <new_line>
                                $global_possible_matching_entry_info = "" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
                            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                                $global_accumulated_matching_entry_info = "" ;  <new_line>
                            } else {  <new_line>
                                $global_possible_matching_entry_info = "" ;  <new_line>
                                $global_line_status = "between" ;  <new_line>
                            }  <new_line>
                        } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                        }  <new_line>
                    } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                        $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                    }  <new_line>
                } else {  <new_line>
#                   This section of code applies to action: gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file  <new_line>
                    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        if ( $global_first_word eq "multi_line_end" ) {  <new_line>
                            $global_line_status = "within" ;  <new_line>
                        } elsif ( ( $global_first_word eq $global_entry_end ) || ( $global_first_word eq $global_entry_begin ) ) {  <new_line>
                            if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
                                foreach $global_tag_name ( keys( %content_for_tag ) ) {  <new_line>
                                    $global_dashrep_replacement{ $global_tag_name . "<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>" . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
                                }  <new_line>
                            } elsif ( ( $global_entry_matching_id eq "" ) && ( $global_first_word eq $global_entry_end ) ) {  <new_line>
                                $global_trace_log .= "{{trace; warning: action " . $global_action_name . " encountered a set of items that do not contain a unique value, so no definitions were created for this set of items" . "}}\n" ;  <new_line>
                            }  <new_line>
                            $global_unique_value = "" ;  <new_line>
                            %content_for_tag = ( ) ;  <new_line>
                            if ( $global_first_word eq $global_entry_begin ) {  <new_line>
                                $global_line_status = "within" ;  <new_line>
                            } else {  <new_line>
                                $global_line_status = "between" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_line_status eq "within_multiline" ) {  <new_line>
                            $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . " " ;  <new_line>
                        } else {  <new_line>
                            $global_content_for_tag{ $global_first_word } = "" ;  <new_line>
                        }  <new_line>
                    } elsif ( $global_line_status eq "within_multiline" ) {  <new_line>
                        $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . " " ;  <new_line>
                    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ ].*)$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        $global_remainder_of_line = $2 ;  <new_line>
                        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
                            $global_unique_value = $global_remainder_of_line ;  <new_line>
                            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
                            if ( not( exists( $global_found_unique_value{ $global_unique_value } ) ) ) {  <new_line>
                                $global_found_unique_value{ $global_unique_value } = "found" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
                            $global_unique_value = $global_remainder_of_line ;  <new_line>
                            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
                            $global_found_unique_value{ $global_unique_value } = "delete" ;  <new_line>
                        } elsif ( $global_remainder_of_line =~ /^ *multi_line_begin/ ) {  <new_line>
                            $global_line_status = "within_multiline" ;  <new_line>
                            $global_multiline_value_name = $global_first_word ;  <new_line>
                            $global_content_for_tag{ $global_multiline_value_name } = "" ;  <new_line>
                        } else {  <new_line>
                            $global_content_for_tag{ $global_first_word } = $global_remainder_of_line ;  <new_line>
                            if ( not( exists( $global_exists_tag_name{ $global_first_word } ) ) ) {  <new_line>
                                $global_exists_tag_name{ $global_first_word } = "yes" ;  <new_line>
                                if ( $global_list_of_tag_values_in_sequence_encountered eq "" ) {  <new_line>
                                    $global_list_of_tag_values_in_sequence_encountered = $global_entry_unique . " " ;  <new_line>
                                } else {  <new_line>
                                    $global_list_of_tag_values_in_sequence_encountered .= " " ;  <new_line>
                                }  <new_line>
                                $global_list_of_tag_values_in_sequence_encountered .= $global_first_word ;  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
            }  <new_line>
            if ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) {  <new_line>
                $global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_matching_entry_info ;  <new_line>
            } elsif ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) {  <new_line>
                if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
                    foreach $global_tag_name ( keys( %content_for_tag ) ) {  <new_line>
                        $global_dashrep_replacement{ $global_tag_name . "<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>" . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_unique_values = "" ;  <new_line>
                foreach $global_unique_value ( keys( %found_unique_value ) ) {  <new_line>
                    if ( $global_found_unique_value{ $global_unique_value } ne "delete" ) {  <new_line>
                        if ( $global_list_of_unique_values ne "" ) {  <new_line>
                            $global_list_of_unique_values .= " " ;  <new_line>
                        }  <new_line>
                        $global_list_of_unique_values .= $global_unique_value ;  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_dashrep_replacement{ $global_target_phrase_name } = $global_list_of_unique_values ;  <new_line>
                $global_list_of_tag_names = "" ;  <new_line>
                foreach $global_tag_name ( keys( %exists_tag_name ) ) {  <new_line>
                    if ( $global_list_of_tag_names ne "" ) {  <new_line>
                        $global_list_of_tag_names .= " " ;  <new_line>
                    }  <new_line>
                    $global_list_of_tag_names .= $global_tag_name ;  <new_line>
                }  <new_line>
                $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names" } = $global_list_of_tag_names ;  <new_line>
                $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence" } = $global_list_of_tag_values_in_sequence_encountered ;  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; did action " . $global_action_name ." with file " . $global_source_filename . " and target phrase " . $global_target_phrase_name . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-gather-tagged-info-from-file:
template-interpreter-function-begin

sub function__gather_tagged_info_from_file( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) || ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) ) {  <new_line>
        $global_accumulated_matching_entry_info = "" ;  <new_line>
        if ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message .= "" ;  <new_line>
        } else {  <new_line>
            $global_possible_error_message .= " [warning: file named " . $global_source_filename . " not found, or could not be opened" . "]\n" ;  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            $global_entry_begin = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here begin" } ;  <new_line>
            if ( $global_entry_begin !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_begin = "entry_begin" ;  <new_line>
            }  <new_line>
            $global_entry_end = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here end" } ;  <new_line>
            if ( $global_entry_end !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_end = "entry_end" ;  <new_line>
            }  <new_line>
            $global_entry_unique = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here unique" } ;  <new_line>
            if ( $global_entry_unique !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_unique = "url" ;  <new_line>
            }  <new_line>
            $global_entry_delete = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here delete" } ;  <new_line>
            if ( $global_entry_delete !~ /^[^ ]+$/ ) {  <new_line>
                $global_entry_delete = "delete_id" ;  <new_line>
            }  <new_line>
            if ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) {  <new_line>
                $global_entry_matching_id = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here matching hyphen-here id" } ;  <new_line>
                if ( $global_entry_matching_id !~ /^[^ ]+$/ ) {  <new_line>
                    $global_entry_matching_id = "1" ;  <new_line>
                }  <new_line>
            } elsif ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) {  <new_line>
                $global_entry_matching_id = "" ;  <new_line>
            }  <new_line>
            $global_accumulated_matching_entry_info = "" ;  <new_line>
            $global_possible_matching_entry_info = "" ;  <new_line>
            $global_unique_value = "" ;  <new_line>
            $global_list_of_tag_values_in_sequence_encountered = "" ;  <new_line>
            %content_for_tag = ( ) ;  <new_line>
            %found_unique_value = ( ) ;  <new_line>
            %exists_tag_name = ( ) ;  <new_line>
            $global_line_status = "between" ;  <new_line>
            while ( $global_input_line = <INFILE> ) {  <new_line>
                chomp( $global_input_line ) ;  <new_line>
                $global_pointer = index( $global_input_line , "\r" ) ;  <new_line>
                if ( $global_pointer >= 0 ) {  <new_line>
                    $global_input_line =~ s/[\r\n]+//gs ;  <new_line>
                }  <new_line>
                if ( $global_entry_matching_id ne "" ) {  <new_line>
#                   This section of code applies to action: gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry  <new_line>
                    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        if ( $global_first_word eq $global_entry_begin ) {  <new_line>
                            $global_line_status = "within" ;  <new_line>
                            $global_possible_matching_entry_info = "" ;  <new_line>
                        } elsif ( $global_first_word eq $global_entry_end ) {  <new_line>
                            if ( $global_line_status eq "within hyphen-here matching" ) {  <new_line>
                                $global_accumulated_matching_entry_info .= $global_possible_matching_entry_info ;  <new_line>
                            }  <new_line>
                            $global_possible_matching_entry_info = "" ;  <new_line>
                            $global_line_status = "between" ;  <new_line>
                        } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                        }  <new_line>

                    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ \t\n\r]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        $global_second_word = $2 ;  <new_line>
                        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
                            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                                $global_line_status = "within hyphen-here matching" ;  <new_line>
                                $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                            } else {  <new_line>
                                $global_line_status = "within hyphen-here not hyphen-here matching" ;  <new_line>
                                $global_possible_matching_entry_info = "" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
                            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                                $global_accumulated_matching_entry_info = "" ;  <new_line>
                            } else {  <new_line>
                                $global_possible_matching_entry_info = "" ;  <new_line>
                                $global_line_status = "between" ;  <new_line>
                            }  <new_line>
                        } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                        }  <new_line>
                    } elsif ( ( $global_line_status eq "within" ) || ( $global_line_status eq "within hyphen-here matching" ) ) {  <new_line>
                        $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
                    }  <new_line>
                } else {  <new_line>
#                   This section of code applies to action: gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file  <new_line>
                    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        if ( $global_first_word eq "multi_line_end" ) {  <new_line>
                            $global_line_status = "within" ;  <new_line>
                        } elsif ( ( $global_first_word eq $global_entry_end ) || ( $global_first_word eq $global_entry_begin ) ) {  <new_line>
                            if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
                                foreach $global_tag_name ( keys( %content_for_tag ) ) {  <new_line>
                                    $global_dashrep_replacement{ $global_tag_name . "<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>" . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
                                }  <new_line>
                            } elsif ( ( $global_entry_matching_id eq "" ) && ( $global_first_word eq $global_entry_end ) ) {  <new_line>
                                $global_trace_log .= "{{trace; warning: action " . $global_action_name . " encountered a set of items that do not contain a unique value, so no definitions were created for this set of items" . "}}\n" ;  <new_line>
                            }  <new_line>
                            $global_unique_value = "" ;  <new_line>
                            %content_for_tag = ( ) ;  <new_line>
                            if ( $global_first_word eq $global_entry_begin ) {  <new_line>
                                $global_line_status = "within" ;  <new_line>
                            } else {  <new_line>
                                $global_line_status = "between" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_line_status eq "within_multiline" ) {  <new_line>
                            $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . " " ;  <new_line>
                        } else {  <new_line>
                            $global_content_for_tag{ $global_first_word } = "" ;  <new_line>
                        }  <new_line>
                    } elsif ( $global_line_status eq "within_multiline" ) {  <new_line>
                        $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . " " ;  <new_line>
                    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ ].*)$/ ) {  <new_line>
                        $global_first_word = $1 ;  <new_line>
                        $global_remainder_of_line = $2 ;  <new_line>
                        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
                            $global_unique_value = $global_remainder_of_line ;  <new_line>
                            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
                            if ( not( exists( $global_found_unique_value{ $global_unique_value } ) ) ) {  <new_line>
                                $global_found_unique_value{ $global_unique_value } = "found" ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
                            $global_unique_value = $global_remainder_of_line ;  <new_line>
                            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
                            $global_found_unique_value{ $global_unique_value } = "delete" ;  <new_line>
                        } elsif ( $global_remainder_of_line =~ /^ *multi_line_begin/ ) {  <new_line>
                            $global_line_status = "within_multiline" ;  <new_line>
                            $global_multiline_value_name = $global_first_word ;  <new_line>
                            $global_content_for_tag{ $global_multiline_value_name } = "" ;  <new_line>
                        } else {  <new_line>
                            $global_content_for_tag{ $global_first_word } = $global_remainder_of_line ;  <new_line>
                            if ( not( exists( $global_exists_tag_name{ $global_first_word } ) ) ) {  <new_line>
                                $global_exists_tag_name{ $global_first_word } = "yes" ;  <new_line>
                                if ( $global_list_of_tag_values_in_sequence_encountered eq "" ) {  <new_line>
                                    $global_list_of_tag_values_in_sequence_encountered = $global_entry_unique . " " ;  <new_line>
                                } else {  <new_line>
                                    $global_list_of_tag_values_in_sequence_encountered .= " " ;  <new_line>
                                }  <new_line>
                                $global_list_of_tag_values_in_sequence_encountered .= $global_first_word ;  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
            }  <new_line>
            if ( $global_action_name eq "gather hyphen-here from hyphen-here tagged hyphen-here file hyphen-here one hyphen-here entry" ) {  <new_line>
                $global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_matching_entry_info ;  <new_line>
            } elsif ( $global_action_name eq "gather hyphen-here tagged hyphen-here info hyphen-here from hyphen-here file" ) {  <new_line>
                if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
                    foreach $global_tag_name ( keys( %content_for_tag ) ) {  <new_line>
                        $global_dashrep_replacement{ $global_tag_name . "<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>" . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_unique_values = "" ;  <new_line>
                foreach $global_unique_value ( keys( %found_unique_value ) ) {  <new_line>
                    if ( $global_found_unique_value{ $global_unique_value } ne "delete" ) {  <new_line>
                        if ( $global_list_of_unique_values ne "" ) {  <new_line>
                            $global_list_of_unique_values .= " " ;  <new_line>
                        }  <new_line>
                        $global_list_of_unique_values .= $global_unique_value ;  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_dashrep_replacement{ $global_target_phrase_name } = $global_list_of_unique_values ;  <new_line>
                $global_list_of_tag_names = "" ;  <new_line>
                foreach $global_tag_name ( keys( %exists_tag_name ) ) {  <new_line>
                    if ( $global_list_of_tag_names ne "" ) {  <new_line>
                        $global_list_of_tag_names .= " " ;  <new_line>
                    }  <new_line>
                    $global_list_of_tag_names .= $global_tag_name ;  <new_line>
                }  <new_line>
                $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names" } = $global_list_of_tag_names ;  <new_line>
                $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence" } = $global_list_of_tag_values_in_sequence_encountered ;  <new_line>
            }  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; did action " . $global_action_name ." with file " . $global_source_filename . " and target phrase " . $global_target_phrase_name . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-generate-counts-from-integer-to-integer:
# no-space dashes-long-line  <new_line>
# function__generate_counts_from_integer_to_integer  <new_line>
#  <new_line>

*---
#  Input is $global_action_operand_one and $global_action_operand_two and $global_action_operand_three  <new_line>
#  Output is the definition of the phrase specified by $global_action_operand_three  <new_line>
<new_line>
---*

sub function__generate_counts_from_integer_to_integer( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_numeric_value_first = &function_parameterized__convert_numeric_text_into_numeric_value( $global_action_operand_one ) ;  <new_line>
$global_numeric_value_second = &function_parameterized__convert_numeric_text_into_numeric_value( $global_action_operand_two ) ;  <new_line>

if ( $global_numeric_value_first > $global_numeric_value_second ) {  <new_line>
$global_plus_or_minus_one = -1 ;  <new_line>
$global_count_range = $global_numeric_value_first - $global_numeric_value_second + 1 ;  <new_line>
} else {  <new_line>
$global_plus_or_minus_one = 1 ;  <new_line>
$global_count_range = $global_numeric_value_second - $global_numeric_value_first + 1 ;  <new_line>
}  <new_line>

if ( $global_count_range > 500000 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_action_operand_three code-get-or-put-phrase-definition-end = 'dashrep_undefined_from_action_generate_counts_from_integer_to_integer_error_count_range_too_large' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_action_operand_three code-get-or-put-phrase-definition-end = '' ;  <new_line>

for ( $global_counter = 1 ; $global_counter <= $global_count_range ; $global_counter ++ ) {  <new_line>
$global_count_number = $global_numeric_value_first + ( $global_plus_or_minus_one * ( $global_counter - 1 ) );  <new_line>

if ( $global_counter > 1 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_action_operand_three code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
}  <new_line>

if ( $global_count_number == 0 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_action_operand_three code-get-or-put-phrase-definition-end .= '0' ;  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_action_operand_three code-get-or-put-phrase-definition-end .= sprintf( "%d" , $global_count_number ) ;  <new_line>
}  <new_line>

# end of loop  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-generate-every-ordered-pairwise-combination-of-words:
template-interpreter-function-begin

sub function__generate_every_ordered_pairwise_combination_of_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = '' ;  <new_line>
$global_separator = '' ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_count_list = $#global_input_list + 1 ;  <new_line>
if ( $global_count_list > 0 ) {  <new_line>
    for ( $global_counter_one = 1 ; $global_counter_one <= $global_count_list ; $global_counter_one ++ ) {  <new_line>
        for ( $global_counter_two = $global_counter_one + 1 ; $global_counter_two <= $global_count_list ; $global_counter_two ++ ) {  <new_line>
            $global_dashrep_replacement{ $global_operand_two } .= $global_separator . $global_input_list[ $global_counter_one - 1 ] ;  <new_line>
            $global_dashrep_replacement{ $global_operand_three } .= $global_separator . $global_input_list[ $global_counter_two - 1 ] ;  <new_line>
            $global_separator = ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-generate-every-pairwise-combination-of-words:
template-interpreter-function-begin

sub function__generate_every_pairwise_combination_of_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_input_list_one_phrase_name = $global_operand_one ;  <new_line>
$global_input_list_two_phrase_name = $global_operand_two ;  <new_line>
$global_output_list_one_phrase_name = $global_operand_three ;  <new_line>
$global_output_list_two_phrase_name = $global_operand_four ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_input_list_one_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list_one = split( / +/ , $global_temp_text ) ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_input_list_two_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list_two = split( / +/ , $global_temp_text ) ;  <new_line>
$global_count_list_one = $#global_input_list_one + 1 ;  <new_line>
$global_count_list_two = $#global_input_list_two + 1 ;  <new_line>
$global_dashrep_replacement{ $global_output_list_one_phrase_name } = "" ;  <new_line>
$global_dashrep_replacement{ $global_output_list_two_phrase_name } = "" ;  <new_line>
if ( ( $global_count_list_one < 1 ) || ( $global_count_list_two < 1 ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_separator_one = " " ;  <new_line>
$global_separator_two = " " ;  <new_line>
$global_ending_first_count = $global_count_list_one ;  <new_line>
$global_starting_second_count = 1 ;  <new_line>
for ( $global_counter_one = 1 ; $global_counter_one <= $global_ending_first_count ; $global_counter_one ++ ) {  <new_line>
    $global_value_one = $global_input_list_one[ $global_counter_one <character_hyphen> 1 ] ;  <new_line>
    if ( $global_ending_first_count != $global_count_list_one ) {  <new_line>
        $global_starting_second_count = $global_counter_one + 1 ;  <new_line>
    }  <new_line>
    for ( $global_counter_two = $global_starting_second_count ; $global_counter_two <= $global_count_list_two ; $global_counter_two ++ ) {  <new_line>
        $global_value_two = $global_input_list_two[ $global_counter_two <character_hyphen> 1 ] ;  <new_line>
        if ( ( $global_counter_one == $global_ending_first_count ) && ( $global_counter_two == $global_count_list_two ) ) {  <new_line>
            $global_separator_one = "" ;  <new_line>
            $global_separator_two = "" ;  <new_line>
        }  <new_line>
        $global_dashrep_replacement{ $global_output_list_one_phrase_name } .= $global_value_one . $global_separator_one ;  <new_line>
        $global_dashrep_replacement{ $global_output_list_two_phrase_name } .= $global_value_two . $global_separator_two ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-generate-list-of-all-dashrep-phrases:
template-interpreter-function-begin

sub function__generate_list_of_all_dashrep_phrases( ) {  <new_line>

$global_action_result = '' ;  <new_line>
delete( $global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>phrases<character_hyphen>newly<character_hyphen>defined' } ) ;  <new_line>
@global_list_of_phrases = keys( %global_dashrep_replacement ) ;  <new_line>
@global_sequence_of_phrases = sort( @global_list_of_phrases ) ;  <new_line>
$global_counter = 0 ;  <new_line>
$global_dashrep_replacement{ $global_operand_one } = '' ;  <new_line>
if ( $global_dashrep_replacement{ 'yes<character_hyphen>or<character_hyphen>no<character_hyphen>export<character_hyphen>delimited<character_hyphen>definitions' } eq 'yes' ) {  <new_line>
    foreach $global_phrase_name ( @global_sequence_of_phrases ) {  <new_line>
        if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /^[^ ]+$/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne 'four<character_hyphen>hyphens' ) ) {  <new_line>
            if ( $global_dashrep_replacement{ $global_operand_one } ne '' ) {  <new_line>
                $global_dashrep_replacement{ $global_operand_one } .= ' ' ;  <new_line>
            }  <new_line>
            $global_dashrep_replacement{ $global_operand_one } .= $global_phrase_name ;  <new_line>
            $global_counter ++ ;  <new_line>
        }  <new_line>
    }  <new_line>
} else {  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = '' ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-generate-list-of-files-in-current-read-directory:
template-interpreter-function-begin

sub function__generate_list_of_files_in_current_read_directory( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here files hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) || ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here folders hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) ) {  <new_line>
        if ( ( $global_operand_one eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
        } elsif ( exists( $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading" } ) ) {  <new_line>
            $global_directory = $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading" } ;  <new_line>
            if ( ( $global_directory eq "" ) || ( $global_directory !~ /[\\\/]$/ ) ) {  <new_line>
                $global_directory = './' ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; warning, directory " . $global_directory . " is invalid so using local directory}}\n" ;  <new_line>
                }  <new_line>
            }  <new_line>
            if ( opendir( READDIR , $global_directory ) ) {  <new_line>
                while ( defined( $global_file_name = readdir( READDIR ) ) ) {  <new_line>
                    if ( $global_file_name !~ /^\./ ) {  <new_line>
                        $global_full_path = $global_directory . $global_file_name ;  <new_line>
                        if ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here folders hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) {  <new_line>
                            if ( <character_hyphen>d $global_full_path ) {  <new_line>
                                $global_list_of_file_names .= $global_file_name . " " ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here files hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) {  <new_line>
                            if ( <character_hyphen>f $global_full_path ) {  <new_line>
                                $global_list_of_file_names .= $global_file_name . " " ;  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_file_names =~ s / +$// ;  <new_line>
                $global_dashrep_replacement{ $global_operands_all } = $global_list_of_file_names ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; listed files or folders in directory " . $global_directory . "}}\n" ;  <new_line>
                }  <new_line>
                closedir( READDIR ) ;  <new_line>
            } else {  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; warning, cannot list files in directory " . $global_directory . "}}\n" ;  <new_line>
                }  <new_line>
            }  <new_line>
        }  <new_line>

template-interpreter-function-end
----
template-function-generate-list-of-folders-in-current-read-directory:
template-interpreter-function-begin

sub function__generate_list_of_folders_in_current_read_directory( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here files hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) || ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here folders hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) ) {  <new_line>
        if ( ( $global_operand_one eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
        } elsif ( exists( $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading" } ) ) {  <new_line>
            $global_directory = $global_dashrep_replacement{ "dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading" } ;  <new_line>
            if ( ( $global_directory eq "" ) || ( $global_directory !~ /[\\\/]$/ ) ) {  <new_line>
                $global_directory = './' ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; warning, directory " . $global_directory . " is invalid so using local directory}}\n" ;  <new_line>
                }  <new_line>
            }  <new_line>
            if ( opendir( READDIR , $global_directory ) ) {  <new_line>
                while ( defined( $global_file_name = readdir( READDIR ) ) ) {  <new_line>
                    if ( $global_file_name !~ /^\./ ) {  <new_line>
                        $global_full_path = $global_directory . $global_file_name ;  <new_line>
                        if ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here folders hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) {  <new_line>
                            if ( <character_hyphen>d $global_full_path ) {  <new_line>
                                $global_list_of_file_names .= $global_file_name . " " ;  <new_line>
                            }  <new_line>
                        } elsif ( $global_action_name eq "generate hyphen-here list hyphen-here of hyphen-here files hyphen-here in hyphen-here current hyphen-here read hyphen-here directory" ) {  <new_line>
                            if ( <character_hyphen>f $global_full_path ) {  <new_line>
                                $global_list_of_file_names .= $global_file_name . " " ;  <new_line>
                            }  <new_line>
                        }  <new_line>
                    }  <new_line>
                }  <new_line>
                $global_list_of_file_names =~ s / +$// ;  <new_line>
                $global_dashrep_replacement{ $global_operands_all } = $global_list_of_file_names ;  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; listed files or folders in directory " . $global_directory . "}}\n" ;  <new_line>
                }  <new_line>
                closedir( READDIR ) ;  <new_line>
            } else {  <new_line>
                if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                    $global_trace_log .= "{{trace; warning, cannot list files in directory " . $global_directory . "}}\n" ;  <new_line>
                }  <new_line>
            }  <new_line>
        }  <new_line>

template-interpreter-function-end
----
template-function-generate-phrase-usage-counts:
template-interpreter-function-begin

sub function__generate_phrase_usage_counts( ) {  <new_line>

$global_result_text = '' ;  <new_line>


# todo: use $global_phrase_usage_count_for_phrase_number[ phrase-number-for-usage-counting ] ++  <new_line>
# reason: much faster execution!!! (current use of associative array slows down code)  <new_line>
# use $global_phrase_name_for_phrase_number[ phrase-number-for-usage-counting ] to get phrase names  <new_line>
# do sorting subroutine with 0000000175_phrase_name where 175 is usage count  <new_line>
# edits involve code-compiled-funtion-part-3  <new_line>


foreach $global_phrase_name ( keys( %global_replacement_count_for_item_name ) ) {  <new_line>
    $global_replacement_count = $global_replacement_count_for_item_name{ $global_phrase_name } ;  <new_line>


# edited 2017may25  <new_line>
    if ( ( exists( $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } ) ) && ( $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } ne '' ) ) {  <new_line>


    {  <new_line>
        $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } .= "\n" ;  <new_line>
    }  <new_line>
    $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } .= $global_phrase_name ;  <new_line>
}  <new_line>
foreach $global_replacement_count_text ( reverse( sort( keys( %global_endless_loop_replacements_with_count ) ) ) ) {  <new_line>
    @global_list_of_phrase_names = sort( split( /\n/ , $global_endless_loop_replacements_with_count{ $global_replacement_count_text } ) ) ;  <new_line>
    foreach $global_phrase_name ( @global_list_of_phrase_names ) {  <new_line>
        $global_result_text .= $global_replacement_count_text . ' ' . $global_phrase_name  . "\n" ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_one } = $global_result_text ;  <new_line>

template-interpreter-function-end
----
template-function-generate-positions-of-delimiter:
template-interpreter-function-begin

sub function__generate_positions_of_delimiter( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_search_starting_position = 0 ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( $global_phrase_length > 0 ) {  <new_line>
    $global_local_endless_loop_counter = 0 ;  <new_line>
    $global_local_endless_loop_counter_maximum = 10000 ;  <new_line>
    $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
    while ( ( $global_position > -1 ) && ( $global_local_endless_loop_counter <= $global_local_endless_loop_counter_maximum ) ) {  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= sprintf( "%d" , ( $global_position + 1 ) ) ;  <new_line>
        $global_search_starting_position = $global_position + 1 ;  <new_line>
        $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
        $global_local_endless_loop_counter ++ ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_operand_three } = $global_list_of_positions ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-generate-positions-of-first-matching-delimiter-after-listed-positions:
template-interpreter-function-begin

sub function__generate_positions_of_first_matching_delimiter_after_listed_positions( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( ( $global_phrase_length > 0 ) && ( exists( $global_dashrep_replacement{ $global_operand_three } ) ) ) {  <new_line>
    $global_text_list_of_start_matching_positions = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/\n/ /sg ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/^ +// ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/ +$// ;  <new_line>
    if ( $global_text_list_of_start_matching_positions =~ /[0<character_hyphen>9 ]+/ ) {  <new_line>
        @global_list_of_start_matching_positions = split( / +/ , $global_text_list_of_start_matching_positions ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_start_matching_positions = ( ) ;  <new_line>
    }  <new_line>
    foreach $global_search_starting_position ( @global_list_of_start_matching_positions ) {  <new_line>
        $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
        if ( $global_position < 0 ) {  <new_line>
            $global_position = -1 ;  <new_line>
        }  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= sprintf( "%d" , ( $global_position + 1 ) ) ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_four } = $global_list_of_positions ;  <new_line>

template-interpreter-function-end
----
template-function-generate-positions-of-listed-words:
template-interpreter-function-begin

sub function__generate_positions_of_listed_words( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_words_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_words_to_find =~ s/\n/ /sg ;  <new_line>
$global_words_to_find =~ s/^ +// ;  <new_line>
$global_words_to_find =~ s/ +$// ;  <new_line>
if ( $global_words_to_find =~ / / ) {  <new_line>
    @global_list_of_text_items_to_find = split( / +/ , $global_words_to_find ) ;  <new_line>
    $global_number_of_items_to_find = $#global_list_of_text_items_to_find + 1 ;  <new_line>
} elsif ( $global_words_to_find =~ /^[^ ]+$/ ) {  <new_line>
    @global_list_of_text_items_to_find = ( ) ;  <new_line>
    $global_list_of_text_items_to_find[ 0 ] = $global_words_to_find ;  <new_line>
    $global_number_of_items_to_find = 1 ;  <new_line>
} else {  <new_line>
    @global_list_of_text_items_to_find = ( ) ;  <new_line>
    $global_number_of_items_to_find = 0 ;  <new_line>
}  <new_line>
%global_text_to_find_at_position = ( ) ;  <new_line>
if ( $global_number_of_items_to_find > 0 ) {  <new_line>
    for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items_to_find ; $global_item_number ++ ) {  <new_line>
        $global_text_to_find = $global_list_of_text_items_to_find[ $global_item_number - 1 ] ;  <new_line>
        $global_search_starting_position = 0 ;  <new_line>
        $global_local_endless_loop_counter = 0 ;  <new_line>
        $global_local_endless_loop_counter_maximum = 10000 ;  <new_line>
        $global_position_of_text_found = index( $global_string_to_search , $global_text_to_find , $global_search_starting_position ) ;  <new_line>
        while ( ( $global_position_of_text_found > -1 ) && ( $global_local_endless_loop_counter <= $global_local_endless_loop_counter_maximum ) ) {  <new_line>
            $global_position_as_string = sprintf( "%05d" , $global_position_of_text_found ) ;  <new_line>
            if ( exists( $global_text_to_find_at_position{ $global_position_as_string } ) ) {  <new_line>
                if ( length( $global_text_to_find ) > length( $global_text_to_find_at_position{ $global_position_as_string } ) ) {  <new_line>
                    $global_text_to_find_at_position{ $global_position_as_string } = $global_text_to_find ;  <new_line>
                    $global_item_number_found_at_position{ $global_position_as_string } = $global_item_number ;  <new_line>
                }  <new_line>
            } else {  <new_line>
                $global_text_to_find_at_position{ $global_position_as_string } = $global_text_to_find ;  <new_line>
                $global_item_number_found_at_position{ $global_position_as_string } = $global_item_number ;  <new_line>
            }  <new_line>
            $global_search_starting_position = $global_position_of_text_found + 1 ;  <new_line>
            $global_position_of_text_found = index( $global_string_to_search , $global_text_to_find , $global_search_starting_position ) ;  <new_line>
            $global_local_endless_loop_counter ++ ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_position_end = -1 ;  <new_line>
foreach $global_position_of_text_found ( sort( keys( %global_text_to_find_at_position ) ) ) {  <new_line>
    if ( ( $global_position_of_text_found + 1 ) >= $global_position_end ) {  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= $global_position_of_text_found + 1 ;  <new_line>
        $global_position_end = ( $global_position_of_text_found + length( $global_list_of_text_items_to_find[ $global_item_number_found_at_position{ $global_position_of_text_found } - 1 ] ) ) ;  <new_line>
        $global_list_of_positions .= ' ' . $global_position_end  ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_list_of_positions ;  <new_line>

template-interpreter-function-end
----
template-function-get-cgi-information:
# no-space dashes-long-line  <new_line>
# function__get_cgi_information  <new_line>
#  <new_line>

*---
#  Input is standard input or standard environmental values  <new_line>
#  Output are phrases that have names that begin with the text "input-" and otherwise are named using the cgi name  <new_line>
<new_line>
---*

sub function__get_cgi_information( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_raw_input = '' ;  <new_line>
$global_line_count = 0 ;  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } = '' ;  <new_line>

if ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'GET' ) ) {  <new_line>

if ( ( exists( $ENV{ 'CONTENT_LENGTH' } ) ) && ( $ENV{ 'CONTENT_LENGTH' } > $global_cgi_string_length_limit ) ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'QUERY_STRING' } ) ) {  <new_line>
$global_raw_input = $ENV{ 'QUERY_STRING' } ;  <new_line>
}  <new_line>

} elsif ( ( exists( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) && ( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } =~ /^[^ ]+\.[^ ]+$/ ) && ( open( INFILE , $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) ) {  <new_line>

while( $global_input_line = <INFILE> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

# end of while loop  <new_line>
}  <new_line>

close( INFILE ) ;  <new_line>

} elsif ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'POST' ) ) {  <new_line>

while( $global_input_line = <STDIN> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

if ( $global_line_count > $global_cgi_line_length_limit ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

# end of while loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_dashrep_replacement{ 'input-raw-cgi-string' } = $global_raw_input ;  <new_line>

if ( $global_raw_input =~ /^(([^ <>]+)=([^ <>]*)(&([^ <>]+)=([^ <>]*))*) *$/ ) {  <new_line>
$global_raw_input = $1 ;  <new_line>
$global_raw_input =~ tr/+/ / ;  <new_line>
@global_name_value_pairs = split( /&/, $global_raw_input ) ;  <new_line>

foreach $global_name_value ( @global_name_value_pairs ) {  <new_line>
( $global_name, $global_value ) = split( /=/, $global_name_value, 2 ) ;  <new_line>

if ( not( defined( $global_value ) ) ) {  <new_line>
$global_value = '' ;  <new_line>
}  <new_line>

$global_name  =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_name  =~ s/[<>\/\\]+/_/g ;  <new_line>

if ( $global_name eq 'texttoimport' ) {  <new_line>
#               Special preservation of tabs, line breaks, etc. for imported text:  <new_line>
$global_value =~ s/%0D//ig ;  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
} else {  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_value =~ s/[<>]+/_/gm ;  <new_line>
$global_value =~ s/\n/<eol\/>/gm ;  <new_line>
}  <new_line>

$global_name = &function_parameterized__remove_leading_trailing_spaces( $global_name ) ;  <new_line>
$global_value = &function_parameterized__remove_leading_trailing_spaces( $global_value ) ;  <new_line>

if ( $global_name ne '' ) {  <new_line>
#  Prepend "input-" to the phrase name  <new_line>
$global_dashrep_replacement{ 'input-' . $global_name } = $global_value ;  <new_line>

if ( $dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } ne '' ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= ' ' ;  <new_line>
}  <new_line>

$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= 'input-' . $global_name ;  <new_line>
}  <new_line>

# end of foreach loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_raw_input = '' ;  <new_line>

if ( exists( $ENV{ 'REMOTE_ADDR' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-ip-address' } = $ENV{ 'REMOTE_ADDR' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'REMOTE_PORT' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-port-number' } = $ENV{ 'REMOTE_PORT' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'HTTP_COOKIE' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-cookie-contents' } = $ENV{ 'HTTP_COOKIE' } ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-characters-from-position-to-position:
template-interpreter-function-begin

sub function__get_characters_from_position_to_position( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_string_in_phrase = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_phrase_length = length( $global_string_in_phrase ) ;  <new_line>
    $global_starting_character_position = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
    if ( $global_starting_character_position > $global_phrase_length ) {  <new_line>
        $global_starting_character_position = $global_phrase_length ;  <new_line>
    } elsif ( $global_starting_character_position < 0 ) {  <new_line>
        $global_starting_character_position = $global_phrase_length - $global_starting_character_position + 1 ;  <new_line>
    }  <new_line>
    $global_ending_character_position = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
    if ( ( $global_ending_character_position > $global_phrase_length ) || ( $global_ending_character_position == 0 ) ) {  <new_line>
        $global_ending_character_position = $global_phrase_length ;  <new_line>
    } elsif ( $global_ending_character_position < 0 ) {  <new_line>
        $global_ending_character_position = $global_phrase_length - $global_ending_character_position + 1 ;  <new_line>
    }  <new_line>
    $global_number_of_characters_to_get = $global_ending_character_position - $global_starting_character_position + 1 ;  <new_line>
    if ( $global_number_of_characters_to_get < 1 ) {  <new_line>
        $global_number_of_characters_to_get = 1 ;  <new_line>
    }  <new_line>
    $global_action_result = substr( $global_string_in_phrase , ( $global_starting_character_position - 1 ) , $global_number_of_characters_to_get ) ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-get-count-of-characters:
template-interpreter-function-begin

sub function__get_count_of_characters( ) {  <new_line>

$global_action_result = '0' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_action_result = length( $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
    if ( $global_action_result < 1 ) {  <new_line>
        $global_action_result = '0' ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-get-count-of-words:
# no-space dashes-long-line  <new_line>
# function__get_count_of_words  <new_line>
#  <new_line>

*---
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>
---*

sub function__get_count_of_words( ) {  <new_line>
&function__point_to_words( ) ;  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_number_of_words . '' ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-definitions-from-file:
template-interpreter-function-begin

sub function__get_definitions_from_file( ) {  <new_line>

template-interpreter-function-middle

    } elsif ( $global_action_name eq "get hyphen-here definitions hyphen-here from hyphen-here file" ) {  <new_line>
        if ( ( $global_source_filename eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
            $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
        } elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
            $global_possible_error_message = "" ;  <new_line>
        } else {  <new_line>
            if ( <character_hyphen>e $global_source_filename ) {  <new_line>
                $global_possible_error_message .= " [warning, file named " . $global_source_filename . " found, but could not be opened]" ;  <new_line>
            } else {  <new_line>
                $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found]" ;  <new_line>
            }  <new_line>
        }  <new_line>
        if ( $global_possible_error_message eq "" ) {  <new_line>
            $global_source_definitions = "" ;  <new_line>
            while ( $global_input_line = <INFILE> ) {  <new_line>
                chomp( $global_input_line ) ;  <new_line>
                $global_input_line =~ s/[\n\r\f\t]+/ /g ;  <new_line>
                if ( ( defined( $global_input_line ) ) && ( $global_input_line =~ /[^ ]/ ) ) {  <new_line>
                    $global_source_definitions .= $global_input_line . " " ;  <new_line>
                }  <new_line>
            }  <new_line>
            $global_numeric_return_value = &dashrep_import_replacements( $global_source_definitions ) ;  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; imported " . $global_numeric_return_value . " definitions from file: " . $global_source_filename . "}}\n" ;  <new_line>
            }  <new_line>
        } else {  <new_line>
            if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
                $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-get-position-of-matching-text:
template-interpreter-function-begin

sub function__get_position_of_matching_text( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_search_starting_position = 0 ;  <new_line>
$global_action_result = '0' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( $global_phrase_length > 0 ) {  <new_line>
    $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) + 1 ;  <new_line>
    if ( $global_position > 0 ) {  <new_line>
        $global_action_result = sprintf( "%d" , $global_position ) ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-get-position-of-word:
template-interpreter-function-begin

sub function__get_position_of_word( ) {  <new_line>

$global_action_result = ' ' ;  <new_line>
$global_word_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_list_length = $#global_list + 1 ;  <new_line>
$global_action_result = '0' ;  <new_line>
if ( $global_list_length >= 1 ) {  <new_line>
    $global_last_pointer = 0 ;  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_list_length ; $global_pointer ++ ) {  <new_line>
        if ( $global_list[ $global_pointer - 1 ] eq $global_word_to_find ) {  <new_line>
            $global_action_result = sprintf( "%d" , $global_pointer ) ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-get-word-at-position:
# no-space dashes-long-line  <new_line>
# function__get_word_at_position  <new_line>
#  <new_line>

*---
#  Input is $global_source_text (type text) and $global_word_pointer_text (type text, not numeric!) {  <new_line>
#  Output is $global_target_text  <new_line>
#  And $global_word_pointer_text is modified if it exceeds the word count  <new_line>
<new_line>
---*

sub function__get_word_at_position( ) {  <new_line>
$global_default_text = '' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_word_pointer_numeric = &function_parameterized__convert_numeric_text_into_numeric_value( $global_word_pointer_text ) ;  <new_line>

if ( $global_number_of_words < $global_word_pointer_numeric ) {  <new_line>
$global_word_pointer_numeric = $global_number_of_words ;  <new_line>
$global_word_pointer_text = &function_parameterized__convert_numeric_value_into_numeric_text( $global_number_of_words ) ;  <new_line>
}  <new_line>

$global_target_text = runtime-code-word-within-source-text ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-insert-codeview-tags:
template-interpreter-function-begin

sub function__insert_codeview_tags( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( not( exists( $global_action_name_exists{ 'no<character_hyphen>space' } ) ) || ( $global_action_name_exists{ 'no<character_hyphen>space' } ne 'yes' ) ) {  <new_line>
    @global_list_of_action_names = split( / / , $global_dashrep_text_list_of_phrase_names ) ;  <new_line>
    foreach $global_action_name ( @global_list_of_action_names ) {  <new_line>
        $global_action_name_exists{ $global_action_name } = 'yes' ;  <new_line>
    }  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_string_in_phrase = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_string_in_phrase =~ s/\n/<dashrep_codeview_newline>/sg ;  <new_line>
    $global_string_in_phrase =~ s/=/<dashrep_codeview_equal_sign>/sg ;  <new_line>
    $global_parameter_level = 1 ;  <new_line>
    $global_odd_or_even_based_on_zero_or_one[ 0 ] = 'even' ;  <new_line>
    $global_odd_or_even_based_on_zero_or_one[ 1 ] = 'odd' ;  <new_line>
    $global_accumulated_text = '' ;  <new_line>
    $global_remaining_text = $global_string_in_phrase ;  <new_line>
    while ( $global_remaining_text =~ /^(.*?)((\[<character_hyphen>)|(<character_hyphen>\]))(.*)$/ ) {  <new_line>
        $global_prefix_text = $1 ;  <new_line>
        $global_parameter_begin_or_end_string = $2 ;  <new_line>
        $global_remaining_text = $5 ;  <new_line>
        $global_accumulated_text = $global_accumulated_text . $global_prefix_text ;  <new_line>
        if ( $global_parameter_begin_or_end_string eq '[<character_hyphen>' ) {  <new_line>
            if ( $global_parameter_level >= 1 ) {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_' . $global_odd_or_even_based_on_zero_or_one[ $global_parameter_level % 2 ] . '_begin>' ;  <new_line>
            } else {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_unmatched_begin>' ;  <new_line>
            }  <new_line>
            $global_parameter_level ++ ;  <new_line>
        } elsif ( $global_parameter_begin_or_end_string eq '<character_hyphen>]' ) {  <new_line>
            $global_parameter_level <character_hyphen><character_hyphen> ;  <new_line>
            if ( $global_parameter_level >= 1 ) {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_' . $global_odd_or_even_based_on_zero_or_one[ $global_parameter_level % 2 ] . '_end>' ;  <new_line>
            } else {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_unmatched_end>' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_string_in_phrase = $global_accumulated_text . $global_remaining_text ;  <new_line>
    $global_accumulated_text = '' ;  <new_line>
    $global_remaining_text = $global_string_in_phrase ;  <new_line>
    while ( $global_remaining_text =~ /^(.*?)([^ <>]+<character_hyphen>[^ <>]+)(([ <]).*)$/ ) {  <new_line>
        $global_prefix_text = $1 ;  <new_line>
        $global_phrase_name = $2 ;  <new_line>
        $global_remaining_text = $3 ;  <new_line>
        if ( exists( $global_action_name_exists{ $global_phrase_name } ) && ( $global_action_name_exists{ $global_phrase_name } eq 'yes' ) ) {  <new_line>
            $global_phrase_type = 'action' ;  <new_line>
        } elsif ( exists( $global_dashrep_replacement{ $global_phrase_name } ) && ( $global_dashrep_replacement{ $global_phrase_name } ne '' ) ) {  <new_line>
            $global_phrase_type = 'phrase_defined' ;  <new_line>
        } else {  <new_line>
            $global_phrase_type = 'phrase' ;  <new_line>
        }  <new_line>
        $global_accumulated_text = $global_accumulated_text . $global_prefix_text . '<dashrep_codeview_tag_' . $global_phrase_type . '_begin>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_middle_1>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_middle_2>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_end>' ;  <new_line>
    }  <new_line>
    $global_string_in_phrase = $global_accumulated_text . $global_remaining_text ;  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = $global_string_in_phrase ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-linewise-read-from-file-and-use-handler:
template-interpreter-function-begin

sub function__linewise_read_from_file_and_use_handler( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_target_phrase_name eq "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_target_phrase_name . "]" ;  <new_line>
} elsif ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_source_filename . " not found, or could not be opened]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_nesting_level_of_file_actions ++ ;  <new_line>
    if ( $global_nesting_level_of_file_actions > 1 ) {  <new_line>
        $global_possible_error_message .= " [warning, file hyphen-here related action called recursivley, which is not allowed]" ;  <new_line>
    } else {  <new_line>
        $global_line_count = 1 ;  <new_line>
        while ( $global_input_line = <INFILE> ) {  <new_line>
            chomp( $global_input_line ) ;  <new_line>
            $global_dashrep_replacement{ "linewise hyphen-here input hyphen-here line hyphen-here from hyphen-here file" } = $global_input_line ;  <new_line>
            $global_dashrep_replacement{ "linewise hyphen-here input hyphen-here line hyphen-here count" } = $global_line_count ;  <new_line>
            &global_phrase_name_to_match = $global_target_phrase_name ;  <new_line>
            &function_branch_based_on_phrase_name( );  <new_line>
            $global_nesting_level_of_file_actions <character_hyphen><character_hyphen> ;  <new_line>
            $global_line_count ++ ;  <new_line>
        }  <new_line>
    }  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; processed each line in file " . $global_source_filename . " using handler " . $global_target_phrase_name . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-modification-time-of-file:
template-interpreter-function-begin

sub function__modification_time_of_file( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
} else  <new_line>
{  <new_line>
    ( $global_read_time , $global_write_time ) = ( stat( $global_source_filename ) )[8,9] ;  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; modification time of file " . $global_source_filename . " is " . $global_write_time . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
$global_action_result = " " . $global_write_time . " " ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-absolute:
template-interpreter-function-begin

sub function__numeric_absolute( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_result_value = abs( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ;  <new_line>
if ( $global_result_value == 0 ) {  <new_line>
    $global_action_result = '0' ;  <new_line>
} else {  <new_line>
    $global_action_result = sprintf( "%d" , $global_result_value ) ;  <new_line>
}  <new_line>
if ( $global_action_result =~ /^(<character_hyphen>?[0<character_hyphen>9]+)\.0*$/ ) {  <new_line>
    $global_action_result = $1 ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-numeric-add:
# no-space dashes-long-line  <new_line>
# function__numeric_add  <new_line>
#  <new_line>

*---
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>
---*

sub function__numeric_add( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 0 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value + &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-equal-greater-less-compare:
template-interpreter-function-begin

sub function__numeric_equal_greater_less_compare( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_first_object_of_action = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ;  <new_line>
$global_second_object_of_action = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
if ( $global_first_object_of_action == $global_second_object_of_action ) {  <new_line>
    $global_action_result = 'equal' ;  <new_line>
} elsif ( $global_first_object_of_action > $global_second_object_of_action ) {  <new_line>
    $global_action_result = 'greater' ;  <new_line>
} else {  <new_line>
    $global_action_result = 'less' ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-numeric-maximum:
# no-space dashes-long-line  <new_line>
# function__numeric_maximum  <new_line>
#  <new_line>

*---
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>
---*

sub function__numeric_maximum( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = -999999999999 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ) > $global_calculated_value ) {  <new_line>
$global_calculated_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-minimum:
# no-space dashes-long-line  <new_line>
# function__numeric_minimum  <new_line>
#  <new_line>

*---
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>
---*

sub function__numeric_minimum( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 999999999999 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) < $global_calculated_value ) {  <new_line>
$global_calculated_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-multiply:
# no-space dashes-long-line  <new_line>
# function__numeric_multiply  <new_line>
#  <new_line>

*---
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>
---*

sub function__numeric_multiply( ) {  <new_line>
$global_default_text = '1' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 1 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value * &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-two-dimensional-sort-into-columns-and-rows:
template-interpreter-function-begin

sub function__numeric_two_dimensional_sort_into_columns_and_rows( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_number_of_columns = $global_operand_one ;  <new_line>
$global_text_for_right_direction_values = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_text_for_up_direction_values = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_text_for_up_direction_values =~ s/\n/ /s ;  <new_line>
$global_text_for_up_direction_values =~ s/^ +// ;  <new_line>
$global_text_for_up_direction_values =~ s/ +$// ;  <new_line>
$global_text_for_right_direction_values =~ s/\n/ /s ;  <new_line>
$global_text_for_right_direction_values =~ s/^ +// ;  <new_line>
$global_text_for_right_direction_values =~ s/ +$// ;  <new_line>
@global_up_direction_text_for_item_number = split( / +/ , $global_text_for_up_direction_values ) ;  <new_line>
unshift( @global_up_direction_text_for_item_number , 0 ) ;  <new_line>
@global_right_direction_text_for_item_number = split( / +/ , $global_text_for_right_direction_values ) ;  <new_line>
unshift( @global_right_direction_text_for_item_number , 0 ) ;  <new_line>
if ( $#global_up_direction_text_for_item_number != $#global_right_direction_text_for_item_number ) {  <new_line>
    $global_action_result = 'runtime_error_two_dimensional_sort_lists_not_same_length' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_number_of_items = $#global_up_direction_text_for_item_number ;  <new_line>
if ( $global_number_of_items == 0 ) {  <new_line>
    $global_action_result = 'runtime_error_two_dimensional_sort_lists_are_empty' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_up_direction_value_for_item_number[ $global_item_number ] = &function_parameterized__convert_numeric_text_into_numeric_value( $global_up_direction_text_for_item_number[ $global_item_number ] ) ;  <new_line>
    $global_right_direction_value_for_item_number[ $global_item_number ] = &function_parameterized__convert_numeric_text_into_numeric_value( $global_right_direction_text_for_item_number[ $global_item_number ] ) ;  <new_line>
}  <new_line>
$global_number_of_items_in_bottom_row = $global_number_of_columns ;  <new_line>
$global_number_of_full_rows = int( $global_number_of_items / $global_number_of_columns ) ;  <new_line>
$global_number_of_rows = $global_number_of_full_rows ;  <new_line>
if ( ( $global_number_of_full_rows * $global_number_of_columns ) < $global_number_of_items ) {  <new_line>
    $global_number_of_rows ++ ;  <new_line>
    $global_number_of_items_in_bottom_row = $global_number_of_items - ( $global_number_of_full_rows * $global_number_of_columns ) ;  <new_line>
}  <new_line>
@global_list_of_remaining_item_numbers = ( ) ;  <new_line>
$global_up_direction_minimum_value = 999999 ;  <new_line>
$global_up_direction_maximum_value = <character_hyphen>999999 ;  <new_line>
$global_right_direction_minimum_value = 999999 ;  <new_line>
$global_right_direction_maximum_value = <character_hyphen>999999 ;  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_zero_if_not_remaining_item_number[ $global_item_number ] = $global_item_number ;  <new_line>
    if ( $global_up_direction_value_for_item_number[ $global_item_number ] < $global_up_direction_minimum_value ) {  <new_line>
        $global_up_direction_minimum_value = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_up_direction_value_for_item_number[ $global_item_number ] > $global_up_direction_maximum_value ) {  <new_line>
        $global_up_direction_maximum_value = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_right_direction_value_for_item_number[ $global_item_number ] < $global_right_direction_minimum_value ) {  <new_line>
        $global_right_direction_minimum_value = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_right_direction_value_for_item_number[ $global_item_number ] > $global_right_direction_maximum_value ) {  <new_line>
        $global_right_direction_maximum_value = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    push( @global_list_of_remaining_item_numbers , $global_item_number ) ;  <new_line>
}  <new_line>
$global_range_of_up_direction_values = $global_up_direction_maximum_value - $global_up_direction_minimum_value ;  <new_line>
$global_range_of_right_direction_values = $global_right_direction_maximum_value - $global_right_direction_minimum_value ;  <new_line>
if ( $global_range_of_up_direction_values > 0.0001 ) {  <new_line>
    $global_multiplier_for_up_direction_values = $global_number_of_rows * 100.00 / $global_range_of_up_direction_values ;  <new_line>
} else {  <new_line>
    $global_multiplier_for_up_direction_values = $global_number_of_rows * 1.0 ;  <new_line>
    $global_up_direction_minimum_value = $global_up_direction_minimum_value - 1.0 ;  <new_line>
}  <new_line>
if ( $global_range_of_right_direction_values > 0.0001 ) {  <new_line>
    $global_multiplier_for_right_direction_values = $global_number_of_columns * 100.00 / $global_range_of_right_direction_values ;  <new_line>
} else {  <new_line>
    $global_multiplier_for_right_direction_values = $global_number_of_columns * 1.0 ;  <new_line>
    $global_right_direction_minimum_value = $global_right_direction_minimum_value - 1.0 ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_up_direction_value_for_item_number[ $global_item_number ] = ( $global_up_direction_value_for_item_number[ $global_item_number ] - $global_up_direction_minimum_value ) * $global_multiplier_for_up_direction_values ;  <new_line>
    $global_right_direction_value_for_item_number[ $global_item_number ] = ( $global_right_direction_value_for_item_number[ $global_item_number ] - $global_right_direction_minimum_value ) * $global_multiplier_for_right_direction_values ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_right_and_up_direction_value_for_item_number[ $global_item_number ] = $global_right_direction_value_for_item_number[ $global_item_number ] + $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    $global_left_and_up_direction_value_for_item_number[ $global_item_number ] = - $global_right_direction_value_for_item_number[ $global_item_number ] + $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
}  <new_line>
$global_top_row_number = 1 ;  <new_line>
$global_bottom_row_number = $global_number_of_rows ;  <new_line>
$global_fill_direction_top_left = 1 ;  <new_line>
$global_fill_direction_bottom_right = 2 ;  <new_line>
$global_fill_direction_bottom_left = 3 ;  <new_line>
$global_fill_direction_top_right = 4 ;  <new_line>
$global_need_maximum = 1 ;  <new_line>
$global_need_minimum = 2 ;  <new_line>
$global_value_direction_right_and_up = 1 ;  <new_line>
$global_value_direction_left_and_up = 2 ;  <new_line>
$global_value_direction_up = 3 ;  <new_line>
$global_value_direction_right = 4 ;  <new_line>
$global_top_left_open_column = 1 ;  <new_line>
$global_top_right_open_column = $global_number_of_columns ;  <new_line>
$global_bottom_left_open_column = 1 ;  <new_line>
$global_bottom_right_open_column = $global_number_of_items_in_bottom_row ;  <new_line>
$global_number_of_items_remaining = $global_number_of_items ;  <new_line>
while ( $global_number_of_items_remaining > 0 ) {  <new_line>
    for ( $global_fill_direction = $global_fill_direction_top_left ; $global_fill_direction <= $global_fill_direction_top_right ; $global_fill_direction ++ ) {  <new_line>
        if ( $global_fill_direction == $global_fill_direction_top_left ) {  <new_line>
            $global_target_row_number = $global_top_row_number ;  <new_line>
            $global_target_column_number = $global_top_left_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right ;  <new_line>
            } elsif ( $global_top_left_open_column < $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_top_left_open_column == $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_right ) {  <new_line>
            $global_target_row_number = $global_bottom_row_number ;  <new_line>
            $global_target_column_number = $global_bottom_right_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right ;  <new_line>
            } elsif ( ( $global_bottom_row_number == $global_number_of_rows ) && ( $global_bottom_right_open_column > $global_number_of_items_in_bottom_row ) ) {  <new_line>
                $global_bottom_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
                next ;  <new_line>
            } elsif ( $global_bottom_left_open_column < $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column == $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_left ) {  <new_line>
            $global_target_row_number = $global_bottom_row_number ;  <new_line>
            $global_target_column_number = $global_bottom_left_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                next ;  <new_line>
            } elsif ( ( $global_bottom_row_number == $global_number_of_rows ) && ( $global_bottom_left_open_column > $global_number_of_items_in_bottom_row ) ) {  <new_line>
                $global_bottom_row_number <character_hyphen><character_hyphen> ;  <new_line>
                $global_bottom_left_open_column = 1 ;  <new_line>
                $global_bottom_right_open_column = $global_number_of_columns ;  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column < $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column == $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_top_right ) {  <new_line>
            $global_target_row_number = $global_top_row_number ;  <new_line>
            $global_target_column_number = $global_top_right_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                next ;  <new_line>
            } elsif ( $global_top_left_open_column < $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_top_left_open_column == $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        }  <new_line>
        if ( $global_need_maximum_or_minimum == $global_need_maximum ) {  <new_line>
            $global_max_or_min_value = <character_hyphen>999999 ;  <new_line>
        } else {  <new_line>
            $global_max_or_min_value = 999999 ;  <new_line>
        }  <new_line>
        $global_item_number_at_min_or_max = 0 ;  <new_line>
        foreach ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
            if ( $global_zero_if_not_remaining_item_number[ $global_item_number ] >= 1 ) {  <new_line>
                if ( $global_use_value_direction == $global_value_direction_right_and_up ) {  <new_line>
                    $global_next_value_to_compare = $global_right_and_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_left_and_up ) {  <new_line>
                    $global_next_value_to_compare = $global_left_and_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_up ) {  <new_line>
                    $global_next_value_to_compare = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_right ) {  <new_line>
                    $global_next_value_to_compare = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } else {  <new_line>
                    next ;  <new_line>
                }  <new_line>
                if ( $global_need_maximum_or_minimum == $global_need_maximum ) {  <new_line>
                    if ( $global_next_value_to_compare > $global_max_or_min_value ) {  <new_line>
                        $global_max_or_min_value = $global_next_value_to_compare ;  <new_line>
                        $global_item_number_at_min_or_max = $global_item_number ;  <new_line>
                    }  <new_line>
                } else {  <new_line>
                    if ( $global_next_value_to_compare < $global_max_or_min_value ) {  <new_line>
                        $global_max_or_min_value = $global_next_value_to_compare ;  <new_line>
                        $global_item_number_at_min_or_max = $global_item_number ;  <new_line>
                    }  <new_line>
                }  <new_line>
            }  <new_line>
        }  <new_line>
        $global_column_position_for_item_number[ $global_item_number_at_min_or_max ] = $global_target_column_number ;  <new_line>
        $global_row_position_for_item_number[ $global_item_number_at_min_or_max ] = $global_target_row_number ;  <new_line>
#                   Do NOT change (or remove) next line, else endless loop is likely:  <new_line>
        $global_number_of_items_remaining <character_hyphen><character_hyphen> ;  <new_line>
        if ( $global_number_of_items_remaining < 1 ) {  <new_line>
            last ;  <new_line>
        }  <new_line>
        if ( $global_fill_direction == $global_fill_direction_top_left ) {  <new_line>
            $global_top_left_open_column ++ ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_right ) {  <new_line>
            $global_bottom_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_left ) {  <new_line>
            $global_bottom_left_open_column ++ ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_top_right ) {  <new_line>
            $global_top_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
        }  <new_line>
        $global_zero_if_not_remaining_item_number[ $global_item_number_at_min_or_max ] = 0 ;  <new_line>
    }  <new_line>
    if ( $global_number_of_items_remaining < 1 ) {  <new_line>
        last ;  <new_line>
    }  <new_line>
    if ( $global_top_left_open_column > $global_top_right_open_column ) {  <new_line>
        $global_top_row_number ++ ;  <new_line>
        $global_top_left_open_column = 1 ;  <new_line>
        $global_top_right_open_column = $global_number_of_columns ;  <new_line>
    }  <new_line>
    if ( $global_bottom_left_open_column > $global_bottom_right_open_column ) {  <new_line>
        $global_bottom_row_number <character_hyphen><character_hyphen> ;  <new_line>
        $global_bottom_left_open_column = 1 ;  <new_line>
        $global_bottom_right_open_column = $global_number_of_columns ;  <new_line>
    }  <new_line>
    if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
        if ( $global_top_left_open_column > $global_bottom_left_open_column ) {  <new_line>
            $global_bottom_left_open_column = $global_top_left_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_left_open_column < $global_bottom_left_open_column ) {  <new_line>
            $global_top_left_open_column = $global_bottom_left_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_right_open_column > $global_bottom_right_open_column ) {  <new_line>
            $global_top_right_open_column = $global_bottom_right_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_right_open_column < $global_bottom_right_open_column ) {  <new_line>
            $global_bottom_right_open_column = $global_top_right_open_column ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_final_result = '' ;  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_row_number = $global_row_position_for_item_number[ $global_item_number ] ;  <new_line>
    $global_column_number = $global_column_position_for_item_number[ $global_item_number ] ;  <new_line>
    $global_final_result .= 'row<character_hyphen>' . $global_row_number . '<character_hyphen>column<character_hyphen>' . $global_column_number . ' ' ;  <new_line>
    $global_item_number_at_row_column{ $global_row_number . '' . $global_column_number } = $global_item_number ;  <new_line>
}  <new_line>
$global_final_result =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_four } = $global_final_result ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vector-absolutes:
template-interpreter-function-begin

sub function__numeric_vector_absolutes( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_two ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = abs( &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_operand } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vector-add-number:
template-interpreter-function-begin

sub function__numeric_vector_add_number( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_single_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] + &function_parameterized__convert_numeric_text_into_numeric_value( $global_single_value ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vector-integers:
template-interpreter-function-begin

sub function__numeric_vector_integers( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_two ;  <new_line>
if ( $global_dashrep_replacement{ $global_operand_one } !~ /^[ \<character_hyphen>0<character_hyphen>9\.]+$/ ) {  <new_line>
    $global_action_result = $global_dashrep_replacement{ 'dashrep<character_hyphen>undefined' } ;  <new_line>
    $global_action_result = 'runtime_operand_error_numeric_vector_integers' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = int( &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] )) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_operand } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vector-multiply-by-number:
template-interpreter-function-begin

sub function__numeric_vector_multiply_by_number( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_single_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] * $global_single_value ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vectors-add:
template-interpreter-function-begin

sub function__numeric_vectors_add( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) + &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vectors-divide-by:
template-interpreter-function-begin

sub function__numeric_vectors_divide_by( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    if ( abs( $global_list_of_y_values[ $global_pair_pointer ] ) < 0.000001 ) {  <new_line>
        $global_numeric_value = 1000000 ;  <new_line>
    } else {  <new_line>
        $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) / &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    }  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vectors-from-delta-values-calculate-distances:
template-interpreter-function-begin

sub function__numeric_vectors_from_delta_values_calculate_distances( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
if ( $global_dashrep_replacement{ $global_operand_one } !~ /^[ \<character_hyphen>0<character_hyphen>9\.]+$/ ) {  <new_line>
    $global_action_result = $global_dashrep_replacement{ 'dashrep<character_hyphen>undefined' } ;  <new_line>
    $global_action_result = 'runtime_operand_error_numeric_vectors_from_delta_values_calculate_distances' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value =  int( sqrt( ( $global_list_of_x_values[ $global_pair_pointer ] ** 2 ) + ( $global_list_of_y_values[ $global_pair_pointer ] ** 2 ) ) + 0.5 ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-vectors-multiply:
template-interpreter-function-begin

sub function__numeric_vectors_multiply( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) * &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-interpreter-function-end
----
template-function-numeric-y-map-tile-number-based-on-latitude:
template-interpreter-function-begin

sub function__numeric_y_map_tile_number_based_on_latitude( ) {  <new_line>

$global_action_result = '' ;  <new_line>
if ( ( $global_operand_one > 85.0 ) || ( $global_operand_one < <character_hyphen>85.0 ) ) {  <new_line>
    $global_action_result = $global_dashrep_replacement{ 'dashrep<character_hyphen>undefined' } ;  <new_line>
    $global_action_result = 'runtime_operand_error_numeric_y_map_tile_number_based_on_latitude' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
if ( ( exists( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } ) ) && ( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } =~ /^[0<character_hyphen>9]+$/ ) ) {  <new_line>
    $global_map_tile_zoom = &function_parameterized__convert_numeric_text_into_numeric_value( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } ) ;  <new_line>
} else {  <new_line>
    $global_map_tile_zoom = 16 ;  <new_line>
}  <new_line>
$global_map_tile_n = 2 ** $global_map_tile_zoom ;  <new_line>
$global_pi = 4.0 * atan2( 1.0 , 1.0 ) ;  <new_line>
$global_dashrep_replacement{ 'numeric<character_hyphen>pi' } = sprintf( "%f" , $global_pi ) ;  <new_line>
$global_angle_in_radians = ( $global_operand_one + 0.0 ) * $global_pi / 180.0 ;  <new_line>
$global_sine_of_angle = sin( $global_angle_in_radians ) ;  <new_line>
$global_cosine_of_angle = cos( $global_angle_in_radians ) ;  <new_line>
$global_result_value = $global_map_tile_n * ( 1.0 - ( log( ( $global_sine_of_angle / $global_cosine_of_angle ) + ( 1 / $global_cosine_of_angle ) ) / $global_pi ) ) / 2.0 ;  <new_line>
if ( $global_result_value == 0 ) {  <new_line>
    $global_action_result = '0' ;  <new_line>
} else {  <new_line>
    $global_action_result = sprintf( "%f" , $global_result_value ) ;  <new_line>
}  <new_line>
if ( $global_action_result =~ /^(<character_hyphen>?[0<character_hyphen>9]+)\.0*$/ ) {  <new_line>
    $global_action_result = $1 ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-parameterized-convert-numeric-text-into-numeric-value:
# no-space dashes-long-line  <new_line>
# function_parameterized__convert_numeric_text_into_numeric_value  <new_line>
<new_line>

sub function_parameterized__convert_numeric_text_into_numeric_value( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^ *([\+|\ hyphen-here ]?[0-9]+(\.[0-9]*)?) *$/ ) {  <new_line>
return $1 + 0 ;  <new_line>
} else {  <new_line>
return 0 ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-convert-numeric-value-into-numeric-text:
# no-space dashes-long-line  <new_line>
# function_parameterized__convert_numeric_value_into_numeric_text  <new_line>
<new_line>

sub function_parameterized__convert_numeric_value_into_numeric_text( ) {  <new_line>
my $local_numeric ;  <new_line>
$local_numeric = $_[ 0 ] ;  <new_line>

return $local_numeric . '' ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-file-opens-for-reading:
# no-space dashes-long-line  <new_line>
# function_parameterized__file_opens_for_reading  <new_line>
<new_line>

sub function_parameterized__file_opens_for_reading( ) {  <new_line>
my $local_numeric ;  <new_line>
$local_numeric = $_[ 0 ] ;  <new_line>


# todo: write this code ; if file does not exist, create empty file named zee_dashrep_empty_file.txt and open it for reading  <new_line>
# use $global_input_file_name and &function_file_open_input( )  <new_line>


return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-get-list-of-words:
# no-space dashes-long-line  <new_line>
# function_parameterized__get_list_of_words  <new_line>
<new_line>

sub function_parameterized__get_list_of_words( ) {  <new_line>
my $local_text ;  <new_line>
my @global_list_of_operands ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text !~ /[^ ]/ ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( $local_text =~ /[\n\r\t]/ ) {  <new_line>
$local_text =~ s/[\n\r\t]/ /sg ;  <new_line>
}  <new_line>
if ( $local_text =~ /^ / ) {  <new_line>
$local_text =~ s/^ +// ;  <new_line>
}  <new_line>
if ( $local_text =~ / $/ ) {  <new_line>
$local_text =~ s/ +$// ;  <new_line>
}  <new_line>

@global_list_of_operands = split( / +/ , $local_text ) ;  <new_line>
return @global_list_of_operands ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-normalize-calculated-value:
# no-space dashes-long-line  <new_line>
# function_parameterized__normalize_calculated_value  <new_line>
<new_line>

sub function_parameterized__normalize_calculated_value( ) {  <new_line>
$global_calculated_value = $_[ 0 ] ;  <new_line>

if ( $global_calculated_value == 0 ) {  <new_line>
$global_normalized_calculated_value = '0' ;  <new_line>
} else {  <new_line>
$global_normalized_calculated_value = sprintf( "%f" , $global_calculated_value ) ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+\.[0-9]*[1-9])0+$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+)\.0*$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

return $global_normalized_calculated_value ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-remove-leading-trailing-spaces:
# no-space dashes-long-line  <new_line>
# function_parameterized__remove_leading_trailing_spaces  <new_line>
<new_line>

sub function_parameterized__remove_leading_trailing_spaces( ) {  <new_line>
$global_temporary_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $global_temporary_text ) ;  <new_line>
$global_character_pointer_begin = $global_length_of_text + 1 ;  <new_line>
$global_character_pointer_end = -1 ;  <new_line>

for ( $global_character_pointer = 1 ; $global_character_pointer <= $global_length_of_text ; $global_character_pointer ++ ) {  <new_line>
if ( substr( $global_temporary_text , $global_character_pointer - 1 , 1 ) ne ' ' ) {  <new_line>
$global_character_pointer_begin = $global_character_pointer ;  <new_line>
last ;  <new_line>
}  <new_line>
}  <new_line>

for ( $global_character_pointer = $global_length_of_text ; $global_character_pointer >= 1 ; $global_character_pointer -- ) {  <new_line>
if ( substr( $global_temporary_text , $global_character_pointer - 1 , 1 ) ne ' ' ) {  <new_line>
$global_character_pointer_end = $global_character_pointer ;  <new_line>
last ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_character_pointer_begin <= $global_character_pointer_end ) {
return substr( $global_temporary_text , $global_character_pointer_begin - 1 , $global_character_pointer_end - $global_character_pointer_begin + 1 ) ;  <new_line>
} else {  <new_line>
return '' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_empty( ) {  <new_line>

if ( $_[ 0 ] =~ /[^ ]/ ) {  <new_line>
return $global_no ;  <new_line>
} else {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-file-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_file_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_file_name( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '.' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

$global_length_of_text = length( $local_text ) ;  <new_line>
if ( $global_length_of_text < 3 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '/' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , "\\" ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '*' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '&' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '!' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '@' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '$' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '%' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '^' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '~' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '`' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '"' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , "'" ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ',' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ':' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ';' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '=' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '+' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-input-file-exists:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_input_file_exists  <new_line>
<new_line>

sub function_parameterized__yes_or_no_input_file_exists( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( open ( INFILE , '<' . code-get-or-put-phrase-definition-begin 'dashrep-path-prefix-for-file-reading' code-get-or-put-phrase-definition-end . $local_text ) ) {  <new_line>
close( INFILE ) ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

close( INFILE ) ;  <new_line>
return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-integer:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_integer  <new_line>
<new_line>

sub function_parameterized__yes_or_no_integer( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^-?[0-9]+$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-output-file-exists:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_output_file_exists  <new_line>
<new_line>

sub function_parameterized__yes_or_no_output_file_exists( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( open ( INFILE , '<' . code-get-or-put-phrase-definition-begin 'dashrep-path-prefix-for-file-writing' code-get-or-put-phrase-definition-end . $local_text ) ) {  <new_line>
close( INFILE ) ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

close( INFILE ) ;  <new_line>
return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-contains-real-numbers:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_contains_real_numbers  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_contains_real_numbers( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end =~ /[^0-9\-\. ]/ ) {  <new_line>
return $global_no ;  <new_line>
} else {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-definition-not-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_definition_not_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_definition_not_empty( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

*--- If the phrase is not defined, define it as empty ---*
if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end = '' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( $global_no == &function_parameterized__yes_or_no_empty( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_name( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) > -1 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) > 0 ) {  <new_line>

*--- If the phrase is not defined, define it as empty ---*
if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-positive-integer:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_positive_integer  <new_line>
<new_line>

sub function_parameterized__yes_or_no_positive_integer( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^[0-9]+$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-real-number:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_real_number  <new_line>
<new_line>

sub function_parameterized__yes_or_no_real_number( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^(-?[0-9]+)(\.[0-9]*)?$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-valid-path:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_valid_path  <new_line>
<new_line>
# reminder: path "./" is valid, so period is OK  <new_line>
<new_line>

sub function_parameterized__yes_or_no_valid_path( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $local_text ) ;  <new_line>

if ( $global_length_of_text == 0 ) {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

if ( ( index( $local_text , '/' ) < 0 ) && ( index( $local_text , "\\" ) < 0 ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne "\\" ) && ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne '/' ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '*' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '&' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '!' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '@' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '$' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '%' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '^' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '~' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '`' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '"' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , "'" ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ',' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ';' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '=' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '+' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-point-to-words-in-operand-whichever:
# no-space dashes-long-line  <new_line>
# function__point_to_words_in_operand_whichever  <new_line>
#  <new_line>
#  Input is $global_operand_whichever  <new_line>
#  Output is variable $global_word_pointer_operand_whichever and variable $global_operand_whichever_words array @global_word_begin_operand_whichever_at_word and array @global_word_length_operand_whichever_at_word where pointer into array is 1 for first word, etc.  <new_line>
#  Word counts start at one  <new_line>
#  Character pointer numbers start at zero  <new_line>
#  Note: \n = new line , \t = tab , \r = carriage return , \f = form feed  <new_line>
#  (Did not work: \v = vertical tab )  <new_line>
<new_line>

sub function__point_to_words_in_operand_whichever( ) {  <new_line>


# print "\n" . $global_operand_whichever . "\n" ;  <new_line>


$global_word_count_operand_whichever = 0 ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_whichever ) == $global_yes ) {  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_whichever } ) ) {  <new_line>
$global_operand_whichever_words = $global_dashrep_replacement{ $global_operand_whichever }  <new_line>
} else {  <new_line>
$global_operand_whichever_words = ''  <new_line>
}  <new_line>
} else {  <new_line>
$global_operand_whichever_words = ''  <new_line>
}  <new_line>

$global_length_of_text = length( $global_operand_whichever_words ) ;  <new_line>
$global_pointer_to_previous_whitespace = -1 ;  <new_line>
$global_pointer_to_next_whitespace = -1 ;  <new_line>
if ( $global_length_of_text < 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type ] = 1 ;  <new_line>
$global_pointer_to_whitespace_type[ $global_whitespace_type ] = -1 ;  <new_line>
}  <new_line>

while ( $global_pointer_to_next_whitespace <= $global_length_of_text ) {  <new_line>

if ( $global_yes_find_next_whitespace_of_type[ 1 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = index( $global_operand_whichever_words , ' ' , $global_pointer_to_whitespace_type[ 1 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 1 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 2 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = index( $global_operand_whichever_words , "\n" , $global_pointer_to_whitespace_type[ 2 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 2 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 2 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 3 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = index( $global_operand_whichever_words , "\t" , $global_pointer_to_whitespace_type[ 3 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 3 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 3 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 4 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = index( $global_operand_whichever_words , "\r" , $global_pointer_to_whitespace_type[ 4 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 4 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 4 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 5 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = index( $global_operand_whichever_words , "\f" , $global_pointer_to_whitespace_type[ 5 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 5 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 5 ] = 0 ;  <new_line>
}  <new_line>

$global_pointer_to_next_whitespace = $global_length_of_text + 99 ;  <new_line>
$global_whitespace_type_next = 0 ;  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
if ( $global_pointer_to_whitespace_type[ $global_whitespace_type ] < $global_pointer_to_next_whitespace ) {  <new_line>
$global_pointer_to_next_whitespace = $global_pointer_to_whitespace_type[ $global_whitespace_type ] ;  <new_line>
$global_whitespace_type_next = $global_whitespace_type ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace >= $global_length_of_text ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace > $global_pointer_to_previous_whitespace + 1 ) {  <new_line>
$global_word_count_operand_whichever ++ ;  <new_line>
$global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_next_whitespace - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">" . substr( $global_operand_whichever_words , $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] , $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] ) . "<" . "\n" ;  <new_line>

}  <new_line>

$global_pointer_to_previous_whitespace = $global_pointer_to_next_whitespace ;  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type_next ] = 1 ;  <new_line>

#  end of while loop  <new_line>
}  <new_line>

# print "prev " . $global_pointer_to_previous_whitespace . "  next " . $global_pointer_to_next_whitespace . "  length " . $global_length_of_text . "\n" ;  <new_line>

if ( ( $global_length_of_text - $global_pointer_to_previous_whitespace ) >= 2 ) {  <new_line>
$global_word_count_operand_whichever ++ ;  <new_line>
$global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_length_of_text - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">>" . substr( $global_operand_whichever_words , $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] , $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] ) . "<<" . "\n" ;  <new_line>
# print "position " . $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] . "  length " . $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] . "\n" ;  <new_line>

}  <new_line>

template-function-segment-ending
----
template-function-point-to-words:
# no-space dashes-long-line  <new_line>
# function__point_to_words  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is variable $global_number_of_words and array @global_begin_position_for_word and array @global_length_of_word where pointer into array is 1 for first word, etc.  <new_line>
#  Word counts start at one  <new_line>
#  Character pointer numbers start at zero  <new_line>
#  Note: \n = new line , \t = tab , \r = carriage return , \f = form feed  <new_line>
#  (Did not work: \v = vertical tab )  <new_line>
<new_line>

sub function__point_to_words( ) {  <new_line>


# print "\n" . $global_source_text . "\n" ;  <new_line>


$global_number_of_words = 0 ;  <new_line>
$global_length_of_text = length( $global_source_text ) ;  <new_line>
$global_pointer_to_previous_whitespace = -1 ;  <new_line>
$global_pointer_to_next_whitespace = -1 ;  <new_line>
if ( $global_length_of_text < 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type ] = 1 ;  <new_line>
$global_pointer_to_whitespace_type[ $global_whitespace_type ] = -1 ;  <new_line>
}  <new_line>

while ( $global_pointer_to_next_whitespace <= $global_length_of_text ) {  <new_line>

if ( $global_yes_find_next_whitespace_of_type[ 1 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = index( $global_source_text , ' ' , $global_pointer_to_whitespace_type[ 1 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 1 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 2 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = index( $global_source_text , "\n" , $global_pointer_to_whitespace_type[ 2 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 2 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 2 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 3 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = index( $global_source_text , "\t" , $global_pointer_to_whitespace_type[ 3 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 3 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 3 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 4 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = index( $global_source_text , "\r" , $global_pointer_to_whitespace_type[ 4 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 4 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 4 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 5 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = index( $global_source_text , "\f" , $global_pointer_to_whitespace_type[ 5 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 5 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 5 ] = 0 ;  <new_line>
}  <new_line>

$global_pointer_to_next_whitespace = $global_length_of_text + 99 ;  <new_line>
$global_whitespace_type_next = 0 ;  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
if ( $global_pointer_to_whitespace_type[ $global_whitespace_type ] < $global_pointer_to_next_whitespace ) {  <new_line>
$global_pointer_to_next_whitespace = $global_pointer_to_whitespace_type[ $global_whitespace_type ] ;  <new_line>
$global_whitespace_type_next = $global_whitespace_type ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace >= $global_length_of_text ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace > $global_pointer_to_previous_whitespace + 1 ) {  <new_line>
$global_number_of_words ++ ;  <new_line>
$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_pointer_to_next_whitespace - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">" . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "<" . "\n" ;  <new_line>

}  <new_line>

$global_pointer_to_previous_whitespace = $global_pointer_to_next_whitespace ;  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type_next ] = 1 ;  <new_line>

#  end of while loop  <new_line>
}  <new_line>

# print "prev " . $global_pointer_to_previous_whitespace . "  next " . $global_pointer_to_next_whitespace . "  length " . $global_length_of_text . "\n" ;  <new_line>

if ( ( $global_length_of_text - $global_pointer_to_previous_whitespace ) >= 2 ) {  <new_line>
$global_number_of_words ++ ;  <new_line>
$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_length_of_text - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">>" . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "<<" . "\n" ;  <new_line>
# print "position " . $global_begin_position_for_word[ $global_number_of_words ] . "  length " . $global_length_of_word[ $global_number_of_words ] . "\n" ;  <new_line>

}  <new_line>

template-function-segment-ending
----
template-function-remove-extra-spaces:
# no-space dashes-long-line  <new_line>
# function__remove_extra_spaces  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__remove_extra_spaces( ) {  <new_line>
$global_default_text = $global_source_text ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_target_text = substr( $global_source_text , $global_begin_position_for_word[ 1 ] , $global_length_of_word[ 1 ] ) ;  <new_line>
if ( $global_number_of_words == 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_word_pointer_numeric = 2 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_target_text .= ' ' . runtime-code-word-within-source-text ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-rename-file:
template-interpreter-function-begin

sub function__rename_file( ) {  <new_line>

template-interpreter-function-middle

if ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to rename file: " . $global_source_filename . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to delete or overwrite or rename files]" ;  <new_line>
} else  <new_line>
{  <new_line>
    rename( $global_source_filename , $global_target_filename ) ;  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; renamed file " . $global_source_filename . " to " . $global_target_filename . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-segment-ending:
#  end of function  <new_line>
}  <new_line>
<new_line>
<new_line>
----
template-function-segment-if-zero-words-return-default-text:
# begin code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
&function__point_to_words( ) ;  <new_line>
if ( $global_number_of_words == 0 ) {  <new_line>
$global_target_text = $global_default_text ;  <new_line>
return $global_default_text ;  <new_line>
}  <new_line>
# end code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
----
template-function-set-file-permission-public-read:
template-interpreter-function-begin

sub function__set_file_permission_public_read( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_target_filename eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_target_filename . " and " . $global_operand_two . "]" ;  <new_line>
} elsif ( not( chmod( $global_file_public_read_protection_mode , $global_target_filename ) ) ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: protection removal for output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-size-of-file:
template-interpreter-function-begin

sub function__size_of_file( ) {  <new_line>

template-interpreter-function-middle

if ( ( $global_source_filename eq "" ) || ( $global_operand_two ne "" ) ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_filename . " and " . $global_operand_two . "]" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_file_size = sprintf( "%d" , ( stat( $global_source_filename ) )[7] ) ;  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; size of file " . $global_source_filename . " is " . $global_file_size . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
$global_action_result = " " . $global_file_size . " " ;  <new_line>

template-interpreter-function-end
----
template-function-split-epoch-seconds-into-named-components-for-zero-meridian:
template-interpreter-function-begin

sub function__split_epoch_seconds_into_named_components_for_zero_meridian( ) {  <new_line>

$global_action_result = '' ;  <new_line>
( $global_second_time , $global_minute , $global_hour , $global_day_of_month , $global_month_number , $global_year , $global_weekday , $global_day_of_year , $global_extra_info ) = gmtime( $global_operand_one ) ;  <new_line>
$global_month_number ++ ;  <new_line>
$global_year += 1900 ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>second" } = sprintf( "%d" , $global_second_time ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>minute" } = sprintf( "%d" , $global_minute ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>hour" } = sprintf( "%d" , $global_hour ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>month" } = sprintf( "%d" , $global_day_of_month ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>month<character_hyphen>number" } = sprintf( "%d" , $global_month_number ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>year" } = sprintf( "%d" , $global_year ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>week" } = sprintf( "%d" , $global_weekday ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>year" } = sprintf( "%d" , $global_day_of_year ) ;  <new_line>

template-interpreter-function-end
----
template-function-split-epoch-seconds-into-named-components:
template-interpreter-function-begin

sub function__split_epoch_seconds_into_named_components( ) {  <new_line>

$global_action_result = '' ;  <new_line>
( $global_second_time , $global_minute , $global_hour , $global_day_of_month , $global_month_number , $global_year , $global_weekday , $global_day_of_year , $global_extra_info ) = localtime( $global_operand_one ) ;  <new_line>
$global_month_number ++ ;  <new_line>
$global_year += 1900 ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>second" } = sprintf( "%d" , $global_second_time ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>minute" } = sprintf( "%d" , $global_minute ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>hour" } = sprintf( "%d" , $global_hour ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>month" } = sprintf( "%d" , $global_day_of_month ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>month<character_hyphen>number" } = sprintf( "%d" , $global_month_number ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>year" } = sprintf( "%d" , $global_year ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>week" } = sprintf( "%d" , $global_weekday ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>year" } = sprintf( "%d" , $global_day_of_year ) ;  <new_line>

template-interpreter-function-end
----
template-function-write-dashrep-definitions-listed-in-phrase-to-file:
template-interpreter-function-begin

sub function__write_dashrep_definitions_listed_in_phrase_to_file( ) {  <new_line>

template-interpreter-function-middle

@global_list_of_phrases = split( /[ \n\r]+/ , $global_dashrep_replacement{ $global_source_phrase_name } ) ;  <new_line>
@global_sequence_of_phrases = @global_list_of_phrases ;  <new_line>

if ( $#global_list_of_phrases < 0 ) {  <new_line>
    $global_trace_log .= "{{trace; warning: no phrases to write (to file)}}\n" ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here all hyphen-here begin" } ) ) {  <new_line>
    $global_all_defs_begin = "[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here begin<character_hyphen>]\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_all_defs_begin = "" ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here all hyphen-here end" } ) ) {  <new_line>
    $global_all_defs_end = "[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_all_defs_end = "" ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here phrase hyphen-here begin" } ) ) {  <new_line>
    $global_phrase_begin = "[<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here begin<character_hyphen>] " ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_phrase_begin = "" ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here phrase hyphen-here end" } ) ) {  <new_line>
    $global_phrase_end = " [<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_phrase_end = "" ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here def hyphen-here begin" } ) ) {  <new_line>
    $global_def_begin = "[<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here begin<character_hyphen>] " ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_def_begin = "" ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ "export hyphen-here defs hyphen-here def hyphen-here end" } ) ) {  <new_line>
    $global_def_end = " [<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here end<character_hyphen>]\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_def_end = "" ;  <new_line>
}  <new_line>

if ( open ( OUTFILE , '>' . $global_target_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be opened for writing]" ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

$global_counter = 0 ;  <new_line>

foreach $global_phrase_name ( @global_sequence_of_phrases ) {  <new_line>
    if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /[^ ]/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne "four hyphen-here hyphens" ) ) {  <new_line>
        print OUTFILE $global_phrase_name . "\n" ;  <new_line>
        $global_counter ++ ;  <new_line>
    }  <new_line>
}  <new_line>

close( OUTFILE ) ;  <new_line>

if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) ) {  <new_line>
    $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-write-gathered-listed-items-to-end-of-file:
template-interpreter-function-begin

sub function__write_gathered_listed_items_to_end_of_file( ) {  <new_line>

template-interpreter-function-middle

$global_accumulated_text = "" ;  <new_line>
if ( $global_target_filename eq "" ) {  <new_line>
    $global_possible_error_message .= " [warning, action " . $global_action_name . " has invalid operands " . $global_source_phrase_name . " and " . $global_target_filename . "]" ;  <new_line>
} elsif ( $global_dashrep_replacement{ "yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files" } ne "yes" ) {  <new_line>
    $global_trace_log .= "{{trace; attempt to copy from phrase " . $global_source_phrase_name . " to end of file " . $global_target_filename . "}}\n" ;  <new_line>
    $global_possible_error_message .= " [warning, do not have permission to append to files]" ;  <new_line>
} elsif ( open ( OUTFILE , '>>' . $global_target_filename ) ) {  <new_line>
    $global_possible_error_message .= "" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_possible_error_message .= " [warning, file named " . $global_target_filename . " could not be opened for writing]" ;  <new_line>
}  <new_line>
if ( $global_possible_error_message eq "" ) {  <new_line>
    $global_entry_begin = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here begin" } ;  <new_line>
    $global_entry_end = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here end" } ;  <new_line>
    $global_entry_unique = $global_dashrep_replacement{ "dashrep hyphen-here gather hyphen-here tag hyphen-here unique" } ;  <new_line>
    @global_list_of_tag_names = ( ) ;  <new_line>
    if ( ( exists( $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence" } ) ) && ( $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence" } =~ /[^ ]/ ) ) {  <new_line>
        @global_list_of_tag_names = split( /[ \n\r]+/ , $global_dashrep_replacement{ "dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence" } ) ;  <new_line>
    }  <new_line>
    @global_list_of_unique_values = ( ) ;  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
        @global_list_of_unique_values = split( /[ \n\r]+/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
    }  <new_line>
    foreach $global_unique_value ( @global_list_of_unique_values ) {  <new_line>
        $global_accumulated_text .= $global_entry_begin . "\n" ;  <new_line>
        $global_accumulated_text .= $global_entry_unique . " " . $global_unique_value . "\n" ;  <new_line>
        foreach $global_tag_name ( @global_list_of_tag_names ) {  <new_line>
            $global_phrase_name = $global_tag_name . "<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>" . $global_unique_value ;  <new_line>
            if ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) {  <new_line>
                $global_accumulated_text .= $global_tag_name . " " . $global_dashrep_replacement{ $global_phrase_name } . "\n" ;  <new_line>
            }  <new_line>
        }  <new_line>
        $global_accumulated_text .= $global_entry_end . "\n\n" ;  <new_line>
    }  <new_line>
    print OUTFILE $global_accumulated_text . "\n" ;  <new_line>

    if ( $global_dashrep_replacement{ "dashrep hyphen-here action hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; wrote gathered selected items listed in phrase " . $global_source_phrase_name . " to end of file " . $global_target_filename . "}}\n" ;  <new_line>
    }  <new_line>
} else  <new_line>
{  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>
close( OUTFILE ) ;  <new_line>
if ( not( chmod( $global_file_write_protection_mode , $global_target_filename ) ) ) {  <new_line>
    if ( $global_dashrep_replacement{ "dashrep hyphen-here warning hyphen-here trace hyphen-here on hyphen-here yes hyphen-here or hyphen-here no" } eq "yes" ) {  <new_line>
        $global_trace_log .= "{{trace; warning: protection of output file " . $global_target_filename . "  not successful}}\n" ;  <new_line>
        $global_trace_log .= "{{trace; warning: " . $global_possible_error_message . "}}\n" ;  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-xml-move-attributes-into-tag-elements:
template-interpreter-function-begin

sub function__xml_move_attributes_into_tag_elements( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_phrase_being_edited = $global_operand_one ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_phrase_being_edited } ;  <new_line>
while( $global_text_being_edited =~ / *\/> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *\/> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4 \/>/sg ;  <new_line>
    $global_replacement_count_for_item_name{ "loop within action " . $global_action_name } ++ ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit - 100 ) {  <new_line>
        $global_trace_log .= "{{trace; Error: During the action " . $global_action_name . " the endless loop counter got within 100 counts of exceeding its limit, so no more replacements will be done by this action.}}\n";  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
while( $global_text_being_edited =~ / *> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4>/sg ;  <new_line>
    $global_replacement_count_for_item_name{ "loop within action " . $global_action_name } ++ ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit - 100 ) {  <new_line>
        $global_trace_log .= "{{trace; Error: During the action " . $global_action_name . " the endless loop counter got within 100 counts of exceeding its limit, so no more replacements will be done by this action.}}\n";  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_phrase_being_edited } = $global_text_being_edited ;  <new_line>

template-interpreter-function-end
----
template-function-yes-or-no-file-exists:
template-interpreter-function-begin

sub function__yes_or_no_file_exists( ) {  <new_line>

template-interpreter-function-middle

if ( open ( INFILE , '<' . $global_source_filename ) ) {  <new_line>
    $global_action_result = "yes" ;  <new_line>
} else {  <new_line>
    $global_action_result = "no" ;  <new_line>
}  <new_line>
close( INFILE ) ;  <new_line>

template-interpreter-function-end
----
template-function-yes-or-no-folder-exists:
template-interpreter-function-begin

sub function__yes_or_no_folder_exists( ) {  <new_line>

template-interpreter-function-middle

if ( <character_hyphen>d $global_operand_one ) {  <new_line>
    $global_action_result = "yes" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_action_result = "no" ;  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-function-yes-or-no-word-is-in-phrase:
template-interpreter-function-begin

sub function__yes_or_no_word_is_in_phrase( ) {  <new_line>

$global_action_result = ' ' ;  <new_line>
$global_word_to_find = $global_operand_one ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_list_length = $#global_list + 1 ;  <new_line>
$global_action_result = 'no' ;  <new_line>
if ( $global_list_length >= 1 ) {  <new_line>
    $global_last_pointer = 0 ;  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_list_length ; $global_pointer ++ ) {  <new_line>
        if ( $global_list[ $global_pointer - 1 ] eq $global_word_to_find ) {  <new_line>
            $global_action_result = 'yes' ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-interpreter-function-end
----
template-interpreter-function-begin:
# no-space dashes-long-line  <new_line>
----
template-interpreter-function-end:
$global_target_text = $global_action_result ;  <new_line>

template-function-segment-ending
----
template-interpreter-function-middle:
$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_source_filename = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
$global_target_filename = $global_operand_two ;  <new_line>

if ( $global_operand_two eq '' ) {  <new_line>
    $global_target_phrase_name = $global_operand_one ;  <new_line>
    $global_target_filename = $global_operand_one ;  <new_line>
}  <new_line>

$global_source_filename =~ s/^.*[\\\/]// ;  <new_line>
$global_source_filename =~ s/^\.+// ;  <new_line>
$global_target_filename =~ s/^.*[\\\/]// ;  <new_line>
$global_target_filename =~ s/^\.+// ;  <new_line>

if ( $global_source_filename ne '' ) {  <new_line>
    $global_source_filename = $global_dashrep_replacement{ 'dashrep<character_hyphen>path<character_hyphen>prefix<character_hyphen>for<character_hyphen>file<character_hyphen>reading' } . $global_source_filename ;  <new_line>
}  <new_line>

if ( $global_target_filename ne '' ) {  <new_line>
    $global_target_filename = $global_dashrep_replacement{ 'dashrep<character_hyphen>path<character_hyphen>prefix<character_hyphen>for<character_hyphen>file<character_hyphen>writing' } . $global_target_filename ;  <new_line>
}  <new_line>
----
template-runtime-code-file-related-action:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__<dashrep_placeholder_action_name_with_underscores>( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-append-new-line:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end .= "\n" ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-append-text-no-space:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end .= code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-append-text:
template-runtime-code-standard-action-begin

$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>
$global_target_text = runtime-code-for-operand-number-two ;  <new_line>

if ( code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end ne '' ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end .= $global_source_text ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-clear-phrase:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = '' ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-and-replace:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
$global_length_of_text_source = length( $global_source_text ) ;  <new_line>
$global_string_to_be_replaced = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-three code-get-or-put-phrase-definition-end ;  <new_line>
$global_length_of_string_to_be_replaced = length( $global_string_to_be_replaced ) ;  <new_line>
$global_text_to_insert = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-four code-get-or-put-phrase-definition-end ;  <new_line>
$global_character_pointer_begin = 0 ;  <new_line>
$global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>
$global_target_text = '' ;  <new_line>

while ( $global_character_pointer_end >= -1 ) {  <new_line>
$global_length_of_text_segment = $global_character_pointer_end - $global_character_pointer_begin + 1 ;  <new_line>

if ( $global_length_of_text_segment > 0 ) {  <new_line>
$global_target_text .= substr( $global_source_text , $global_character_pointer_begin , $global_length_of_text_segment ) ;  <new_line>
}  <new_line>

$global_target_text .= $global_text_to_insert ;  <new_line>
$global_character_pointer_begin = $global_character_pointer_end + $global_length_of_string_to_be_replaced + 1 ;  <new_line>
$global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>

}  <new_line>

if ( $global_character_pointer_begin < $global_length_of_text_source ) {  <new_line>
$global_target_text .= substr( $global_source_text , $global_character_pointer_begin ) ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-append-file-to-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-copy-characters-from-position-to-position:
template-runtime-code-standard-action-begin

$global_length_of_text_source = length( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>
# reminder: index function starts counting at 0 but Dashrep language starts counting at 1  <new_line>
$global_character_pointer_begin = -1 + &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-three ) ;  <new_line>
$global_character_pointer_end = -1 + &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-four ) ;  <new_line>

if ( ( $global_length_of_text_source > 0 ) && ( $global_character_pointer_begin < $global_length_of_text_source ) ) {  <new_line>

if ( $global_character_pointer_end > $global_length_of_text_source - 1 ) {  <new_line>
$global_character_pointer_end = $global_length_of_text_source - 1 ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = substr( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end , $global_character_pointer_begin , $global_character_pointer_end - $global_character_pointer_begin + 1 ) ;  <new_line>

} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-definition-of-named-phrase:
template-runtime-code-standard-action-begin

$global_phrase_name = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_phrase_name ) == $global_yes ) {  <new_line>
if ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-from-columns-in-file-to-column-lists:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-copy-from-columns-in-file-to-named-phrases:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-copy-from-file-to-phrase:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-copy-from-phrase-append-to-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-copy-lowercase-only:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = lc( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-text:
template-runtime-code-standard-action-begin

$global_target_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-uppercase-only:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = uc( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-without-extra-spaces:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
&function__remove_extra_spaces( ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>


template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-word-at-position:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_pointer_text = runtime-code-for-operand-number-three ;  <new_line>
&function__get_word_at_position( ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-words-at-skip-interval:
# todo: write code for new action copy-words-at-skip-interval  <new_line>
----
template-runtime-code-for-action-copy-words-found-in-both-lists:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__copy_words_found_in_both_lists( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-words-found-in-either-list:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__copy_words_found_in_either_list( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-words-found-only-in-first-list:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__copy_words_found_only_in_first_list( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-copy-zero-pad-left-to-length:
template-runtime-code-standard-action-begin

$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>
$global_count_number = &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-three ) ;  <new_line>

$global_counter = $global_count_number - length( $global_source_text ) ;  <new_line>
$global_text_to_insert = '' ;  <new_line>
while ( ( $global_counter > 0 ) && ( $global_counter < 99 ) ) {  <new_line>
$global_text_to_insert .= '0' ;  <new_line>
$global_counter -- ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_text_to_insert . $global_source_text ;

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-create-empty-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-create-empty-sub-folder:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-delete-file:
template-runtime-code-standard-action-begin

$global_temporary_text = code-get-or-put-phrase-definition-begin 'dashrep-path-prefix-for-file-writing' code-get-or-put-phrase-definition-end . runtime-code-for-operand-number-one ;  <new_line>
unlink $global_temporary_text ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-executable-phrase-begin:
template-runtime-code-for-every-action-begin

template-runtime-code-check-for-endless-loop

$saved_accumulator_pointer = $global_accumulator_pointer  ;  <new_line>
$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] = 0 ;  <new_line>
----
template-runtime-code-for-action-executable-phrase-end:
runtime-code-storage-item-result = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>
$global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-executable-phrase-without-fen:
template-runtime-code-for-action-executable-phrase-begin


&function_compiled__<dashrep_placeholder_code_for_executable_phrase_with_underscores>( ) ;  <new_line>


template-runtime-code-for-action-executable-phrase-end
----
template-runtime-code-for-action-executable-phrase:
template-runtime-code-for-action-executable-phrase-begin

$global_phrase_name_currently_executing = '<dashrep_placeholder_phrase_being_defined>' ;  <new_line>
$global_phrase_name_to_match = <dashrep_placeholder_code_for_executable_phrase> ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>

template-runtime-code-for-action-executable-phrase-end
----
template-runtime-code-for-action-expand-text:
template-runtime-code-standard-action-begin

$saved_accumulator_pointer = $global_accumulator_pointer ;  <new_line>
$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] = 0 ;  <new_line>
$global_phrase_name_currently_executing = '<dashrep_placeholder_phrase_being_defined>' ;  <new_line>
$global_phrase_name_to_match = runtime-code-for-operand-number-one ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>
$global_target_text = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = &dashrep_expand_phrases( $global_target_text ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

*---
# print "fully expanded: " . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
---*

$global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-find-line-in-file-that-begins-with-text:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-find-lines-in-file-that-begin-with-any-listed-word:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-find-lines-in-file-that-begin-with-any-two-words-listed:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-flush-trace-log:
template-runtime-code-standard-action-begin

template-runtime-code-print-trace-output

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-gather-from-tagged-file-one-entry:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-gather-tagged-info-from-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-generate-counts-from-integer-to-integer:
template-runtime-code-standard-action-begin

$global_action_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_action_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_action_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__generate_counts_from_integer_to_integer( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-generate-list-of-all-dashrep-phrases:
template-runtime-code-standard-action-begin

$global_source_text = runtime-code-for-operand-number-one ;  <new_line>
@global_list_of_items_one = sort( keys( %global_dashrep_replacement ) ) ;  <new_line>
$global_count_of_items_appended = 0 ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = '' ;  <new_line>

foreach $global_phrase_name ( @global_list_of_items_one ) {  <new_line>
if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /^[^ ]+$/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne "four-hyphens" ) ) {  <new_line>

if ( $global_count_of_items_appended > 0 ) {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end .= $global_phrase_name ;  <new_line>
$global_count_of_items_appended ++ ;  <new_line>
}  <new_line>
}  <new_line>

runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-generate-list-of-files-in-current-read-directory:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-generate-list-of-folders-in-current-read-directory:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-generate-phrase-usage-counts:
template-runtime-code-standard-action-begin

&function__generate_phrase_usage_counts( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-cgi-information:
template-runtime-code-standard-action-begin

&function__get_cgi_information( ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-count-of-characters:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = length( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-count-of-words:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
&function__get_count_of_words( ) ;  <new_line>
runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-current-time-in-epoch-seconds:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = sprintf( "%d" , time ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-definitions-from-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-get-position-of-matching-text:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>

&function__get_position_of_matching_text( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-position-of-word:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>

&function__get_position_of_word( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-get-word-at-position:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_pointer_text = runtime-code-for-operand-number-two ;  <new_line>
&function__get_word_at_position( ) ;  <new_line>
runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-if-else:
# begin action if else  <new_line>
} else {  <new_line>
# end action if else  <new_line>
----
template-runtime-code-for-action-if-end:
# begin action if end  <new_line>
}  <new_line>
# end action if end  <new_line>
----
template-runtime-code-for-action-if-no-begin:
# begin action if no begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'no' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 ) {  <new_line>
# end action if no begin  <new_line>
----
template-runtime-code-for-action-if-yes-begin:
# begin action if yes begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'yes' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 ) {  <new_line>
# end action if yes begin  <new_line>
----
template-runtime-code-for-action-linewise-read-from-file-and-use-handler:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-modification-time-of-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-no-if-any-no:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-no-if-not-yes:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-not-recognized:
# $global_action_debug_line = '***** <dashrep_placeholder_phrase_being_defined> **** current-result-storage-position *** action name not recognized, so direct replacement *' . runtime-code-for-concatenated-all-operands ;  <new_line>
# print $global_action_debug_line . "\n" ;  <new_line>

runtime-code-storage-item-result = runtime-code-for-concatenated-all-operands ;  <new_line>
----
template-runtime-code-for-action-numeric-absolute:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( abs( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-add:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-cosine:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( cos( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-decrement:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) - 1 ) ;  <new_line>

runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-divide-by:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) / &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-two ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-equal-greater-less-compare:
template-runtime-code-standard-action-begin

$global_numeric_value_first = &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ;  <new_line>
$global_numeric_value_second = &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-two ) ;  <new_line>

if ( $global_numeric_value_first == $global_numeric_value_second ) {  <new_line>
runtime-code-storage-item-result = 'equal' ;  <new_line>
} elsif ( $global_numeric_value_first > $global_numeric_value_second ) {  <new_line>
runtime-code-storage-item-result = 'greater' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'less' ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-increment:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = &function_parameterized__convert_numeric_value_into_numeric_text( 1 + &function_parameterized__convert_numeric_text_into_numeric_value( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ) ;  <new_line>

runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-integer:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( int( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-logarithm-base-10:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( log( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) / log( 10.0 ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-logarithm-base-e:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( log( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-maximum:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-minimum:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-minus:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) - &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-two ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-multiply:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-odd-or-even:
template-runtime-code-standard-action-begin

$global_numeric_value_first = int( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ;  <new_line>
$global_numeric_value_second = $global_numeric_value_first - ( 2 * int( $global_numeric_value_first / 2 ) ) ;  <new_line>
if ( $global_numeric_value_second == 0 ) {  <new_line>
runtime-code-storage-item-result = "even" ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = "odd" ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-numeric-sine:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = &function_parameterized__convert_numeric_value_into_numeric_text( sin( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) ) ) ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-prepend-text-no-space:
template-runtime-code-standard-action-begin

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-prepend-text:
template-runtime-code-standard-action-begin

$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ne '' ) {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_source_text . ' ' . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_source_text ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = ' ' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-put-into-phrase:
template-runtime-code-standard-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_pointer_to_first_space = index( $global_concatenated_all_operands , ' ' ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = substr( $global_concatenated_all_operands , ( $global_pointer_to_first_space + 1 ) ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-rename-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-set-file-permission-public-read:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-size-of-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-trace-show-where:
template-runtime-code-for-every-action-begin

print TRACE_OUT 'current code location is: phrase-being-defined no-space ' . "\n" ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-trace-show:
template-runtime-code-standard-action-begin

if ( exists( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ) {  <new_line>
print TRACE_OUT 'phrase ' . runtime-code-for-operand-number-one . ' is: ' . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
} else {  <new_line>
print TRACE_OUT 'phrase ' . runtime-code-for-operand-number-one . ' is not defined' . "\n" ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-unchanged:
template-runtime-code-for-every-action-begin

runtime-code-storage-item-result = ' ' . '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-use-handler-with-each-word-in-phrase:
template-runtime-code-standard-action-begin

my $local_pointer_to_next_space ;  <new_line>
my $local_pointer_to_future_space ;  <new_line>
my $local_pointer_to_next_word ;  <new_line>
my $local_endless_loop_counter ;  <new_line>
my $local_endless_loop_counter_limit ;  <new_line>
my $length_of_text_in_word_list ; <new_line>

template-storage-item-containing-word-list-associated-with-loop = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
$local_pointer_to_next_space = -1 ;  <new_line>
$length_of_text_in_word_list = length( template-storage-item-containing-word-list-associated-with-loop ) ;  <new_line>

*---
# print "length of word list is " . $length_of_text_in_word_list . "\n" ;  <new_line>
---*

*---
# start ABABA loop, which has exit in middle of loop  <new_line>
---*

$local_endless_loop_counter = 0 ;  <new_line>
$local_endless_loop_counter_limit = int( ( $length_of_text_in_word_list / 2 ) ) + 10 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_endless_loop_counter ++ ;  <new_line>
if ( $local_endless_loop_counter > $local_endless_loop_counter_limit ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $local_pointer_to_next_space >= $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

*---
# start a second, inner, ABABA loop, which has exit in middle of loop  <new_line>
---*

$local_counter_number_of_adjacent_spaces = 0 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_counter_number_of_adjacent_spaces ++ ;  <new_line>
if ( $local_counter_number_of_adjacent_spaces > $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_future_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_space + 1 ) ;  <new_line>

*---
# print "future space at " . $local_pointer_to_future_space . "\n" ;  <new_line>
---*

*---
# exit from second, inner, ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
---*

if ( $local_pointer_to_future_space != $local_pointer_to_next_space + 1 ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_next_space = $local_pointer_to_future_space ;  <new_line>

}  *--- # end of second, inner, ABABA loop ---*  <new_line>

$local_pointer_to_next_word = $local_pointer_to_next_space + 1 ;  <new_line>

*---
# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>
---*

$local_pointer_to_next_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_word ) ;  <new_line>

*---
# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>
---*

if ( $local_pointer_to_next_space < 0 ) {  <new_line>
$local_pointer_to_next_space = $length_of_text_in_word_list ;  <new_line>
}  <new_line>

*---
# exit from ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
---*

if ( ( $local_pointer_to_next_word >= $local_pointer_to_next_space ) || ( $local_pointer_to_next_word < 0 ) || ( $local_pointer_to_next_space < 0 ) ) {  <new_line>
last ;  <new_line>
}  <new_line>

$global_word_to_use_in_handler = substr( template-storage-item-containing-word-list-associated-with-loop , $local_pointer_to_next_word , $local_pointer_to_next_space - $local_pointer_to_next_word ) ;  <new_line>

*---
# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>
# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>
# print "word to use in handler is " . $global_word_to_use_in_handler . "\n" ;  <new_line>
---*

code-get-or-put-phrase-definition-begin $global_string_word_to_use_in_handler code-get-or-put-phrase-definition-end = $global_word_to_use_in_handler ;  <new_line>
& no-space function-name-prefix no-space handler-name-with-underscores no-space ( ) ;  <new_line>

}  *--- # end of ABABA loop ---*  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-write-dashrep-definitions-listed-in-phrase-to-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-write-gathered-listed-items-to-end-of-file:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-yes-if-all-yes:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_concatenated_all_operands_modified = ' ' . $global_concatenated_all_operands . ' ' ;  <new_line>
$accumulated_remaining_text = '' ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>

while ( $pointer_to_next_match > 0 ) {  <new_line>
$accumulated_remaining_text .= substr( $global_concatenated_all_operands_modified , 0 , ( $pointer_to_next_match - 1 ) ) ;  <new_line>
$global_concatenated_all_operands_modified = substr( $global_concatenated_all_operands_modified , ( $pointer_to_next_match + 3 ) ) ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>
}  <new_line>

$accumulated_remaining_text .= ' ' . $global_concatenated_all_operands_modified ;  <new_line>
$accumulated_remaining_text =~ s/ //g ;  <new_line>

if ( length( $accumulated_remaining_text ) == 0 ) {  <new_line>
$global_target_text = 'yes' ;  <new_line>
} else {  <new_line>
$global_target_text = 'no' ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-any-yes:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-not-no:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-empty-phrase:
template-runtime-code-standard-action-begin

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>

if ( $global_yes == &function_parameterized__yes_or_no_empty( $global_source_text ) ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-yes-or-no-file-exists:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-yes-or-no-folder-exists:
template-runtime-code-file-related-action
----
template-runtime-code-for-action-yes-or-no-opposite:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-phrase-definitions:
template-runtime-code-standard-action-begin

if ( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end eq code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-words:
template-runtime-code-for-every-action-begin

if ( runtime-code-for-operand-number-one eq runtime-code-for-operand-number-two ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-word-is-in-phrase:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>

&function__yes_or_no_word_is_in_phrase( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-zero-one-multiple:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = 'multiple' ;  <new_line>

if ( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) <= 0 ) {  <new_line>
runtime-code-storage-item-result = 'zero' ;  <new_line>
} elsif ( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) == 1 ) {  <new_line>
runtime-code-storage-item-result = 'one' ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-action-zero-or-nonzero:
template-runtime-code-standard-action-begin

runtime-code-storage-item-result = 'nonzero' ;  <new_line>

if ( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) <= 0 ) {  <new_line>
runtime-code-storage-item-result = 'zero' ;  <new_line>
}  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-for-every-action-begin:
# $global_action_debug_line = '***** <dashrep_placeholder_phrase_being_defined> **** current-result-storage-position *** <dashrep_placeholder_action_name> ** number-of-operands *' . runtime-code-for-concatenated-all-operands ;  <new_line>
# print $global_action_debug_line . "\n" ;  <new_line>

*---
# <new_line>
---*
----
template-runtime-code-for-every-action-end:
*---
# print 'result: ' . runtime-code-storage-item-result . "\n" ;  <new_line>
# end of action <dashrep_placeholder_action_name><new_line>
---*
----
template-runtime-code-for-overdue-start-of-if-branch:
# begin overdue start of if branch  <new_line>
if ( 1 == 1 ) {  <new_line>
# end overdue start of if branch  <new_line>
----
template-runtime-code-for-overdue-terminate-if-branch:
# begin overdue end of if branch  <new_line>
}  <new_line>
# end overdue end of if branch  <new_line>
----
template-runtime-code-identify-phrase-found:
$global_yes_found_word{ runtime-code-word-within-source-text } = $global_yes ;  <new_line>
----
template-runtime-code-identify-phrases-all-found:
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>

template-runtime-code-identify-phrase-found

}  <new_line>
----
template-runtime-code-if-case-yes-phrase-found:
if ( exists( $global_yes_found_word{ substr( $global_source_text , $global_begin_position_for_word[ $global_word_number ] , $global_length_of_word[ $global_word_number ] ) } ) ) {  <new_line>
----
template-runtime-code-standard-action-begin:
template-runtime-code-for-every-action-begin

$global_number_of_operands = number-of-operands ;  <new_line>

runtime-code-check-operand-initialize

needed-operand-checks

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
----
template-runtime-code-standard-action-end:
} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-standard-action-with-minimum-operand-count:
template-runtime-code-for-every-action-begin

$global_source_text = runtime-code-for-concatenated-all-operands ;  <new_line>
&function__<dashrep_placeholder_action_name_with_underscores>( ) ;  <new_line>
runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-action:
template-runtime-code-standard-action-begin

$global_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__<dashrep_placeholder_action_name_with_underscores>( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-standard-action-end
----
template-runtime-code-store-result-for-case-error:
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error_' . $global_runtime_error_type . ': <dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>
----
