dashdef-copyright-notice:
All the code and text in this collection of Dashrep phrase definitions are (c) Copyright 2017 by the entity who owns the source code from which this object code was generated, and who is specified in a separate copyright statement within one of the following files within this collection. ALL RIGHTS RESERVED.
----
0-documentation-for-compiler:
Limitations:

* Cannot expand parameters within a named phrase if that phrase was not supplied to the compiler as source code.  In other words, if during runtime the compiled code imports (or generates) a new phrase with a new definition, and that definition includes parameter phrases, those parameter phrases will be be expanded as parameter phrases.  The static definition of such a phrase will get inserted, but the parameter brackets are ignored.

* Within parameter brackets, the operands that follow the action name must not expand in a way that effectively inserts a space. In other words, the counting of an action's operands is done during compilation, not during runtime.
----
append-output-segment-next:
[-append-text-no-space [-word-to-use-in-handler-] [-target-for-output-results-]-]
----
check-elapsed-time:
*---
[-put-into-phrase epoch-seconds-current-time  [-get-current-time-in-epoch-seconds-] -]
[-put-into-phrase elapsed-time  [-numeric-minus [-epoch-seconds-current-time-] [-epoch-seconds-starting-time-]-] -]


[-trace-show elapsed-time-]
---*
----
compile-source-code-finish:
[-copy-words-found-only-in-first-list list-of-phrase-definitions-complex dashrep-list-of-compiled-executable-phrases list-of-possible-new-executable-phrases-]

[-if-no-begin [-yes-or-no-empty-phrase warning-messages-]-]
[-append-text-no-space runtime-code-at-top-if-warning-message output-results-]
[-append-text-no-space warning-messages output-results-]
[-append-text-no-space new-empty-lines output-results-]
[-if-end-]

[-expand-text template-displayed-list-of-possible-new-executable-phrases displayed-list-of-possible-new-executable-phrases-]
----
compile-source-code-generate-output-results:
[-compile-source-code-initialize-]
[-convert-source-code-into-words-]

[-copy-from-phrase-append-to-file source-code-as-words [-debug-output-filename-]-]

[-clear-phrase phrase-being-defined-]
[-put-into-phrase yes-or-no-within-comment  no -]
[-use-handler-with-each-word-in-phrase filter-tokens-case-1 source-code-as-words-]
[-compile-source-code-finish-]
----
compile-source-code-initialize:
[-put-into-phrase local-or-batch-mode  local -]
[-put-into-phrase dashrep-time-limit  50000 -]
[-put-into-phrase dashrep-endless-loop-counter-limit  900000 -]
[-put-into-phrase epoch-seconds-starting-time  [-get-current-time-in-epoch-seconds-] -]

[-put-into-phrase debug-output-filename  output_debug_info.txt -]
[-delete-file [-debug-output-filename-]-]

[-define-special-strings-]

[-use-handler-with-each-word-in-phrase expand-one-template list-of-static-segments-need-to-expand-]
[-use-handler-with-each-word-in-phrase generate-runtime-code-using-quoted-string list-of-phrases-with-quoted-strings-]

[-assign-action-operand-characteristics-]
[-put-into-phrase current-storage-position  1001 -]

[-put-into-phrase filename-output-initializations-only  output_initializations_only.txt -]
[-put-into-phrase yes-or-no-export-delimited-definitions  yes -]
[-write-all-dashrep-definitions-to-file [-filename-output-initializations-only-]-]

[-expand-text list-of-template-functions output-results-all-runtime-functions-]
[-copy-from-phrase-append-to-file output-results-all-runtime-functions [-filename-output-standard-runtime-functions-]-]
----
convert-source-code-eliminate-one-space-directive:
[-if-no-begin [-yes-or-no-same-two-words 0 [-put-into-phrase either-zero-if-not-found-else-non-zero [-get-position-of-matching-text string-space-one-space-space source-code-as-words-]-]-]-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-one-space-no-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-no-space-one-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space-]
[-if-end-]
----
convert-source-code-into-words:
[-copy-and-replace source-code source-code-as-words string-space-end-of-line-here-space string-placeholder-special-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-end-of-line-here-space string-placeholder-special-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]
[-convert-source-code-replace-parameter-brackets-with-ambee-and-amenn-]
[-copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-to-combee-comenn-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-space-no-space-character-hyphen-no-space-space-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]

*--- need to do at least twice because of potential overlap ---*
[-put-into-phrase count-1-2  1 2 -]
[-use-handler-with-each-word-in-phrase convert-source-code-eliminate-one-space-directive count-1-2 -]
[-copy-and-replace source-code-as-words source-code-as-words string-space-one-space-space string-placeholder-for-space-one-space-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space character-space-]

[-copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-hyphens-into-defenns-]
[-copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-replacement-for-hyphen-here-]
[-copy-without-extra-spaces source-code-as-words source-code-as-words-]
[-copy-and-replace source-code-as-words source-code-as-lines character-space character-newline-]
----
convert-source-code-replace-parameter-brackets-with-ambee-and-amenn:
*---
[-trace-show source-code-as-words-]
---*

[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-open-bracket-dash string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-open-bracket-dash string-space-fen-ambee-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash string-space-amenn-fen-space-]

*--- do twice in case underscore is adjacent to both open and close parameter brackets ---*
[-copy-and-replace source-code-as-words source-code-as-words string-underscore-open-bracket-dash string-underscore-nospay-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-underscore-open-bracket-dash string-underscore-nospay-open-bracket-dash-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-underscore string-dash-close-bracket-nospay-underscore-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-underscore string-dash-close-bracket-nospay-underscore-]

[-copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash string-space-ambee-space-]
[-copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket string-space-amenn-space-]
----
create-new-result-storage-position:
[-put-into-phrase storage-type  result -]
[-create-new-storage-position-]
----
create-new-storage-position:
[-numeric-increment current-storage-position-]
[-clear-phrase contents-at-storage-position-[-current-storage-position-]-]
[-copy-text storage-type storage-type-at-storage-position-[-current-storage-position-]-]
[-copy-text current-storage-position current-[-storage-type-]-storage-position-]
----
create-new-text-storage-position:
[-put-into-phrase storage-type  text -]
[-create-new-storage-position-]
----
expand-one-template:
[-expand-text template-[-word-to-use-in-handler-] [-word-to-use-in-handler-]-]
----
filter-tokens-case-1:
[-copy-text word-to-use-in-handler current-token-]
[-copy-words-found-in-both-lists current-token list-combee-comenn-defenn non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-filter-tokens-case-2-]
[-if-else-]
[-filter-tokens-case-[-non-empty-if-valid-token-handler-name-]-]
[-if-end-]
----
filter-tokens-case-2:
[-if-no-begin [-yes-or-no-within-comment-]-]
[-filter-tokens-case-3-]
[-if-else-]
*---
[-append-text current-token comments-ignored-]
---*
[-if-end-]
----
filter-tokens-case-3:
[-copy-words-found-in-both-lists current-token list-ambee-amenn non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-filter-tokens-case-4-]
[-if-else-]
[-filter-tokens-case-[-non-empty-if-valid-token-handler-name-]-]
[-if-end-]
----
filter-tokens-case-4:
[-if-no-begin [-yes-or-no-empty-phrase phrase-being-defined-]-]
[-append-text current-token list-of-tokens-in-current-definition-]
[-if-else-]
[-copy-text current-token phrase-being-defined-]
[-remove-colon-if-at-end-of-phrase-being-defined-]
[-if-end-]
----
filter-tokens-case-ambee:
[-numeric-increment count-of-ambee-tokens-]
[-append-text string-ambee list-of-tokens-in-current-definition-]
----
filter-tokens-case-amenn:
[-numeric-increment count-of-amenn-tokens-]
[-append-text string-amenn list-of-tokens-in-current-definition-]
----
filter-tokens-case-combee:
[-put-into-phrase yes-or-no-within-comment  yes -]
----
filter-tokens-case-comenn:
[-put-into-phrase yes-or-no-within-comment  no -]
----
filter-tokens-case-defenn-case-balanced-ambee-amenn:
[-if-no-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-numeric-add [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-] 0 -]-]-]
[-handle-simple-definition-]
[-if-else-]
[-handle-definition-contains-ambee-amenn-]
[-if-end-]
----
filter-tokens-case-defenn:
[-if-yes-begin [-yes-or-no-same-two-words equal [-numeric-equal-greater-less-compare [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-]-]-]
[-filter-tokens-case-defenn-case-balanced-ambee-amenn-]
[-if-else-]
[-handle-non-zero-count-of-ambee-minus-amenn-tokens-]
[-if-end-]

[-clear-phrase phrase-being-defined-]
[-put-into-phrase yes-or-no-within-comment  no -]
[-clear-phrase list-of-tokens-in-current-definition-]
[-put-into-phrase count-of-ambee-tokens  0 -]
[-put-into-phrase count-of-amenn-tokens  0 -]
[-generate-list-of-all-dashrep-phrases list-of-all-dashrep-phrases-]
[-copy-words-that-begin-with-listed-words list-of-all-dashrep-phrases list-of-phrases-to-delete list-of-temporary-phrase-name-prefixes-]
[-delete-listed-phrases list-of-phrases-to-delete-]
----
generate-code-for-one-action:
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name action-name-]
[-copy-and-replace action-name action-name-with-underscores character-hyphen character-underscore-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name-with-underscores action-name-with-underscores-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-phrase-being-defined phrase-being-defined-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-character-hyphen-in-brackets character-hyphen-]
*--- reminder: do not modify apostrophes or backslashes here because those characters need to appear in the code ---*
[-copy-from-phrase-append-to-file runtime-code-for-parameter-phrase [-filename-output-results-all-compiled-functions-]-]
[-copy-text current-result-storage-position higher-result-storage-position-]
[-recursion-stack-pop-]
[-copy-text runtime-code-storage-item-reference-before-pointer higher-result-storage-operand-]
[-append-text-no-space higher-result-storage-position higher-result-storage-operand-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer higher-result-storage-operand-]
[-append-text higher-result-storage-operand list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
generate-runtime-code-for-phrase-definition-simple:
[-copy-text code-phrase-definition-simple-part-1 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-2 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space phrase-being-defined runtime-code-for-phrase-definition-simple-]
[-append-text-no-space code-phrase-definition-simple-part-3 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-4 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space list-of-tokens-in-current-definition-quotable runtime-code-for-phrase-definition-simple-]
[-append-text-no-space code-phrase-definition-simple-part-5 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-6 runtime-code-for-phrase-definition-simple-]
[-append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple-]
[-append-text code-phrase-definition-simple-part-7 runtime-code-for-phrase-definition-simple-]
----
generate-runtime-code-function-branch:
[-copy-text code-function-branch-part-1 runtime-code-function-branch-]
[-append-text-no-space phrase-being-defined runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-2 runtime-code-function-branch-]
[-append-text-no-space phrase-being-defined-with-underscores runtime-code-function-branch-]
[-append-text-no-space code-function-branch-part-3 runtime-code-function-branch-]
----
generate-runtime-code-using-quoted-string:
[-numeric-increment storage-item-pointer-]
[-copy-text storage-item-pointer storage-item-pointer-for-[-word-to-use-in-handler-]-]
[-copy-text code-quoted-string-storage-item-part-1 generated-runtime-code-]
[-append-text-no-space storage-item-pointer generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-2 generated-runtime-code-]
[-append-text template-quoted-[-word-to-use-in-handler-] generated-runtime-code-]
[-append-text code-quoted-string-storage-item-part-3 generated-runtime-code-]
[-append-text-no-space word-to-use-in-handler generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-4 generated-runtime-code-]
[-append-text-no-space storage-item-pointer generated-runtime-code-]
[-append-text-no-space code-quoted-string-storage-item-part-5 generated-runtime-code-]
[-append-text-no-space generated-runtime-code output-results-all-storage-items-]
----
generate-storage-for-current-text:
[-create-new-text-storage-position-]
[-copy-text code-for-text-storage-position-part-1 runtime-code-for-storage-in-current-definition-]
[-append-text-no-space current-text-storage-position runtime-code-for-storage-in-current-definition-]
[-append-text code-for-text-storage-position-part-2 runtime-code-for-storage-in-current-definition-]
[-copy-and-replace current-text current-text-quotable character-apostrophe string-placeholder-special-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-apostrophe-within-quoted-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-apostrophe character-apostrophe-]
[-copy-and-replace current-text-quotable current-text-quotable character-backslash string-placeholder-special-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-backslash-within-quoted-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-backslash character-backslash-]
[-copy-and-replace current-text-quotable current-text-quotable string-apostrophe-apostrophe-space-period-space empty-text-]
[-copy-and-replace current-text-quotable current-text-quotable string-space-period-space-apostrophe-apostrophe empty-text-]
[-append-text-no-space current-text-quotable runtime-code-for-storage-in-current-definition-]
[-append-text-no-space code-for-text-storage-position-part-3 runtime-code-for-storage-in-current-definition-]
[-copy-from-phrase-append-to-file runtime-code-for-storage-in-current-definition [-filename-output-results-all-definition-items-]-]
----
get-all-operands:
[-copy-text digit-0 number-of-operands-]
[-copy-text list-of-operands-for-result-storage-position-[-current-result-storage-position-] list-of-operands-raw-]
[-copy-without-extra-spaces list-of-operands-raw list-of-operands-raw-]
[-copy-and-replace list-of-operands-raw list-of-operands-for-counting string-space-fen-space string-placeholder-fen-]
[-copy-and-replace list-of-operands-for-counting list-of-operands-for-counting string-space-nospay-space string-placeholder-nospay-]
[-put-into-phrase number-of-operands [-get-count-of-words list-of-operands-for-counting-]-]
[-copy-text list-of-operands-for-counting operand-or-operands-]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-concatenated-all-operands-]

[-if-yes-begin [-yes-or-no-empty-phrase runtime-code-for-concatenated-all-operands-]-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-concatenated-all-operands-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 1 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 1 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-one-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-one-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 2 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 2 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-two-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-two-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 3 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 3 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-three-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-three-]
[-if-end-]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-number-of-operands-] 4 -]-]-]
[-copy-word-at-position list-of-operands-for-counting operand-or-operands 4 -]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-operand-number-four-]
[-if-else-]
[-copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-four-]
[-if-end-]
----
get-operand-character-at-adjacent-position:
[-copy-characters-from-position-to-position operand-or-operands adjacent-character [-word-to-use-in-handler-] [-word-to-use-in-handler-]-]
[-append-text adjacent-character list-of-adjacent-characters-]
----
handle-definition-contains-ambee-amenn:
[-copy-and-replace phrase-being-defined phrase-being-defined-with-underscores character-hyphen character-underscore-]
[-copy-text list-of-tokens-in-current-definition list-of-tokens-in-complex-definition-]
[-copy-text character-space list-of-tokens-without-ambee-amenn-fen-]
[-append-text-no-space list-of-tokens-in-current-definition list-of-tokens-without-ambee-amenn-fen-]
[-append-text-no-space character-space list-of-tokens-without-ambee-amenn-fen-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-fen-space string-placeholder-special-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-special string-space-hyphen-space-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit-]
[-copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space-]
[-copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen-]

[-copy-text code-compiled-function-part-1 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-2 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-3 runtime-code-compiled-function-]
[-append-text list-of-tokens-in-current-definition runtime-code-compiled-function-]
[-append-text-no-space code-compiled-function-part-4 runtime-code-compiled-function-]
[-copy-from-phrase-append-to-file runtime-code-compiled-function [-filename-output-results-all-compiled-functions-]-]

[-copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-in-current-definition-]
[-handle-simple-definition-]
[-use-handler-with-each-word-in-phrase handle-token-next-case-1 list-of-tokens-in-complex-definition-]
[-copy-text phrase-name-storage-position-for-definition-number-[-current-definition-number-] phrase-name-storage-position-for-current-definition-]
[-copy-text text-storage-position-for-definition-number-[-current-definition-number-] text-storage-position-for-current-definition-]
[-copy-text storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-] storage-position-for-word-list-associated-with-current-result-storage-position-]
[-get-all-operands-]
[-copy-text code-compiled-function-part-5 runtime-code-compiled-function-]
[-append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function-]


[-trace-show list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]


[-append-text-no-space code-compiled-function-part-6 runtime-code-compiled-function-]
[-copy-from-phrase-append-to-file runtime-code-compiled-function [-filename-output-results-all-compiled-functions-]-]
[-generate-runtime-code-function-branch-]
[-copy-from-phrase-append-to-file runtime-code-function-branch [-filename-output-results-all-function-branches-]-]
[-clear-phrase phrase-being-defined-]
----
handle-fen-and-nospay-within-operand-or-operands:
[-copy-and-replace operand-or-operands operand-or-operands-step-1 character-space string-placeholder-special-]
[-copy-and-replace operand-or-operands-step-1 operand-or-operands-step-2 string-placeholder-fen runtime-code-between-items-for-concatenation-type-fen-]
[-copy-and-replace operand-or-operands-step-2 operand-or-operands-step-3 string-placeholder-nospay runtime-code-between-items-for-concatenation-type-nospay-]
[-copy-and-replace operand-or-operands-step-3 operand-or-operands string-placeholder-special runtime-code-inserted-separator-space-]

[-generate-positions-of-delimiter string-open-bracket-dash operand-or-operands pointers-to-delimiters-begin-]
[-numeric-vector-add-number pointers-to-delimiters-begin -1 pointers-to-just-before-delimiters-begin-]
[-generate-positions-of-delimiter string-dash-close-bracket operand-or-operands pointers-to-delimiters-end-]
[-numeric-vector-add-number pointers-to-delimiters-end 2 pointers-to-just-after-delimiters-end-]
[-copy-text pointers-to-just-before-delimiters-begin pointers-to-adjacent-characters-]
[-append-text pointers-to-just-after-delimiters-end pointers-to-adjacent-characters-]
[-use-handler-with-each-word-in-phrase get-operand-character-at-adjacent-position pointers-to-adjacent-characters-]
[-copy-words-unique-only list-of-adjacent-characters list-of-adjacent-characters-]
[-copy-words-found-only-in-first-list list-of-adjacent-characters character-hyphen list-of-adjacent-characters-]


[-trace-show operand-or-operands-]
[-trace-show pointers-to-delimiters-begin-]
[-trace-show pointers-to-delimiters-end-]
[-trace-show list-of-adjacent-characters-]
----
handle-non-zero-count-of-ambee-minus-amenn-tokens:
[-if-yes-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-count-of-ambee-tokens-] [-count-of-amenn-tokens-]-]-]-]
[-copy-text warning-ambee-amenn-imbalance-introduction warning-message-]
[-append-text phrase-being-defined warning-message-]
[-append-text warning-more-ambee-than-amenn-tokens warning-message-]
[-append-text-no-space warning-message warning-messages-]
[-if-else-]
[-copy-text warning-ambee-amenn-imbalance-introduction warning-message-]
[-append-text phrase-being-defined warning-message-]
[-append-text warning-more-amenn-than-ambee-tokens warning-message-]
[-append-text-no-space warning-message warning-messages-]
[-if-end-]
----
handle-simple-definition:
[-create-new-text-storage-position-]
[-copy-text current-text-storage-position pointer-storage-position-for-phrase-name-]
[-create-new-text-storage-position-]
[-copy-text current-text-storage-position pointer-storage-position-for-phrase-definition-]
[-copy-and-replace list-of-tokens-in-current-definition list-of-tokens-in-current-definition-quotable character-apostrophe string-placeholder-special-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-apostrophe-within-quoted-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-apostrophe character-apostrophe-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable character-backslash string-placeholder-special-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-backslash-within-quoted-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-backslash character-backslash-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-apostrophe-apostrophe-space-period-space empty-text-]
[-copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-space-period-space-apostrophe-apostrophe empty-text-]

[-trace-show list-of-tokens-in-current-definition-quotable-]

[-generate-runtime-code-for-phrase-definition-simple-]
[-copy-from-phrase-append-to-file runtime-code-for-phrase-definition-simple [-filename-output-results-all-definition-items-]-]
----
handle-token-ambee:
[-recursion-stack-push-]
[-create-new-result-storage-position-]
[-copy-text code-parameter-result-storage-part-1 runtime-code-for-parameter-result-storage-]
[-append-text-no-space current-result-storage-position runtime-code-for-parameter-result-storage-]
[-append-text code-parameter-result-storage-part-2 runtime-code-for-parameter-result-storage-]
[-copy-from-phrase-append-to-file runtime-code-for-parameter-result-storage [-filename-output-results-all-definition-items-]-]
[-clear-phrase action-name-at-storage-position-[-current-result-storage-position-]-]
[-append-text string-ambee definition-for-phrase-being-defined-]
----
handle-token-amenn-case-action-not-empty:
[-clear-phrase needed-operand-checks-]
[-append-text string-amenn definition-for-phrase-being-defined-]
[-copy-text current-result-storage-position storage-item-pointer-]
[-expand-text template-runtime-code-storage-item-with-pointer runtime-code-storage-item-result-]
[-copy-text action-name-at-storage-position-[-current-result-storage-position-] action-name-]
[-put-into-phrase yes-or-no-action-recognized  no -]

[-if-no-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-put-into-phrase yes-or-no-action-recognized  yes -]
[-if-end-]

[-if-no-begin [-yes-or-no-empty-phrase operand-checks-for-action-[-action-name-]-]-]
[-put-into-phrase yes-or-no-action-recognized  yes -]
[-copy-text operand-checks-for-action-[-action-name-] needed-operand-checks-]
[-if-end-]

[-clear-phrase runtime-code-for-parameter-phrase-]

[-if-yes-begin [-yes-or-no-action-recognized-]-]
[-handle-token-amenn-case-action-recognized-]
[-if-else-]
[-handle-token-amenn-case-executable-phrase-]
[-if-end-]

[-generate-code-for-one-action-]
----
handle-token-amenn-case-action-recognized:
[-if-yes-begin [-yes-or-no-empty-phrase handle-token-amenn-case-[-action-name-]-]-]
[-handle-token-amenn-case-action-standard-or-has-template-]
[-if-else-]
[-handle-token-amenn-case-[-action-name-]-]
[-if-end-]
----
handle-token-amenn-case-action-standard-or-has-template:
[-get-all-operands-]

[-if-yes-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-expand-text template-runtime-code-standard-action runtime-code-for-parameter-phrase-]
[-if-else-]
[-expand-text template-runtime-code-for-action-[-action-name-] runtime-code-for-parameter-phrase-]
[-if-end-]
----
handle-token-amenn-case-executable-phrase:
[-copy-text digit-0 number-of-operands-]
[-copy-text string-two-apostrophes runtime-code-for-concatenated-all-operands-]
[-numeric-increment current-accumulator-pointer-]
[-copy-text action-name current-text-]
[-generate-storage-for-current-text-]
[-copy-text runtime-code-storage-item-reference-before-pointer operand-instead-of-action-name-]
[-append-text-no-space current-text-storage-position operand-instead-of-action-name-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer operand-instead-of-action-name-]
[-copy-text operand-instead-of-action-name list-of-operands-raw-]
[-append-text list-of-operands-for-result-storage-position-[-current-result-storage-position-] list-of-operands-raw-]
[-copy-text operand-or-operands saved-operand-or-operands-]

[-trace-show list-of-operands-raw-]

[-copy-without-extra-spaces list-of-operands-raw operand-or-operands-]
[-copy-and-replace operand-or-operands operand-or-operands string-space-fen-space string-placeholder-fen-]
[-copy-and-replace operand-or-operands operand-or-operands string-space-nospay-space string-placeholder-nospay-]
[-handle-fen-and-nospay-within-operand-or-operands-]
[-copy-text operand-or-operands runtime-code-for-executable-phrase-]

[-trace-show operand-or-operands-]

[-copy-text saved-operand-or-operands operand-or-operands-]
[-expand-text template-runtime-code-for-action-executable-phrase runtime-code-for-parameter-phrase-]
[-copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-code-for-executable-phrase runtime-code-for-executable-phrase-]
----
handle-token-amenn-case-expand-text:
[-numeric-increment current-accumulator-pointer-]
[-handle-token-amenn-case-standard-action-]
----
handle-token-amenn-case-standard-action:
[-get-all-operands-]

[-if-no-begin [-yes-or-no-empty-phrase template-runtime-code-for-action-[-action-name-]-]-]
[-expand-text template-runtime-code-for-action-[-action-name-] runtime-code-for-parameter-phrase-]
[-if-else-]
[-expand-text template-runtime-code-standard-action runtime-code-for-parameter-phrase-]
[-if-end-]
----
handle-token-amenn-case-use-handler-with-each-word-in-phrase:
[-create-new-text-storage-position-]
[-clear-phrase contents-at-storage-position-[-current-text-storage-position-]-]
[-copy-text current-text-storage-position storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-]-]
[-copy-text storage-position-for-word-list-associated-with-result-storage-position-[-current-result-storage-position-] storage-position-for-word-list-associated-with-loop-]
[-expand-text template-runtime-code-for-word-list-storage-position runtime-code-for-word-list-storage-position-]
[-copy-from-phrase-append-to-file runtime-code-for-word-list-storage-position [-filename-output-results-all-definition-items-]-]
[-get-all-operands-]
[-copy-word-at-position text-words-at-result-storage-position-[-current-result-storage-position-] handler-name 1 -]
[-copy-and-replace handler-name handler-name-with-underscores character-hyphen character-underscore-]
[-copy-word-at-position text-words-at-result-storage-position-[-current-result-storage-position-] phrase-name-for-list-of-words-for-loop 2 -]
[-expand-text template-runtime-code-for-action-use-handler-with-each-word-in-phrase runtime-code-for-parameter-phrase-]
----
handle-token-amenn:
[-if-no-begin [-yes-or-no-empty-phrase action-name-at-storage-position-[-current-result-storage-position-]-]-]
[-handle-token-amenn-case-action-not-empty-]
[-if-else-]
[-expand-text template-runtime-code-for-action-not-recognized runtime-code-for-parameter-phrase-]
[-generate-code-for-one-action-]
[-if-end-]

[-copy-from-phrase-append-to-file character-newline [-filename-output-results-all-definition-items-]-]
----
handle-token-fen:
[-append-text string-fen definition-for-phrase-being-defined-]
[-append-text string-fen list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
handle-token-next-case-1:
[-copy-text word-to-use-in-handler current-token-]
[-copy-words-found-in-both-lists current-token list-ambee-amenn-fen-nospay non-empty-if-valid-token-handler-name-]

[-if-yes-begin [-yes-or-no-empty-phrase non-empty-if-valid-token-handler-name-]-]
[-handle-token-next-case-2-]
[-if-else-]
[-handle-token-[-current-token-]-]
[-if-end-]
----
handle-token-next-case-2:
[-if-no-begin [-yes-or-no-empty-phrase phrase-being-defined-]-]
[-handle-token-next-case-3-]
[-if-else-]
[-handle-token-phrase-name-]
[-if-end-]
----
handle-token-next-case-3:
[-append-text current-token definition-for-phrase-being-defined-]

[-if-yes-begin [-yes-or-no-empty-phrase action-name-at-storage-position-[-current-result-storage-position-]-]-]
[-copy-text current-token action-name-at-storage-position-[-current-result-storage-position-]-]
[-if-else-]
[-handle-token-text-word-]
[-if-end-]
----
handle-token-nospay:
[-append-text string-nospay definition-for-phrase-being-defined-]
[-append-text string-nospay list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
handle-token-phrase-name:
[-copy-text current-token phrase-being-defined-]
[-numeric-increment current-definition-number-]
[-copy-text phrase-being-defined current-text-]
[-generate-storage-for-current-text-]
[-copy-text current-text-storage-position phrase-name-storage-position-for-definition-number-[-current-definition-number-]-]
[-clear-text current-text-]
[-generate-storage-for-current-text-]
[-copy-text current-text-storage-position text-storage-position-for-definition-number-[-current-definition-number-]-]
[-copy-text current-text-storage-position current-result-storage-position-]
[-clear-phrase list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
[-clear-phrase recursion-stack-]
[-recursion-stack-push-]
[-copy-text current-definition-number phrase-number-for-phrase-name-[-phrase-being-defined-]-]
[-copy-text phrase-being-defined phrase-name-for-phrase-number-[-current-definition-number-]-]
[-clear-phrase definition-for-phrase-being-defined-]
----
handle-token-text-word:
[-copy-text current-token current-text-]
[-generate-storage-for-current-text-]
[-append-text current-text contents-at-storage-position-[-current-text-storage-position-]-]
[-append-text current-text text-words-at-result-storage-position-[-current-result-storage-position-]-]
[-copy-text runtime-code-storage-item-reference-before-pointer current-storage-operand-]
[-append-text-no-space current-text-storage-position current-storage-operand-]
[-append-text-no-space runtime-code-storage-item-reference-after-pointer current-storage-operand-]
[-append-text current-storage-operand list-of-operands-for-result-storage-position-[-current-result-storage-position-]-]
----
initialize-input-output-files:
*--- reminder: avoid backslashs here because they get interpreted in the runtime code ---*
[-copy-text character-period dashrep-path-prefix-for-file-writing-]
[-append-text-no-space character-backslash dashrep-path-prefix-for-file-writing-]
[-copy-text dashrep-path-prefix-for-file-writing dashrep-path-prefix-for-file-reading-]

[-put-into-phrase input-filename  input_to_dashrep_compiler.txt -]
[-put-into-phrase filename-output-results-from-compiler  output_from_dashrep_compiler.txt -]
[-delete-file [-filename-output-results-from-compiler-]-]
[-put-into-phrase filename-output-standard-runtime-functions  output_compiler_standard_runtime_functions.txt -]
[-delete-file [-filename-output-standard-runtime-functions-]-]
[-put-into-phrase filename-output-results-all-definition-items  output_compiler_all_definition_items.txt -]
[-delete-file [-filename-output-results-all-definition-items-]-]
[-put-into-phrase filename-output-results-all-function-branches  output_compiler_all_function_branches.txt -]
[-delete-file [-filename-output-results-all-function-branches-]-]
[-put-into-phrase filename-output-results-all-compiled-functions  output_compiler_all_compiled_functions.txt -]
[-delete-file [-filename-output-results-all-compiled-functions-]-]
[-put-into-phrase filename-output-all-definitions-complex  output_compiler_all_tokens_for_definitions_complex.txt -]
[-delete-file [-filename-output-all-definitions-complex-]-]
[-put-into-phrase filename-output-all-phrase-names-complex  output_compiler_all_phrase_names_complex.txt -]
[-delete-file [-filename-output-all-phrase-names-complex-]-]
[-put-into-phrase filename-output-debug-trace-all-dashrep-definitions  output_compiler_debug_trace_all_definitions.txt -]
[-delete-file [-filename-output-debug-trace-all-dashrep-definitions-]-]
----
recursion-stack-pop-case-empty:
[-put-into-phrase current-result-storage-position  0 -]
[-expand-text template-warning-more-amenn-than-ambee-tokens warning-message-]
[-append-text-no-space warning-message warning-messages-]
----
recursion-stack-pop-case-not-empty:
[-if-yes-begin [-yes-or-no-same-two-words greater [-numeric-equal-greater-less-compare [-position-top-of-stack-] 1 -]-]-]
[-copy-word-at-position recursion-stack current-result-storage-position [-position-top-of-stack-]-]
[-numeric-decrement position-top-of-stack-]
[-copy-words-from-position-to-position recursion-stack recursion-stack 1 [-position-top-of-stack-]-]
[-if-else-]
[-copy-text recursion-stack current-result-storage-position-]
[-clear-phrase recursion-stack-]
[-if-end-]
----
recursion-stack-pop:
[-put-into-phrase position-top-of-stack  [-get-count-of-words recursion-stack-] -]

[-if-no-begin [-yes-or-no-same-two-words less [-numeric-equal-greater-less-compare [-position-top-of-stack-] 1 -]-]-]
[-recursion-stack-pop-case-not-empty-]
[-if-else-]
[-recursion-stack-pop-case-empty-]
[-if-end-]

*---
[-recursion-stack-show-]
---*
----
recursion-stack-push:
[-append-text current-result-storage-position recursion-stack-]

*---
[-recursion-stack-show-]
---*
----
remove-colon-if-at-end-of-phrase-being-defined:
[-put-into-phrase phrase-length  [-get-count-of-characters phrase-being-defined-] -]
[-copy-characters-from-position-to-position phrase-being-defined possible-colon [-phrase-length-] [-phrase-length-]-]

[-if-yes-begin [-yes-or-no-same-two-phrase-definitions possible-colon character-colon-]-]
[-copy-characters-from-position-to-position phrase-being-defined phrase-being-defined 1 [-numeric-minus [-phrase-length-] 1 -]-]
[-if-end-]
----
run-compiler:
[-initialize-input-output-files-]
[-copy-from-file-to-phrase [-input-filename-] source-code-]
[-compile-source-code-generate-output-results-]
[-put-into-phrase yes-or-no-export-delimited-definitions  yes -]
[-write-results-to-output-file-]
[-write-all-dashrep-definitions-to-file [-filename-output-debug-trace-all-dashrep-definitions-]-]

[-check-elapsed-time-]
----
start-here:
[-run-compiler-]
----
write-results-to-output-file:
[-copy-from-phrase-append-to-file segment-initialize-begin [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file initialize-global-arrays [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file initialize-global-variables [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file output-results-all-storage-items [-filename-output-results-from-compiler-]-]

[-copy-text dashrep-path-prefix-for-file-reading saved-directory-]
[-put-into-phrase dashrep-path-prefix-for-file-reading  .\compiler_source\5_functions_from_interpreter\ -]
[-put-into-phrase filename-runtime-code-from-interpreter  runtime-code-initializations-needed-by-interpreter-code.txt -]
[-copy-append-file-to-file [-filename-runtime-code-from-interpreter-] [-filename-output-results-from-compiler-]-]
[-copy-text saved-directory dashrep-path-prefix-for-file-reading-]

[-copy-from-phrase-append-to-file segment-initialize-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-definition-items-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-definition-items-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-definition-items-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-branch-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-function-branches-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-branch-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-compiled-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-results-all-compiled-functions-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-functions-compiled-end [-filename-output-results-from-compiler-]-]

[-copy-from-phrase-append-to-file segment-functions-runtime-begin [-filename-output-results-from-compiler-]-]
[-copy-append-file-to-file [-filename-output-standard-runtime-functions-] [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file segment-functions-runtime-middle [-filename-output-results-from-compiler-]-]

[-copy-text dashrep-path-prefix-for-file-reading saved-directory-]
[-put-into-phrase dashrep-path-prefix-for-file-reading  .\compiler_source\5_functions_from_interpreter\ -]
[-put-into-phrase filename-runtime-code-from-interpreter  runtime-code-functions-from-interpreter.txt -]
[-copy-append-file-to-file [-filename-runtime-code-from-interpreter-] [-filename-output-results-from-compiler-]-]
[-copy-text saved-directory dashrep-path-prefix-for-file-reading-]

[-copy-from-phrase-append-to-file segment-functions-runtime-end [-filename-output-results-from-compiler-]-]
[-copy-from-phrase-append-to-file displayed-list-of-possible-new-executable-phrases [-filename-output-results-from-compiler-]-]
----
assign-action-operand-characteristics:
[-put-into-phrase operand-checks-for-action-append-multiple-from-phrases-named-in-pattern  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-append-multiple-in-phrase-to-phrases-named-in-pattern  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-append-new-line  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-append-repeatedly-using-count  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-append-text  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-append-text-no-space  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-clear-listed-phrases  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-clear-phrase  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-convert-from-spoken-dashrep-code  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-convert-into-spoken-dashrep-code  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-convert-unicode-to-html-entities  check-operand-count-is-one check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-and-remove-attributes-from-xml-tags  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-and-replace  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-and-replace-using-paired-listed-words  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-copy-append-file-to-file  check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-file-name -]
[-put-into-phrase operand-checks-for-action-copy-characters-from-position-to-position  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer check-operand-four-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-copy-from-columns-in-file-to-column-lists  check-operand-count-is-two check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-copy-from-columns-in-file-to-named-phrases  check-operand-count-is-three check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-copy-from-file-to-phrase  check-operand-count-is-two check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-from-phrase-append-to-file  check-operand-count-is-two check-operand-one-is-phrase-not-empty check-operand-two-is-file-name -]
[-put-into-phrase operand-checks-for-action-copy-initial-caps  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-listed-words-to-phrases-named-in-pattern  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-lowercase-only  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-text  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-uppercase-only  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-without-extra-spaces  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-word-at-position  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-copy-words-found-in-both-lists  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-found-in-either-list  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-found-only-in-first-list  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-from-position-to-position  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer check-operand-four-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-copy-words-order-reversed  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-rearrange-using-order-sort-alphabetic  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-rearrange-using-order-sort-numeric  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-sort-alphabetic  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-sort-numeric  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-that-begin-with-listed-words  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-that-begin-with-text  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-that-contain-listed-words  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-words-unique-only  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-copy-zero-pad-left-to-length  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-create-empty-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-create-empty-sub-folder  check-operand-count-is-one check-operand-one-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-decode-from-cgi-parameter  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-delete-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-delete-listed-phrases  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-encode-as-cgi-parameter  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-expand-parameters-only  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-expand-text  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-find-line-in-file-that-begins-with-text  check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-find-lines-in-file-that-begin-with-any-listed-word  check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-find-lines-in-file-that-begin-with-any-two-words-listed  check-operand-count-is-three check-operand-one-is-file-name check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-gather-from-tagged-file-one-entry  check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-gather-tagged-info-from-file  check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-counts-from-integer-to-integer  check-operand-count-is-three check-operand-one-is-positive-integer check-operand-two-is-positive-integer check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-every-ordered-pairwise-combination-of-words  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-every-pairwise-combination-of-words  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-list-of-all-dashrep-phrases  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-list-of-files-in-current-read-directory  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-list-of-folders-in-current-read-directory  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-phrase-usage-counts  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-positions-of-delimiter  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-positions-of-first-matching-delimiter-after-listed-positions  check-operand-count-is-four check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name check-operand-four-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-generate-positions-of-listed-words  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-characters-from-position-to-position  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-positive-integer check-operand-three-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-get-count-of-characters  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-count-of-words  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-current-time-in-epoch-seconds  check-operand-count-is-zero -]
[-put-into-phrase operand-checks-for-action-get-definitions-from-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-get-phrase-definition-without-expanding  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-position-of-matching-text  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-position-of-word  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-get-word-at-position  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-insert-angle-bracketed-definitions  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-insert-codeview-tags  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-linewise-read-from-file-and-use-handler  check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-modification-time-of-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-numeric-absolute  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-cosine  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-decrement  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-divide-by  check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-equal-greater-less-compare  check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-increment  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-integer  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-logarithm-base-10  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-logarithm-base-e  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-minus  check-operand-count-is-two check-operand-one-is-real-number check-operand-two-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-odd-or-even  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-sine  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-numeric-two-dimensional-sort-into-columns-and-rows  check-operand-count-is-four check-operand-one-is-positive-integer check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-numeric-vector-absolutes  check-operand-count-is-two check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vector-add-number  check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-real-number check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vector-integers  check-operand-count-is-two check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vector-multiply-by-number  check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-real-number check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vectors-add  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vectors-divide-by  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-vectors-from-delta-values-calculate-distances  check-operand-count-is-three check-operand-one-is-phrase-not-empty check-operand-two-is-phrase-not-empty check-operand-three-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-numeric-vectors-multiply  check-operand-count-is-three check-operand-one-is-phrase-name check-operand-two-is-phrase-name check-operand-three-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-numeric-y-map-tile-number-based-on-latitude  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-prepend-text  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-prepend-text-no-space  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-rename-file  check-operand-count-is-two check-operand-one-is-file-name check-operand-two-is-file-name -]
[-put-into-phrase operand-checks-for-action-set-file-permission-public-read  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-size-of-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-split-epoch-seconds-into-named-components  check-operand-count-is-one check-operand-one-is-real-number -]
[-put-into-phrase operand-checks-for-action-split-epoch-seconds-into-named-components-for-zero-meridian  check-operand-count-is-one check-operand-one-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-trace-show  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-use-handler-with-each-word-in-phrase  check-operand-count-is-one check-operand-one-is-phrase-not-empty check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-write-all-dashrep-definitions-to-file  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-write-dashrep-definitions-listed-in-phrase-to-file  check-operand-count-is-two check-operand-one-is-phrase-not-empty check-operand-two-is-file-name -]
[-put-into-phrase operand-checks-for-action-write-gathered-listed-items-to-end-of-file  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-file-name -]
[-put-into-phrase operand-checks-for-action-xml-move-attributes-into-tag-elements  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-yes-or-no-empty-phrase  check-operand-count-is-one check-operand-one-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-yes-or-no-file-exists  check-operand-count-is-one check-operand-one-is-file-name -]
[-put-into-phrase operand-checks-for-action-yes-or-no-folder-exists  check-operand-count-is-one check-operand-one-is-phrase-not-empty -]
[-put-into-phrase operand-checks-for-action-yes-or-no-same-two-phrase-definitions  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-yes-or-no-word-is-in-phrase  check-operand-count-is-two check-operand-one-is-phrase-name check-operand-two-is-phrase-name -]
[-put-into-phrase operand-checks-for-action-zero-one-multiple  check-operand-count-is-one check-operand-one-is-positive-integer -]
[-put-into-phrase operand-checks-for-action-zero-or-nonzero  check-operand-count-is-one check-operand-one-is-positive-integer -]
----
build-paired-replacements-for-converting-hyphens-into-defenns:
[-prepend-text string-defenn paired-replacements-for-converting-hyphens-into-defenns-]
[-prepend-text string-of-hyphens paired-replacements-for-converting-hyphens-into-defenns-]
[-prepend-text-no-space character-hyphen string-of-hyphens-]
----
build-paired-replacements-for-converting-to-combee-comenn:
[-prepend-text-no-space character-hyphen string-hyphens-and-asterisk-]
[-append-text-no-space character-hyphen string-asterisk-and-hyphens-]
[-prepend-text string-comenn paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-hyphens-and-asterisk paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-combee paired-replacements-for-converting-to-combee-comenn-]
[-prepend-text string-asterisk-and-hyphens paired-replacements-for-converting-to-combee-comenn-]
----
character-apostrophe:
'
----
character-backslash:
\
----
character-close-angle-bracket:
>
----
character-close-bracket:
]
----
character-colon:
:
----
character-e:
e
----
character-equal-sign:
=
----
character-f:
f
----
character-n:
n
----
character-open-angle-bracket:
<
----
character-open-bracket:
[
----
character-period:
.
----
character-pound-sign:
#
----
character-quotation-mark:
"
----
character-semicolon:
;
----
character-underscore:
_
----
check-operand-count-is-four:
runtime-code-check-operand-count-before-number 4 runtime-code-check-operand-count-after-number
----
check-operand-count-is-one:
runtime-code-check-operand-count-before-number 1 runtime-code-check-operand-count-after-number
----
check-operand-count-is-three:
runtime-code-check-operand-count-before-number 3 runtime-code-check-operand-count-after-number
----
check-operand-count-is-two:
runtime-code-check-operand-count-before-number 2 runtime-code-check-operand-count-after-number
----
check-operand-count-is-zero:
runtime-code-check-operand-count-before-number 0 runtime-code-check-operand-count-after-number
----
check-operand-four-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-four runtime-code-check-operand-end
----
check-operand-four-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-four runtime-code-check-operand-end
----
check-operand-one-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-one runtime-code-check-operand-end
----
check-operand-one-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end
----
check-operand-one-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-one runtime-code-check-operand-end
----
check-operand-one-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-one runtime-code-check-operand-end
----
check-operand-one-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end
----
check-operand-three-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-three runtime-code-check-operand-end
----
check-operand-three-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-three runtime-code-check-operand-end
----
check-operand-three-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-three runtime-code-check-operand-end
----
check-operand-two-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-two runtime-code-check-operand-end
----
check-operand-two-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end
----
check-operand-two-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-two runtime-code-check-operand-end
----
check-operand-two-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-two runtime-code-check-operand-end
----
check-operand-two-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-two runtime-code-check-operand-end
----
count-of-ambee-tokens:
0
----
count-of-amenn-tokens:
0
----
current-accumulator-pointer:
1
----
dashes-long-line:
dashes-twenty no-space dashes-twenty no-space dashes-twenty
----
dashes-twenty:
four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens
----
define-special-strings-that-are-padded-with-spaces:
[-copy-text string-ambee string-space-ambee-space-]
[-prepend-text-no-space character-space string-space-ambee-space-]
[-append-text-no-space character-space string-space-ambee-space-]

[-copy-text string-amenn string-space-amenn-space-]
[-prepend-text-no-space character-space string-space-amenn-space-]
[-append-text-no-space character-space string-space-amenn-space-]

[-copy-text string-fen string-space-fen-space-]
[-prepend-text-no-space character-space string-space-fen-space-]
[-append-text-no-space character-space string-space-fen-space-]

[-copy-text string-hyphen-here string-space-hyphen-here-space-]
[-prepend-text-no-space character-space string-space-hyphen-here-space-]
[-append-text-no-space character-space string-space-hyphen-here-space-]

[-copy-text string-combee string-space-combee-space-]
[-prepend-text-no-space character-space string-space-combee-space-]
[-append-text-no-space character-space string-space-combee-space-]

[-copy-text string-comenn string-space-comenn-space-]
[-prepend-text-no-space character-space string-space-comenn-space-]
[-append-text-no-space character-space string-space-comenn-space-]

[-copy-text code-concat string-space-concat-space-]
[-prepend-text-no-space character-space string-space-concat-space-]
[-append-text-no-space character-space string-space-concat-space-]

[-copy-text string-one-space string-space-one-space-space-]
[-prepend-text-no-space character-space string-space-one-space-space-]
[-append-text-no-space character-space string-space-one-space-space-]

[-copy-text character-hyphen string-space-hyphen-space-]
[-prepend-text-no-space character-space string-space-hyphen-space-]
[-append-text-no-space character-space string-space-hyphen-space-]

[-copy-text string-two-apostrophes string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-space string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-period string-apostrophe-apostrophe-space-period-space-]
[-append-text-no-space character-space string-apostrophe-apostrophe-space-period-space-]

[-copy-text character-space string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space character-period string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space character-space string-space-period-space-apostrophe-apostrophe-]
[-append-text-no-space string-two-apostrophes string-space-period-space-apostrophe-apostrophe-]

[-copy-text string-end-of string-space-end-of-line-here-space-]
[-prepend-text-no-space character-space string-space-end-of-line-here-space-]
[-append-text-no-space character-hyphen string-space-end-of-line-here-space-]
[-append-text-no-space string-line-here string-space-end-of-line-here-space-]
[-append-text-no-space character-space string-space-end-of-line-here-space-]

[-copy-text string-code-nospay-between-spaces-without-padded-spaces string-code-nospay-between-spaces-]
[-prepend-text-no-space character-space string-code-nospay-between-spaces-]
[-append-text-no-space character-space string-code-nospay-between-spaces-]

[-copy-text string-nospay string-space-nospay-space-]
[-prepend-text-no-space character-space string-space-nospay-space-]
[-append-text-no-space character-space string-space-nospay-space-]
----
define-special-strings-that-cannot-be-spelled-in-full:
[-copy-text character-f string-fen-]
[-append-text-no-space character-e string-fen-]
[-append-text-no-space character-n string-fen-]

[-copy-text string-am string-ambee-]
[-append-text-no-space string-bee string-ambee-]

[-copy-text string-am string-amenn-]
[-append-text-no-space string-enn string-amenn-]

[-copy-text string-amenn string-amennfen-]
[-append-text-no-space string-fen string-amennfen-]

[-copy-text string-com string-combee-]
[-append-text-no-space string-bee string-combee-]

[-copy-text string-com string-comenn-]
[-append-text-no-space string-enn string-comenn-]

[-copy-text string-def string-defenn-]
[-append-text-no-space string-enn string-defenn-]

[-copy-text string-fen string-fenambee-]
[-append-text-no-space string-bee string-fenambee-]

[-copy-text string-no string-nospay-]
[-append-text-no-space string-spay string-nospay-]
----
define-special-strings-that-contain-hyphens:
[-copy-text string-hyphen string-hyphen-here-]
[-append-text-no-space character-hyphen string-hyphen-here-]
[-append-text-no-space string-here string-hyphen-here-]

[-copy-text string-character string-character-hyphen-]
[-append-text-no-space character-hyphen string-character-hyphen-]
[-append-text-no-space string-hyphen string-character-hyphen-]

[-copy-text string-no string-no-space-]
[-append-text-no-space character-hyphen string-no-space-]
[-append-text-no-space string-space string-no-space-]

[-copy-text string-one string-one-space-]
[-append-text-no-space character-hyphen string-one-space-]
[-append-text-no-space string-space string-one-space-]

[-copy-text string-new string-new-line-]
[-append-text-no-space character-hyphen string-new-line-]
[-append-text-no-space string-line string-new-line-]

[-copy-text string-empty string-empty-line-]
[-append-text-no-space character-hyphen string-empty-line-]
[-append-text-no-space string-line string-empty-line-]

[-copy-text string-empty string-empty-text-]
[-append-text-no-space character-hyphen string-empty-text-]
[-append-text-no-space string-text string-empty-text-]
----
define-special-strings:
[-define-special-strings-that-cannot-be-spelled-in-full-]
[-define-special-strings-that-contain-hyphens-]
[-define-special-strings-that-are-padded-with-spaces-]

[-copy-text character-open-bracket string-open-bracket-dash-]
[-append-text-no-space character-hyphen string-open-bracket-dash-]

[-copy-text character-hyphen string-dash-close-bracket-]
[-append-text-no-space character-close-bracket string-dash-close-bracket-]

*--- todo: revise following code to use above new code ---*

[-copy-text character-hyphen string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space character-close-bracket string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space character-hyphen string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space character-open-bracket string-dash-close-bracket-dash-open-bracket-dash-]
[-append-text-no-space character-hyphen string-dash-close-bracket-dash-open-bracket-dash-]

[-copy-text character-hyphen string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text-no-space character-close-bracket string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text string-fen string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text character-open-bracket string-dash-close-bracket-space-fen-space-open-bracket-dash-]
[-append-text-no-space character-hyphen string-dash-close-bracket-space-fen-space-open-bracket-dash-]

[-expand-text template-string-open-bracket-dash string-open-bracket-dash-]
[-expand-text template-string-dash-open-bracket-dash string-dash-open-bracket-dash-]
[-expand-text template-string-dash-close-bracket string-dash-close-bracket-]
[-expand-text template-string-dash-close-bracket-dash string-dash-close-bracket-dash-]
[-expand-text template-string-underscore-open-bracket-dash string-underscore-open-bracket-dash-]
[-expand-text template-string-dash-close-bracket-underscore string-dash-close-bracket-underscore-]
[-expand-text template-string-underscore-nospay-open-bracket-dash string-underscore-nospay-open-bracket-dash-]
[-expand-text template-string-dash-close-bracket-nospay-underscore string-dash-close-bracket-nospay-underscore-]

[-copy-text string-open-bracket-dash string-open-bracket-dash-open-bracket-dash-]
[-append-text-no-space string-open-bracket-dash string-open-bracket-dash-open-bracket-dash-]

[-copy-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]
[-append-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-dash-close-bracket-]
[-append-text-no-space string-dash-close-bracket string-dash-close-bracket-dash-close-bracket-]

[-copy-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]
[-append-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket-]

[-copy-text string-no-space string-space-no-space-character-hyphen-no-space-space-]
[-prepend-text-no-space character-space string-space-no-space-character-hyphen-no-space-space-]
[-append-text string-character-hyphen string-space-no-space-character-hyphen-no-space-space-]
[-append-text string-no-space string-space-no-space-character-hyphen-no-space-space-]
[-append-text-no-space character-space string-space-no-space-character-hyphen-no-space-space-]

[-copy-text string-fen string-space-fen-ambee-space-]
[-prepend-text-no-space character-space string-space-fen-ambee-space-]
[-append-text string-ambee string-space-fen-ambee-space-]
[-append-text-no-space character-space string-space-fen-ambee-space-]

[-copy-text string-amenn string-space-amenn-fen-space-]
[-prepend-text-no-space character-space string-space-amenn-fen-space-]
[-append-text string-fen string-space-amenn-fen-space-]
[-append-text-no-space character-space string-space-amenn-fen-space-]

[-copy-text character-period runtime-code-inserted-separator-space-]
[-append-text character-apostrophe runtime-code-inserted-separator-space-]
[-append-text character-apostrophe runtime-code-inserted-separator-space-]
[-append-text character-period runtime-code-inserted-separator-space-]
[-prepend-text-no-space character-space runtime-code-inserted-separator-space-]
[-append-text-no-space character-space runtime-code-inserted-separator-space-]

[-copy-text character-newline new-empty-line-]
[-copy-text new-empty-line new-empty-lines-]
[-append-text-no-space character-newline new-empty-lines-]

[-copy-text string-one-space string-space-one-space-no-space-space-]
[-prepend-text-no-space character-space string-space-one-space-no-space-space-]
[-append-text string-no-space string-space-one-space-no-space-space-]
[-append-text-no-space character-space string-space-one-space-no-space-space-]

[-copy-text string-no-space string-space-no-space-one-space-space-]
[-prepend-text-no-space character-space string-space-no-space-one-space-space-]
[-append-text string-one-space string-space-no-space-one-space-space-]
[-append-text-no-space character-space string-space-no-space-one-space-space-]

[-copy-text four-hyphens string-of-hyphens-]
[-generate-counts-from-integer-to-integer 2 8 list-2-to-8 -]
[-use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-hyphens-into-defenns list-2-to-8 -]

[-clear-phrase paired-replacements-for-converting-to-combee-comenn-]
[-put-into-phrase string-asterisk-and-hyphens  * -]
[-put-into-phrase string-hyphens-and-asterisk  * -]
[-append-text-no-space character-hyphen string-asterisk-and-hyphens-]
[-prepend-text-no-space character-hyphen string-hyphens-and-asterisk-]
[-generate-counts-from-integer-to-integer 2 8 list-2-to-8 -]
[-use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-to-combee-comenn list-2-to-8 -]

[-copy-text character-period runtime-code-between-items-for-concatenation-type-fen-]
[-prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen-]
[-append-text character-apostrophe runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-hyphen runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-apostrophe runtime-code-between-items-for-concatenation-type-fen-]
[-append-text character-period runtime-code-between-items-for-concatenation-type-fen-]
[-append-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen-]

[-copy-text character-period runtime-code-between-items-for-concatenation-type-nospay-]
[-prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay-]
[-append-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay-]

[-copy-text character-apostrophe runtime-code-concatenated-empty-]
[-append-text-no-space character-apostrophe runtime-code-concatenated-empty-]

[-copy-text string-combee list-combee-comenn-defenn-]
[-append-text string-comenn list-combee-comenn-defenn-]
[-append-text string-defenn list-combee-comenn-defenn-]

[-copy-text string-ambee list-ambee-amenn-]
[-append-text string-amenn list-ambee-amenn-]

[-copy-text list-ambee-amenn list-ambee-amenn-fen-nospay-]
[-append-text string-fen list-ambee-amenn-fen-nospay-]
[-append-text string-nospay list-ambee-amenn-fen-nospay-]

[-copy-text string-placeholder-prefix string-placeholder-character-apostrophe-]
[-append-text-no-space string-apostrophe string-placeholder-character-apostrophe-]
[-append-text-no-space character-close-angle-bracket string-placeholder-character-apostrophe-]

[-copy-text string-placeholder-prefix string-placeholder-character-backslash-]
[-append-text-no-space string-backslash string-placeholder-character-backslash-]
[-append-text-no-space character-close-angle-bracket string-placeholder-character-backslash-]

[-copy-text string-placeholder-prefix string-placeholder-action-name-]
[-append-text-no-space string-action string-placeholder-action-name-]
[-append-text-no-space character-underscore string-placeholder-action-name-]
[-append-text-no-space string-name string-placeholder-action-name-]
[-copy-text string-placeholder-action-name string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-action-name-]
[-append-text-no-space character-underscore string-placeholder-action-name-with-underscores-]
[-append-text-no-space string-with string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-underscore string-placeholder-action-name-with-underscores-]
[-append-text-no-space string-underscores string-placeholder-action-name-with-underscores-]
[-append-text-no-space character-close-angle-bracket string-placeholder-action-name-with-underscores-]

[-copy-text string-placeholder-prefix string-placeholder-omit-]
[-append-text-no-space string-omit string-placeholder-omit-]
[-append-text-no-space character-close-angle-bracket string-placeholder-omit-]

[-copy-text string-placeholder-prefix string-placeholder-fen-]
[-append-text-no-space string-fen string-placeholder-fen-]
[-append-text-no-space character-close-angle-bracket string-placeholder-fen-]

[-copy-text string-placeholder-prefix string-placeholder-nospay-]
[-append-text-no-space string-nospay string-placeholder-nospay-]
[-append-text-no-space character-close-angle-bracket string-placeholder-nospay-]

[-copy-text string-placeholder-prefix string-placeholder-special-]
[-append-text-no-space string-special string-placeholder-special-]
[-append-text-no-space character-close-angle-bracket string-placeholder-special-]

[-copy-text string-placeholder-prefix string-placeholder-phrase-being-defined-]
[-append-text-no-space string-phrase string-placeholder-phrase-being-defined-]
[-append-text-no-space character-underscore string-placeholder-phrase-being-defined-]
[-append-text-no-space string-being string-placeholder-phrase-being-defined-]
[-append-text-no-space character-underscore string-placeholder-phrase-being-defined-]
[-append-text-no-space string-defined string-placeholder-phrase-being-defined-]
[-append-text-no-space character-close-angle-bracket string-placeholder-phrase-being-defined-]

[-copy-text string-placeholder-prefix string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-code string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-for string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-executable string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-]
[-append-text-no-space string-phrase string-placeholder-code-for-executable-phrase-]
[-append-text-no-space character-close-angle-bracket string-placeholder-code-for-executable-phrase-]

[-copy-text character-open-angle-bracket string-placeholder-for-space-one-space-space-]
[-append-text-no-space string-one string-placeholder-for-space-one-space-space-]
[-append-text-no-space character-underscore string-placeholder-for-space-one-space-space-]
[-append-text-no-space string-space string-placeholder-for-space-one-space-space-]
[-append-text-no-space character-close-angle-bracket string-placeholder-for-space-one-space-space-]
----
digit-0:
0
----
digit-1:
1
----
endless-loop-counter-limit-version-for-use-handler-loop:
100000
----
export-defs-all-begin:
<all_defs_begin>
----
export-defs-all-end:
<all_defs_end>
----
export-defs-def-begin:
<defs_def_begin>
----
export-defs-def-end:
<defs_def_end>
----
export-defs-phrase-begin:
<def_phrase_begin>
----
export-defs-phrase-end:
<def_phrase_end>
----
list-of-phrases-with-quoted-strings:
empty-text
character-space
non-breaking-space
character-hyphen
four-hyphens
new-line
character-newline
empty-line
line-break
character-tab
character-open-square-bracket
character-close-square-bracket
comments-ignored
dashrep-undefined
dashrep-delete
dashrep-endless-loop-counter-limit
dashrep-gather-tag-begin
dashrep-gather-tag-end
dashrep-gather-tag-matching-id
dashrep-gather-tag-unique
dashrep-gather-tag-delete
dashrep-path-prefix-for-file-reading
dashrep-path-prefix-for-file-writing
dashrep-time-limit
dashrep-version
export-defs-all-begin
export-defs-all-end
export-defs-def-begin
export-defs-def-end
export-defs-phrase-begin
export-defs-phrase-end
linewise-input-line-from-file
linewise-input-line-count
list-of-compiled-executable-phrases
list-of-pointers-to-unique-words
list-of-unique-word-counts
numeric-map-tile-zoom
time-day-of-month
time-day-of-week
time-day-of-year
time-hour
time-minute
time-month-number
time-second
time-year
yes-or-no-indicate-line-endings
yes-or-no-permission-to-append-to-files
yes-or-no-permission-to-delete-or-overwrite-files
yes-or-no-use-two-spaces-as-column-delimiter
----
list-of-temporary-phrase-name-prefixes:
contents-at-storage-position-
action-name-at-storage-position-
storage-type-at-storage-position-
text-words-at-result-storage-position-
list-of-operands-for-result-storage-position-
storage-position-for-word-list-associated-with-result-storage-position-
----
object-code-copyright-notice:
(c) Copyright 2017 by the entity who owns the source code from which this object code was generated. ALL RIGHTS RESERVED.
----
storage-position-number:
0
----
string-action:
action
----
string-am:
am
----
string-apostrophe:
apostrophe
----
string-backslash:
backslash
----
string-bee:
bee
----
string-being:
being
----
string-character-hyphen-in-brackets:
<character_hyphen>
----
string-character:
character
----
string-code:
code
----
string-com:
com
----
string-def:
def
----
string-defined:
defined
----
string-definition:
definition
----
string-empty:
empty
----
string-end-of:
end-of
----
string-enn:
enn
----
string-executable-phrase:
executable-phrase
----
string-executable:
executable
----
string-for:
for
----
string-here:
here
----
string-hyphen:
hyphen
----
string-line-here:
line-here
----
string-line:
line
----
string-name:
name
----
string-new-line-in-brackets:
[new_line]
----
string-new:
new
----
string-no:
no
----
string-one:
one
----
string-phrase:
phrase
----
string-placeholder-prefix:
<dashrep_placeholder_
----
string-placeholder-space:
<character_space>
----
string-space:
space
----
string-spay:
spay
----
string-special:
special
----
string-text:
text
----
string-two-apostrophes:
''
----
string-underscores:
underscores
----
string-with:
with
----
string-yes:
yes
----
template-new-empty-line:
<new_line>
----
template-new-empty-lines:
<new_line>
<new_line>
----
template-quoted-character-close-square-bracket:
']'
----
template-quoted-character-hyphen:
'-'
----
template-quoted-character-newline:
"\n"
----
template-quoted-character-open-square-bracket:
'['
----
template-quoted-character-space:
' '
----
template-quoted-character-tab:
"\t"
----
template-quoted-comments-ignored:
''
----
template-quoted-dashrep-delete:
'delete_id'
----
template-quoted-dashrep-endless-loop-counter-limit:
'900000'
----
template-quoted-dashrep-gather-tag-begin:
'entry_begin'
----
template-quoted-dashrep-gather-tag-delete:
'delete_id'
----
template-quoted-dashrep-gather-tag-end:
'entry_end'
----
template-quoted-dashrep-gather-tag-matching-id:
'1'
----
template-quoted-dashrep-gather-tag-unique:
'url'
----
template-quoted-dashrep-language-yes:
'yes'
----
template-quoted-dashrep-language:
'yes'
----
template-quoted-dashrep-path-prefix-for-file-reading:
''
----
template-quoted-dashrep-path-prefix-for-file-writing:
''
----
template-quoted-dashrep-time-limit:
'1200'
----
template-quoted-dashrep-undefined:
'dashrep_undefined'
----
template-quoted-dashrep-version:
'5.00'
----
template-quoted-empty-line:
"\n\n"
----
template-quoted-empty-text:
''
----
template-quoted-export-defs-all-begin:
''
----
template-quoted-export-defs-all-end:
''
----
template-quoted-export-defs-def-begin:
''
----
template-quoted-export-defs-def-end:
''
----
template-quoted-export-defs-phrase-begin:
''
----
template-quoted-export-defs-phrase-end:
''
----
template-quoted-four-hyphens:
' no-space hyphen-here no-space hyphen-here no-space hyphen-here no-space hyphen-here no-space '
----
template-quoted-line-break:
'<br />'
----
template-quoted-linewise-input-line-count:
'0'
----
template-quoted-linewise-input-line-from-file:
''
----
template-quoted-list-of-compiled-executable-phrases:
''
----
template-quoted-list-of-pointers-to-unique-words:
''
----
template-quoted-list-of-unique-word-counts:
''
----
template-quoted-new-line:
"\n"
----
template-quoted-non-breaking-space:
' no-space &nbsp; no-space '
----
template-quoted-numeric-map-tile-zoom:
'1'
----
template-quoted-time-day-of-month:
'1'
----
template-quoted-time-day-of-week:
'1'
----
template-quoted-time-day-of-year:
'1'
----
template-quoted-time-hour:
'0'
----
template-quoted-time-minute:
'0'
----
template-quoted-time-month-number:
'1'
----
template-quoted-time-second:
'0'
----
template-quoted-time-year:
'1900'
----
template-quoted-yes-or-no-indicate-line-endings:
'yes'
----
template-quoted-yes-or-no-permission-to-append-to-files:
'yes'
----
template-quoted-yes-or-no-permission-to-delete-or-overwrite-files:
'yes'
----
template-quoted-yes-or-no-use-two-spaces-as-column-delimiter:
'no'
----
template-show-recursion-stack:
# recursion stack: recursion-stack ( no-space tokens-since-last-show-recursion-stack no-space )  <new_line>
----
template-string-dash-close-bracket-dash:
character-hyphen no-space character-close-square-bracket no-space character-hyphen
----
template-string-dash-close-bracket-nospay-underscore:
character-hyphen no-space character-close-square-bracket string-nospay character-underscore
----
template-string-dash-close-bracket-underscore:
character-hyphen no-space character-close-square-bracket no-space character-underscore
----
template-string-dash-close-bracket:
character-hyphen no-space character-close-square-bracket
----
template-string-dash-open-bracket-dash:
character-hyphen no-space character-open-square-bracket no-space character-hyphen
----
template-string-open-bracket-dash:
character-open-square-bracket no-space character-hyphen
----
template-string-underscore-nospay-open-bracket-dash:
character-underscore string-nospay character-open-square-bracket no-space character-hyphen
----
template-string-underscore-open-bracket-dash:
character-underscore no-space character-open-square-bracket no-space character-hyphen
----
template-warning-ambee-amenn-imbalance-introduction:
WARNING:  Definition of phrase
----
template-warning-more-ambee-than-amenn-tokens:
contains more am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
template-warning-more-amenn-than-ambee-tokens:
contains fewer am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
warning-wrong-number-of-required-operands-part-1:
WARNING:  Wrong number of required operands for action
----
warning-wrong-number-of-required-operands-part-2:
(required=
----
warning-wrong-number-of-required-operands-part-3:
, supplied=
----
warning-wrong-number-of-required-operands-part-4:
)  <new_line>
----
code-concat:
.
----
code-for-apostrophe-within-quoted-text:
' . "'" . '
----
code-for-backslash-within-quoted-text:
' . '\\' . '
----
code-for-text-storage-position-part-1:
my $storage_item__
----
code-for-text-storage-position-part-2:
= '
----
code-for-text-storage-position-part-3:
' ;
----
code-get-or-put-phrase-definition-begin:
$global_dashrep_replacement{
----
code-get-or-put-phrase-definition-end:
}
----
function-name-prefix:
function_compiled__ no-space
----
initialize-variable-begin:
$storage_item__ no-space
----
list-of-static-segments-need-to-expand:
segment-initialize-begin
segment-initialize-end
segment-definition-items-begin
segment-definition-items-end
segment-functions-runtime-begin
segment-functions-runtime-middle
segment-functions-runtime-end
segment-functions-compiled-begin
segment-functions-compiled-end
segment-branch-begin
segment-branch-end
initialize-global-arrays
initialize-global-variables
runtime-code-statement-end-with-new-line
warning-ambee-amenn-imbalance-introduction
warning-more-ambee-than-amenn-tokens
warning-more-amenn-than-ambee-tokens
runtime-code-at-top-if-warning-message
code-phrase-definition-simple-part-1
code-phrase-definition-simple-part-2
code-phrase-definition-simple-part-3
code-phrase-definition-simple-part-4
code-phrase-definition-simple-part-5
code-phrase-definition-simple-part-6
code-phrase-definition-simple-part-7
code-quoted-string-storage-item-part-1
code-quoted-string-storage-item-part-2
code-quoted-string-storage-item-part-3
code-quoted-string-storage-item-part-4
code-quoted-string-storage-item-part-5
code-function-branch-part-1
code-function-branch-part-2
code-function-branch-part-3
code-compiled-function-part-1
code-compiled-function-part-2
code-compiled-function-part-3
code-compiled-function-part-4
code-compiled-function-part-5
code-compiled-function-part-6
code-parameter-result-storage-part-1
code-parameter-result-storage-part-2
runtime-code-for-text-storage-position-end
----
list-of-template-functions:
template-function-parameterized-yes-or-no-positive-integer
template-function-parameterized-yes-or-no-real-number
template-function-parameterized-normalize-calculated-value
template-function-parameterized-yes-or-no-phrase-name
template-function-parameterized-yes-or-no-phrase-definition-not-empty
template-function-parameterized-yes-or-no-file-name
template-function-parameterized-get-list-of-words

template-function-point-to-words
template-function-remove-extra-spaces
template-function-get-count-of-words
template-function-get-word-at-position
template-function-numeric-add
template-function-numeric-multiply
template-function-numeric-maximum
template-function-numeric-minimum
----
runtime-code-check-operand-begin-is-file-name:
$global_yes_or_no = &function_parameterized__yes_or_no_file_name(
----
runtime-code-check-operand-begin-is-phrase-name:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_name(
----
runtime-code-check-operand-begin-is-phrase-not-empty:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_definition_not_empty(
----
runtime-code-check-operand-begin-is-positive-integer:
$global_yes_or_no = &function_parameterized__yes_or_no_positive_integer(
----
runtime-code-check-operand-begin-is-real-number:
$global_yes_or_no = &function_parameterized__yes_or_no_real_number(
----
runtime-code-check-operand-count-after-number:
) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-count-before-number:
if ( $global_number_of_operands !=
----
runtime-code-check-operand-end:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-initialize:
$global_yes_or_no_operand_error = $global_no ;  <new_line>
----
runtime-code-storage-item-reference-after-pointer:
----
runtime-code-storage-item-reference-before-pointer:
$storage_item__
----
string-code-nospay-between-spaces-without-padded-spaces:
. ' ' . '' . ' ' .
----
template-code-compiled-function-part-1:
# no-space dashes-long-line  <new_line>
sub function-name-prefix
----
template-code-compiled-function-part-2:
( ) {  <new_line>
$global_replacement_count_for_item_name{ '
----
template-code-compiled-function-part-3:
' } ++ ;  <new_line>
my $saved_accumulator_pointer = -1 ;  <new_line>
#
----
template-code-compiled-function-part-4:
<new_line>
----
template-code-compiled-function-part-5:
return '' ;  <new_line>
} # end of function-name-prefix
----
template-code-compiled-function-part-6:
<new_line>
----
template-code-function-branch-part-1:
} elsif ( $global_phrase_name_to_match eq '
----
template-code-function-branch-part-2:
' ) {  <new_line>
&function_compiled__
----
template-code-function-branch-part-3:
( ) ;
----
template-code-parameter-result-storage-part-1:
my template-storage-item-prefix
----
template-code-parameter-result-storage-part-2:
= '' ; # result storage
----
template-code-phrase-definition-simple-part-1:
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-2:
= '
----
template-code-phrase-definition-simple-part-3:
' ;  <new_line>
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-4:
= '
----
template-code-phrase-definition-simple-part-5:
' ; <new_line>
code-get-or-put-phrase-definition-begin initialize-variable-begin
----
template-code-phrase-definition-simple-part-6:
code-get-or-put-phrase-definition-end = initialize-variable-begin
----
template-code-phrase-definition-simple-part-7:
;
----
template-code-quoted-string-storage-item-part-1:
my initialize-variable-begin
----
template-code-quoted-string-storage-item-part-2:
=
----
template-code-quoted-string-storage-item-part-3:
;  <new_line>
$global_dashrep_replacement{ '
----
template-code-quoted-string-storage-item-part-4:
' } = initialize-variable-begin
----
template-code-quoted-string-storage-item-part-5:
;  <new_line>
----
template-displayed-list-of-possible-new-executable-phrases:
# no-space dashes-long-line  <new_line>
#  Possible new executable phrases (not yet declared)  <new_line>
<new_line>
# list-of-possible-new-executable-phrases  <new_line>
----
template-function-get-count-of-words:
# no-space dashes-long-line  <new_line>
# function__get_count_of_words  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__get_count_of_words( ) {  <new_line>
&function__point_to_words( ) ;  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_number_of_words . '' ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-word-at-position:
# no-space dashes-long-line  <new_line>
# function__get_word_at_position  <new_line>
#  <new_line>
#  Input is $global_source_text and $global_word_pointer  <new_line>
#  Output is $global_target_text  <new_line>
#  And $global_word_pointer is modified if it exceeds the word count  <new_line>
<new_line>

sub function__get_word_at_position( ) {  <new_line>
$global_default_text = '' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

if ( $global_number_of_words < $global_word_pointer ) {  <new_line>
$global_word_pointer = $global_number_of_words ;  <new_line>
}  <new_line>

$global_target_text = substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-add:
# no-space dashes-long-line  <new_line>
# function__numeric_add  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__numeric_add( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 0 ;  <new_line>
for ( $global_word_pointer = 1 ; $global_word_pointer <= $global_number_of_words ; $global_word_pointer ++ ) {  <new_line>
$global_current_word = substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value + $global_current_word + 0 ;  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-maximum:
# no-space dashes-long-line  <new_line>
# function__numeric_maximum  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__numeric_maximum( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = -999999999999 ;  <new_line>
for ( $global_word_pointer = 1 ; $global_word_pointer <= $global_number_of_words ; $global_word_pointer ++ ) {  <new_line>
$global_current_word = substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( ( $global_current_word + 0 ) > $global_calculated_value ) {  <new_line>
$global_calculated_value = ( $global_current_word + 0 ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-minimum:
# no-space dashes-long-line  <new_line>
# function__numeric_minimum  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__numeric_minimum( ) {  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 999999999999 ;  <new_line>
for ( $global_word_pointer = 1 ; $global_word_pointer <= $global_number_of_words ; $global_word_pointer ++ ) {  <new_line>
$global_current_word = substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( ( $global_current_word + 0 ) < $global_calculated_value ) {  <new_line>
$global_calculated_value = ( $global_current_word + 0 ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-multiply:
# no-space dashes-long-line  <new_line>
# function__numeric_multiply  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__numeric_multiply( ) {  <new_line>
$global_default_text = '1' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 1 ;  <new_line>
for ( $global_word_pointer = 1 ; $global_word_pointer <= $global_number_of_words ; $global_word_pointer ++ ) {  <new_line>
$global_current_word = substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value * ( $global_current_word + 0 ) ;  <new_line>
}  <new_line>
}  <new_line>
$global_target_text = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-get-list-of-words:
# no-space dashes-long-line  <new_line>
# function_parameterized__get_list_of_words  <new_line>
<new_line>

sub function_parameterized__get_list_of_words( ) {  <new_line>
my $local_text ;  <new_line>
my @list_of_operands ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text !~ /[^ ]/ ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( $local_text =~ /[\n\r\t]/ ) {  <new_line>
$local_text =~ s/[\n\r\t]/ /sg ;  <new_line>
}  <new_line>
if ( $local_text =~ /^ / ) {  <new_line>
$local_text =~ s/^ +// ;  <new_line>
}  <new_line>
if ( $local_text =~ / $/ ) {  <new_line>
$local_text =~ s/ +$// ;  <new_line>
}  <new_line>

@list_of_operands = split( / +/ , $local_text ) ;  <new_line>
return @list_of_operands ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-normalize-calculated-value:
# no-space dashes-long-line  <new_line>
# function_parameterized__normalize_calculated_value  <new_line>
<new_line>

sub function_parameterized__normalize_calculated_value( ) {  <new_line>
$global_calculated_value = $_[ 0 ] ;  <new_line>

if ( $global_calculated_value == 0 ) {  <new_line>
$global_normalized_calculated_value = '0' ;  <new_line>
} else {  <new_line>
$global_normalized_calculated_value = sprintf( "%f" , $global_calculated_value ) ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+\.[0-9]*[1-9])0+$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+)\.0*$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

return $global_normalized_calculated_value ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-file-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_file_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_file_name( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^[a-z][^ \.\/\\\*\&\!\@\#\$\%\^\~\`\"\'\,\:\;\=\+]*\.[a-z]+$/i )  {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-not-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_not_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_not_empty( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text !~ /[^ ]/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-definition-not-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_definition_not_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_definition_not_empty( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text !~ /^[^ ]+-[^ ]+$/ ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( $global_dashrep_replacement{ $local_text } =~ /[^ ]/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_name( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) > -1 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) > 0 ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-positive-integer:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_positive_integer  <new_line>
<new_line>

sub function_parameterized__yes_or_no_positive_integer( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^[0-9]+$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-real-number:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_real_number  <new_line>
<new_line>

sub function_parameterized__yes_or_no_real_number( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^(-?[0-9]+)(\.[0-9]*)?$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-point-to-words:
# no-space dashes-long-line  <new_line>
# function__point_to_words  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is variable $global_number_of_words and array begin_position_for_word[ ] and array length_of_word[ ] where pointer into array is 1 for first word, etc.  <new_line>
#  Word counts start at one  <new_line>
#  Character pointer numbers start at zero  <new_line>
<new_line>

sub function__point_to_words( ) {  <new_line>

$global_number_of_words = 0 ;  <new_line>
$global_length_of_text = length( $global_source_text ) ;  <new_line>

# print "source_text = " . $global_source_text . " ; text length = " . $global_length_of_text . "\n" ;  <new_line>

if ( $global_length_of_text < 1 ) {  <new_line>

# print "found no text" . "\n" ;  <new_line>

return '' ;  <new_line>
}  <new_line>

$global_pointer_to_next_space = index( $global_source_text , ' ' ) ;  <new_line>

if ( $global_pointer_to_next_space < 0 ) {  <new_line>

# print "found no spaces, but text is not empty, so found just one word" . "\n" ;  <new_line>

$global_number_of_words = 1 ;  <new_line>
$global_begin_position_for_word[ 1 ] = 0 ;  <new_line>
$global_length_of_word[ 1 ] = $global_length_of_text ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_pointer_to_previous_space = -1 ;  <new_line>

while ( $global_pointer_to_next_space >= 0 ) {  <new_line>
if ( $global_pointer_to_next_space > $global_pointer_to_previous_space + 1 ) {  <new_line>
$global_number_of_words ++ ;  <new_line>

# print "number_of_words = " . $global_number_of_words . "\n" ;  <new_line>

$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_space + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_pointer_to_next_space - $global_pointer_to_previous_space - 1 ;  <new_line>
}  <new_line>

# print "word number " . $global_number_of_words . " is: " . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "\n" ;  <new_line>

$global_pointer_to_previous_space = $global_pointer_to_next_space ;  <new_line>
$global_pointer_to_next_space = index( $global_source_text , ' ' , $global_pointer_to_previous_space + 1 ) ;  <new_line>
}  <new_line>

$global_number_of_words ++ ;  <new_line>
$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_space + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_length_of_text - $global_pointer_to_previous_space + 1 ;  <new_line>

# print "word number " . $global_number_of_words . " is: " . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "\n" ;  <new_line>

template-function-segment-ending
----
template-function-remove-extra-spaces:
# no-space dashes-long-line  <new_line>
# function__remove_extra_spaces  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__remove_extra_spaces( ) {  <new_line>
$global_default_text = $global_source_text ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_target_text = substr( $global_source_text , $global_begin_position_for_word[ 1 ] , $global_length_of_word[ 1 ] ) ;  <new_line>
if ( $global_number_of_words == 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_word_pointer = 2 ; $global_word_pointer <= $global_number_of_words ; $global_word_pointer ++ ) {  <new_line>
$global_target_text .= ' ' . substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer ] , $global_length_of_word[ $global_word_pointer ] ) ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-segment-ending:
#  end of function  <new_line>
}  <new_line>
<new_line>
<new_line>
----
template-function-segment-if-zero-words-return-default-text:
# begin code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
&function__point_to_words( ) ;  <new_line>
if ( $global_number_of_words == 0 ) {  <new_line>
$global_target_text = $global_default_text ;  <new_line>
return $global_default_text ;  <new_line>
}  <new_line>
# end code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
----
template-initialize-global-arrays:
my %global_dashrep_replacement = ( ) ;  <new_line>
my %global_replacement_count_for_item_name = ( ) ;  <new_line>

<new_line>

my @global_accumulator = ( ) ;  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>
my @global_begin_position_for_word = ( ) ;  <new_line>
$global_begin_position_for_word[ 1 ] = 0 ;  <new_line>
my @global_length_of_word = ( ) ;  <new_line>
$global_length_of_word[ 1 ] = 0 ;  <new_line>
----
template-initialize-global-variables:
my $global_yes = 1 ;  <new_line>
my $global_no = 0 ;  <new_line>
my $global_string_word_to_use_in_handler = 'word-to-use-in-handler' ;  <new_line>
my $global_word_to_use_in_handler = '' ;  <new_line>
my $global_yes_or_no = 0 ;  <new_line>
my $global_source_text = '' ;  <new_line>
my $global_target_text = '' ;  <new_line>
my $global_default_text = '' ;  <new_line>
my $global_storage_number = 1 ;  <new_line>
my $global_accumulator_pointer = 1 ;  <new_line>
my $global_text_expanded_parameters_only = '' ;  <new_line>
my $global_action_name = '' ;  <new_line>
my $global_number_of_operands = 0 ;  <new_line>
my $global_action_operand_one = '' ;  <new_line>
my $global_action_operand_two = '' ;  <new_line>
my $global_action_operand_three = '' ;  <new_line>
my $global_action_operand_four = '' ;  <new_line>
my $global_action_operand_five = '' ;  <new_line>
my $global_action_operands_all = '' ;  <new_line>
my $global_action_result = '' ;  <new_line>
my $global_numeric_value_first = 0 ;  <new_line>
my $global_numeric_value_second = 0 ;  <new_line>
my $global_spaces = '                                                                              ' ;  <new_line>
my $global_phrase_name_to_match = '' ;  <new_line>
my $global_yes_or_no_operand_error = $global_no ;  <new_line>
my $output_results = '' ;  <new_line>
<new_line>

my $global_character_pointer = '' ;  <new_line>
my $global_character_pointer_begin = '' ;  <new_line>
my $global_character_pointer_end = '' ;  <new_line>
my $global_length_of_text = '' ;  <new_line>
my $global_number_of_words = 0 ;  <new_line>
my $global_word_pointer = '' ;  <new_line>
my $global_current_word = '' ;  <new_line>
my $global_calculated_value = '' ;  <new_line>
my $global_pointer_to_next_space = 0 ;  <new_line>
my $global_pointer_to_next_word = 0 ;  <new_line>
my $global_pointer_to_future_space = 0 ;  <new_line>
my $global_pointer_to_previous_space = 0 ;  <new_line>
my $global_pointer_to_first_space = 0 ;  <new_line>
my $global_counter_number_of_adjacent_spaces = 0 ;  <new_line>
my $global_concatenated_all_operands = '' ;  <new_line>
my $global_concatenated_all_operands_modified = '' ;  <new_line>
my $global_normalized_calculated_value = '' ;  <new_line>
my $global_pointer_to_word = '' ;  <new_line>
<new_line>

my $global_action_debug_line = '' ;  <new_line>
<new_line>

my $global_file_write_protection_mode = 0600 ;  # octal number that specifies no "world" read access  <new_line>
my $global_file_public_read_protection_mode = 0644 ;  # octal number that specifies public "world" read access  <new_line>
<new_line>

my $global_endless_loop_counter = 0 ;  <new_line>
my $global_endless_loop_counter_limit = 70000 ;  <new_line>
my $global_time_limit = 1200 ;  # 1200 seconds = 20 minutes  <new_line>
my $global_starting_time = time ;  <new_line>
my $global_interval_count_for_time_limit_check = 0 ;  <new_line>
my $global_nesting_level_of_file_actions = 0 ;  <new_line>
my $global_recursion_level_of_expand_parameters = 0 ;  <new_line>
<new_line>

*--- variables that are only needed for old interpreter code ---*
my $global_true = 1 ;  <new_line>
my $global_false = 0 ;  <new_line>
$global_dashrep_replacement{ 'dashrep-debug-trace-on-yes-or-no' } = 'no' ;  <new_line>
$global_dashrep_replacement{ 'dashrep-action-trace-on-yes-or-no' } = 'no' ;  <new_line>
$global_dashrep_replacement{ 'dashrep-stop-translation' } = 'no' ;  <new_line>
<new_line>

*--- variables that hide warnings for unused parts of old interpreter code ---*

# my %global_minimum_number_of_operands_for_action ;  <new_line>

$global_dashrep_replacement{ "dashrep-warning-trace-on-yes-or-no" } = 'no' ;  <new_line>
my $global_single_action_name ;  <new_line>
my $global_trace_log ;  <new_line>
my $global_single_action_operands_all ;  <new_line>
my %global_required_number_of_operands_for_action ;  <new_line>
my $global_single_action_operand_one ;  <new_line>
my $global_single_action_operand_two ;  <new_line>
my $global_single_action_operand_three ;  <new_line>
my $global_single_action_operand_four ;  <new_line>
my $global_single_action_operand_five ;  <new_line>
my $global_unique_value ;  <new_line>
my $global_operand_one ;  <new_line>
my $global_operand_two ;  <new_line>
my $global_operand_three ;  <new_line>
my $global_operand_four ;  <new_line>
my $global_operand_five ;  <new_line>
my $global_operands_all ;  <new_line>
my $global_xml_level_number ;  <new_line>
my $global_ignore_level ;  <new_line>
my $global_xml_accumulated_sequence_of_tag_names ;  <new_line>
my @global_xml_tag_at_level_number ;  <new_line>
my $global_exists_xml_hyphenated_phrase ;  <new_line>

my %global_check_operand_one_is_phrase_name_for_action ;  <new_line>
my %global_check_operand_two_is_phrase_name_for_action ;  <new_line>
my %global_check_operand_three_is_phrase_name_for_action ;  <new_line>
my %global_check_operand_four_is_phrase_name_for_action ;  <new_line>

my %global_check_operand_one_phrase_is_not_empty_for_action ;  <new_line>
my %global_check_operand_two_phrase_is_not_empty_for_action ;  <new_line>
my %global_check_operand_three_phrase_is_not_empty_for_action ;  <new_line>

my %global_check_operand_one_is_positive_integer_for_action ;  <new_line>
my %global_check_operand_two_is_positive_integer_for_action ;  <new_line>
my %global_check_operand_three_is_positive_integer_for_action ;  <new_line>
my %global_check_operand_four_is_positive_integer_for_action ;  <new_line>

my %global_check_operand_one_is_real_number_for_action ;  <new_line>
my %global_check_operand_two_is_real_number_for_action ;  <new_line>

my %global_check_operand_one_is_file_name_for_action ;  <new_line>
my %global_check_operand_two_is_file_name_for_action ;  <new_line>

my $global_dashrep_text_list_of_phrase_names ;  <new_line>
my $global_xml_level ;  <new_line>
----
template-runtime-code-at-top-if-warning-message:
print 'Compiler error; for details see warning messages at top of compiler output file.' . "\n" ;  <new_line>
exit ;  <new_line>
# All done!  <new_line>
<new_line>
----
template-runtime-code-for-action-clear-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = '' ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-text:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_target_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-word-at-position:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end

runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-three runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_pointer = runtime-code-for-operand-number-three + 0 ;  <new_line>
&function__get_word_at_position( ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-executable-phrase:
template-runtime-code-for-every-action-begin

$saved_accumulator_pointer = $global_accumulator_pointer  ;  <new_line>
$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_phrase_name_to_match = <dashrep_placeholder_code_for_executable_phrase> ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>
runtime-code-storage-item-result = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>
$global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-expand-text:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
$saved_accumulator_pointer = $global_accumulator_pointer ;  <new_line>
$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_phrase_name_to_match = runtime-code-for-operand-number-one ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>
$global_target_text = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = &dashrep_internal_expand_phrases_faster_subset( $global_target_text ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>
# print "fully expanded: " . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
$global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-get-count-of-words:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
&function__get_count_of_words( ) ;  <new_line>
runtime-code-storage-item-result = $global_target_text ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-get-word-at-position:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_source_text = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_position = runtime-code-for-operand-number-three + 0 ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_positive_integer( $word_position ) ) {  <new_line>
&function__get_word_at_position( ) ;  <new_line>
runtime-code-storage-item-result = $target_text ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'dashrep_undefined' ;  <new_line>
}  <new_line>

} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-if-else:
# begin action if else  <new_line>
} else {  <new_line>
# end action if else  <new_line>
<new_line>
----
template-runtime-code-for-action-if-end:
# begin action if end  <new_line>
}  <new_line>
# end action if end  <new_line>
<new_line>
----
template-runtime-code-for-action-if-no-begin:
# begin action if no begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'no' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 )  <new_line>
{  <new_line>
# end action if no begin  <new_line>
<new_line>
----
template-runtime-code-for-action-if-yes-begin:
# begin action if yes begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'yes' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 )  <new_line>
{  <new_line>
# end action if yes begin  <new_line>
<new_line>
----
template-runtime-code-for-action-no-if-any-no:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all ;  <new_line>
if ( index( $concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-no-if-not-yes:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all ;  <new_line>
if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-not-recognized:
template-runtime-code-for-every-action-begin

# action not recognized

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-numeric-add:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-equal-greater-less-compare:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_yes ) {  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>
return runtime-code-storage-item-result ;  <new_line>
}  <new_line>

$global_numeric_value_first = runtime-code-for-operand-number-one + 0 ;  <new_line>
$global_numeric_value_second = runtime-code-for-operand-number-two + 0 ;  <new_line>

if ( $global_numeric_value_first == $global_numeric_value_second ) {  <new_line>
runtime-code-storage-item-result = 'equal' ;  <new_line>
} elsif ( $global_numeric_value_first > $global_numeric_value_second ) {  <new_line>
runtime-code-storage-item-result = 'greater' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'less' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-numeric-maximum:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-minimum:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-numeric-multiply:
template-runtime-code-standard-action-with-minimum-operand-count
----
template-runtime-code-for-action-put-into-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_pointer_to_first_space = index( $global_concatenated_all_operands , ' ' ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = substr( $global_concatenated_all_operands , ( $global_pointer_to_first_space + 1 ) ) ;  <new_line>

} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-trace-show-where:
template-runtime-code-for-every-action-begin

print 'current code location is: phrase-being-defined no-space ' . "\n" ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-trace-show:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

if ( ( $global_yes_or_no_operand_error == $global_no ) && ( exists( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
print 'phrase ' . runtime-code-for-operand-number-one . ' is: ' . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
} else {  <new_line>
print 'phrase ' . runtime-code-for-operand-number-one . ' is not defined' . "\n" ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-unchanged:
template-runtime-code-for-every-action-begin

runtime-code-storage-item-result = ' ' . '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-use-handler-with-each-word-in-phrase:
template-runtime-code-for-every-action-begin

my $local_pointer_to_next_space ;  <new_line>
my $local_pointer_to_future_space ;  <new_line>
my $local_pointer_to_next_word ;  <new_line>
my $local_endless_loop_counter ;  <new_line>
my $local_endless_loop_counter_limit ;  <new_line>
my $length_of_text_in_word_list ; <new_line>

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

template-storage-item-containing-word-list-associated-with-loop = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
$local_pointer_to_next_space = -1 ;  <new_line>
$length_of_text_in_word_list = length( template-storage-item-containing-word-list-associated-with-loop ) ;  <new_line>

# print "length of word list is " . $length_of_text_in_word_list . "\n" ;  <new_line>

# start ABABA loop, which has exit in middle of loop  <new_line>
$local_endless_loop_counter = 0 ;  <new_line>
$local_endless_loop_counter_limit = int( ( $length_of_text_in_word_list / 2 ) ) + 10 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_endless_loop_counter ++ ;  <new_line>
if ( $local_endless_loop_counter > $local_endless_loop_counter_limit ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $local_pointer_to_next_space >= $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

# start a second, inner, ABABA loop, which has exit in middle of loop  <new_line>
$local_counter_number_of_adjacent_spaces = 0 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_counter_number_of_adjacent_spaces ++ ;  <new_line>
if ( $local_counter_number_of_adjacent_spaces > $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_future_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_space + 1 ) ;  <new_line>

# print "future space at " . $local_pointer_to_future_space . "\n" ;  <new_line>

# exit from second, inner, ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
if ( $local_pointer_to_future_space != $local_pointer_to_next_space + 1 ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_next_space = $local_pointer_to_future_space ;  <new_line>

} # end of second, inner, ABABA loop  <new_line>

$local_pointer_to_next_word = $local_pointer_to_next_space + 1 ;  <new_line>

# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>

$local_pointer_to_next_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_word ) ;  <new_line>

# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>

if ( $local_pointer_to_next_space < 0 ) {  <new_line>
$local_pointer_to_next_space = $length_of_text_in_word_list ;  <new_line>
}  <new_line>

# exit from ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
if ( ( $local_pointer_to_next_word >= $local_pointer_to_next_space ) || ( $local_pointer_to_next_word < 0 ) || ( $local_pointer_to_next_space < 0 ) ) {  <new_line>
last ;  <new_line>
}  <new_line>

$global_word_to_use_in_handler = substr( template-storage-item-containing-word-list-associated-with-loop , $local_pointer_to_next_word , $local_pointer_to_next_space - $local_pointer_to_next_word ) ;  <new_line>

# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>
# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>
# print "word to use in handler is " . $global_word_to_use_in_handler . "\n" ;  <new_line>

code-get-or-put-phrase-definition-begin $global_string_word_to_use_in_handler code-get-or-put-phrase-definition-end = $global_word_to_use_in_handler ;  <new_line>
& no-space function-name-prefix handler-name-with-underscores no-space ( ) ;  <new_line>

} # end of ABABA loop  <new_line>

} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-all-yes:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_concatenated_all_operands_modified = ' ' . $global_concatenated_all_operands . ' ' ;  <new_line>
$accumulated_remaining_text = '' ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>

while ( $pointer_to_next_match > 0 ) {  <new_line>
$accumulated_remaining_text .= substr( $global_concatenated_all_operands_modified , 0 , ( $pointer_to_next_match - 1 ) ) ;  <new_line>
$global_concatenated_all_operands_modified = substr( $global_concatenated_all_operands_modified , ( $pointer_to_next_match + 3 ) ) ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>
} # end of while loop  <new_line>

$accumulated_remaining_text .= ' ' . $global_concatenated_all_operands_modified ;  <new_line>
$accumulated_remaining_text =~ s/ //g ;  <new_line>

if ( length( $accumulated_remaining_text ) == 0 ) {  <new_line>
$global_target_text = 'yes' ;  <new_line>
} else {  <new_line>
$global_target_text = 'no' ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-any-yes:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-not-no:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-opposite:
template-runtime-code-for-every-action-begin

$concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-phrase-definitions:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

if ( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end eq code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-words:
template-runtime-code-for-every-action-begin

if ( runtime-code-for-operand-number-one eq runtime-code-for-operand-number-two ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-zero-one-multiple:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-storage-item-result = 'multiple' ;  <new_line>

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

if ( runtime-code-for-operand-number-one + 0 <= 0 ) {  <new_line>
runtime-code-storage-item-result = 'zero' ;  <new_line>
} elsif ( runtime-code-for-operand-number-one + 0 == 1 ) {  <new_line>
runtime-code-storage-item-result = 'one' ;  <new_line>
}  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-zero-or-nonzero:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end

runtime-code-storage-item-result = 'nonzero' ;  <new_line>

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

if ( runtime-code-for-operand-number-one + 0 <= 0 ) {  <new_line>
runtime-code-storage-item-result = 'zero' ;  <new_line>
}  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-every-action-begin:
$global_action_debug_line = '***** <dashrep_placeholder_phrase_being_defined> **** current-result-storage-position *** <dashrep_placeholder_action_name> ** number-of-operands *' . runtime-code-for-concatenated-all-operands ;  <new_line>
# print $global_action_debug_line . "\n" ;  <new_line>
# <new_line>
----
template-runtime-code-for-every-action-end:
# print 'result: ' . runtime-code-storage-item-result . "\n" ;  <new_line>
# end of action <dashrep_placeholder_action_name><new_line>
----
template-runtime-code-for-text-storage-position-begin:
my template-storage-item-prefix current-text-storage-position = '
----
template-runtime-code-for-text-storage-position-end:
' ;
----
template-runtime-code-for-word-list-storage-position:
my template-storage-item-prefix storage-position-for-word-list-associated-with-loop = '' ; # stores list of words for loop
----
template-runtime-code-one-storage-position-declaration:
my storage-position-name = '' ;  <new_line>
----
template-runtime-code-standard-action-with-minimum-operand-count:
template-runtime-code-for-every-action-begin

$global_source_text = runtime-code-for-concatenated-all-operands ;  <new_line>
&function__<dashrep_placeholder_action_name_with_underscores>( ) ;  <new_line>
runtime-code-storage-item-result = $global_target_text ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-action:
template-runtime-code-for-every-action-begin

$global_single_action_name = '<dashrep_placeholder_action_name>' ;  <new_line>
$global_number_of_operands = number-of-operands ;  <new_line>
$global_single_action_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_single_action_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_single_action_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_single_action_operand_four = runtime-code-for-operand-number-four ;  <new_line>
$global_yes_or_no_operand_error = $global_no ;  <new_line>

needed-operand-checks

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>
runtime-code-storage-item-result = &dashrep_expand_parameters( ) ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = '<dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-statement-end-with-new-line:
;  <new_line>
----
template-runtime-code-storage-item-with-pointer:
template-storage-item-prefix storage-item-pointer
----
template-segment-branch-begin:
# no-space dashes-long-line  <new_line>
#  Function branching based on phrase name  <new_line>
#  <new_line>
# reminder: later use direct function calls (rather than calling this branching function) for cases where fen not involved; involves revising code for previously handled action  <new_line>
<new_line>
sub function_branch_based_on_phrase_name( ) {  <new_line>
my $do_nothing ;  <new_line>
if ( 1 == 2 ) {  <new_line>
$do_nothing ++ ;
----
template-segment-branch-end:
} elsif ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ) ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
if ( $global_accumulator[ $global_accumulator_pointer ] ne '' ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= $global_phrase_name_to_match ;  <new_line>
} # end of branching  <new_line>
return '' ;  <new_line>
} # end of function_branch_based_on_phrase_name  <new_line>
<new_line>
----
template-segment-definition-items-begin:
# no-space dashes-long-line  <new_line>
#  Begin text encountered in definitions  <new_line>
<new_line>
----
template-segment-definition-items-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End text encountered in definitions  <new_line>
<new_line>
----
template-segment-functions-compiled-begin:
# no-space dashes-long-line  <new_line>
#  Begin compiled functions  <new_line>
<new_line>
----
template-segment-functions-compiled-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End compiled functions  <new_line>
<new_line>
----
template-segment-functions-runtime-begin:
# no-space dashes-long-line  <new_line>
#  Execute starting/main function  <new_line>
<new_line>

&initialize_special_phrases( ) ;  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>
& no-space function-name-prefix start_here( ) ;  <new_line>
$output_results = &dashrep_internal_expand_phrases_faster_subset( $global_accumulator[ 1 ] ) ;  <new_line>
print $output_results . "\n" ;  <new_line>
exit ;  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Begin runtime functions  <new_line>
<new_line>
----
template-segment-functions-runtime-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End runtime functions  <new_line>
<new_line>
----
template-segment-functions-runtime-middle:
# no-space dashes-long-line  <new_line>
#  Runtime functions from interpreter  <new_line>
<new_line>

#  DO NOT EDIT THESE COPIES OF THESE FUNCTIONS  <new_line>
#  Instead, edit the Dashrep interpreter code, and then copy the segments to the appropriate file.  <new_line>
<new_line>
----
template-segment-initialize-begin:
# no-space dashes-long-line  <new_line>
#  Dashrep compiler output  <new_line>
<new_line>

# object-code-copyright-notice  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Declare and initialize global arrays and variables  <new_line>
<new_line>
----
template-segment-initialize-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End of initialize variables  <new_line>
<new_line>
----
template-storage-item-containing-word-list-associated-with-loop:
template-storage-item-prefix storage-position-for-word-list-associated-with-loop
----
template-storage-item-prefix:
$storage_item__ no-space
----
