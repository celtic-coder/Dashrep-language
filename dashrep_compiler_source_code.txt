dashdef-copyright-notice:
All the code and text in this collection of Dashrep phrase definitions are (c) Copyright 2017 by the entity who owns the source code from which this object code was generated, and who is specified in a separate copyright statement within one of the following files within this collection. ALL RIGHTS RESERVED.
----
0-documentation-for-compiler:
Limitations:

* Cannot expand parameters within a named phrase if that phrase was not supplied to the compiler as source code.  In other words, if during runtime the compiled code imports (or generates) a new phrase with a new definition, and that definition includes parameter phrases, those parameter phrases will be be expanded as parameter phrases.  The static definition of such a phrase will get inserted, but the parameter brackets are ignored.

* Within parameter brackets, the operands that follow the action name must not expand in a way that effectively inserts a space. In other words, the counting of an action's operands is done during compilation, not during runtime.
----
check-elapsed-time:
combee ****
ambee put-into-phrase epoch-seconds-current-time  ambee get-current-time-in-epoch-seconds amenn  amenn
ambee put-into-phrase elapsed-time  ambee numeric-minus ambee epoch-seconds-current-time amenn ambee epoch-seconds-starting-time amenn amenn  amenn


ambee trace-show elapsed-time amenn
**** comenn
----
compile-source-code-finish:
ambee copy-text unique-phrase-number number-of-unique-phrases amenn

ambee copy-words-found-only-in-first-list list-of-functions-generated list-of-function-branches-already-generated list-of-function-branches-yet-to-generate amenn
ambee copy-words-unique-only list-of-function-branches-yet-to-generate list-of-function-branches-yet-to-generate amenn
ambee copy-words-sort-alphabetic list-of-function-branches-yet-to-generate list-of-function-branches-yet-to-generate amenn
ambee use-handler-with-each-word-in-phrase generate-runtime-code-for-one-function-branch list-of-function-branches-yet-to-generate amenn

ambee use-handler-with-each-word-in-phrase generate-runtime-code-for-external-function-branch list-of-functions-in-optional-code-modified amenn

ambee copy-words-found-only-in-first-list list-of-function-branches-needed list-of-functions-in-optional-code list-of-functions-replacement-only-needed amenn
ambee copy-words-found-only-in-first-list list-of-functions-replacement-only-needed list-of-functions-in-optional-code-modified list-of-functions-replacement-only-needed amenn
ambee copy-words-found-only-in-first-list list-of-functions-replacement-only-needed list-of-function-branches-yet-to-generate list-of-functions-replacement-only-needed amenn
ambee copy-words-unique-only list-of-functions-replacement-only-needed list-of-functions-replacement-only-needed amenn
ambee copy-words-sort-alphabetic list-of-functions-replacement-only-needed list-of-functions-replacement-only-needed amenn
ambee use-handler-with-each-word-in-phrase generate-runtime-code-for-one-function-replacement-only list-of-functions-replacement-only-needed amenn

ambee copy-words-unique-only list-of-dashrep-actions-used list-of-dashrep-actions-used amenn
ambee copy-words-sort-alphabetic list-of-dashrep-actions-used list-of-dashrep-actions-used amenn
ambee trace-show list-of-dashrep-actions-used amenn

ambee copy-words-unique-only list-of-action-names-not-recognized list-of-action-names-not-recognized amenn
ambee copy-words-sort-alphabetic list-of-action-names-not-recognized list-of-action-names-not-recognized amenn
ambee trace-show list-of-action-names-not-recognized amenn

ambee copy-words-unique-only list-of-dashrep-actions-with-wrong-number-of-operands list-of-dashrep-actions-with-wrong-number-of-operands amenn
ambee copy-words-sort-alphabetic list-of-dashrep-actions-with-wrong-number-of-operands list-of-dashrep-actions-with-wrong-number-of-operands amenn
ambee trace-show list-of-dashrep-actions-with-wrong-number-of-operands amenn
----
compile-source-code-generate-output-results:
ambee compile-source-code-initialize amenn
ambee convert-source-code-into-words amenn


ambee trace-show source-code-as-words amenn


ambee clear-phrase phrase-being-defined amenn
ambee put-into-phrase yes-or-no-within-comment  no  amenn
ambee use-handler-with-each-word-in-phrase filter-tokens-case-1 source-code-as-words amenn
ambee compile-source-code-finish amenn
----
compile-source-code-initialize:
ambee put-into-phrase local-or-batch-mode  local  amenn
ambee put-into-phrase dashrep-time-limit  50000  amenn
ambee put-into-phrase dashrep-endless-loop-counter-limit  900000000  amenn
ambee put-into-phrase epoch-seconds-starting-time  ambee get-current-time-in-epoch-seconds amenn  amenn

ambee define-special-strings amenn
ambee generate-versions-of-function-point-to-word-in-operand amenn
ambee use-handler-with-each-word-in-phrase expand-one-template list-of-static-segments-need-to-expand amenn
ambee use-handler-with-each-word-in-phrase generate-runtime-code-using-quoted-string list-of-phrases-with-quoted-strings amenn
ambee put-into-phrase current-storage-position  1001  amenn
ambee put-into-phrase count-of-ambee-tokens  0  amenn
ambee put-into-phrase count-of-amenn-tokens  0  amenn
ambee clear-phrase list-of-template-functions-for-requested-actions amenn
----
convert-source-code-into-words:
ambee copy-and-replace source-code source-code-as-words string-space-end-of-line-here-space string-placeholder-special amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-end-of-line-here-space string-placeholder-special amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-placeholder-special character-space amenn
ambee copy-without-extra-spaces source-code-as-words source-code-as-words amenn
ambee convert-source-code-replace-parameter-brackets-with-ambee-and-amenn amenn
ambee copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-to-combee-comenn amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-space-no-space-character-hyphen-no-space-space amenn
ambee copy-without-extra-spaces source-code-as-words source-code-as-words amenn

combee **** need to do at least twice because of potential overlap **** comenn
ambee put-into-phrase count-1-2  1 2  amenn
ambee use-handler-with-each-word-in-phrase convert-source-code-simplify-no-space-one-space-directives count-1-2  amenn

combee ****
ambee copy-and-replace source-code-as-words source-code-as-words string-space-one-space-space string-placeholder-for-space-one-space-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space character-space amenn
**** comenn

ambee copy-and-replace-using-paired-listed-words source-code-as-words source-code-as-words paired-replacements-for-converting-hyphens-into-defenns amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-hyphen-here-space string-replacement-for-hyphen-here amenn
ambee copy-without-extra-spaces source-code-as-words source-code-as-words amenn
ambee copy-and-replace source-code-as-words source-code-as-lines character-space character-newline amenn
----
convert-source-code-replace-parameter-brackets-with-ambee-and-amenn:
combee ****
**** comenn
ambee trace-show source-code-as-words amenn

ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-open-bracket-dash string-dash-close-bracket-space-fen-space-open-bracket-dash amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket amenn

ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-open-bracket-dash string-dash-close-bracket-nospay-open-bracket-dash amenn

ambee copy-and-replace source-code-as-words source-code-as-words string-dash-open-bracket-dash string-space-fen-ambee-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-dash string-space-amenn-fen-space amenn

ambee copy-and-replace source-code-as-words source-code-as-words string-space-fenambee-space string-space-fen-ambee-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-amennfen-space string-space-amenn-fen-space amenn

ambee trace-show source-code-as-words amenn
combee ***
*** comenn

ambee generate-positions-of-delimiter string-open-bracket-dash source-code-as-words pointers-to-delimiters-begin amenn
ambee numeric-vector-add-number pointers-to-delimiters-begin -1 pointers-to-just-before-delimiters-begin amenn
ambee generate-positions-of-delimiter string-dash-close-bracket source-code-as-words pointers-to-delimiters-end amenn
ambee numeric-vector-add-number pointers-to-delimiters-end 2 pointers-to-just-after-delimiters-end amenn
ambee copy-text pointers-to-just-before-delimiters-begin pointers-to-adjacent-characters amenn
ambee append-text pointers-to-just-after-delimiters-end pointers-to-adjacent-characters amenn
ambee use-handler-with-each-word-in-phrase get-source-code-character-at-adjacent-position pointers-to-adjacent-characters amenn
ambee copy-words-unique-only list-of-adjacent-characters list-of-adjacent-characters amenn
ambee copy-words-found-only-in-first-list list-of-adjacent-characters character-hyphen list-of-adjacent-characters amenn

ambee trace-show pointers-to-delimiters-begin amenn
ambee trace-show list-of-adjacent-characters amenn
ambee trace-show pointers-to-adjacent-characters amenn

ambee use-handler-with-each-word-in-phrase convert-source-handle-nospay-insertions list-of-adjacent-characters amenn

ambee copy-and-replace source-code-as-words source-code-as-words string-open-bracket-dash string-space-ambee-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket string-space-amenn-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-amennfenambee-space string-space-amenn-fen-ambee-space amenn
----
convert-source-code-simplify-no-space-one-space-directives:
ambee put-into-phrase either-zero-if-not-found-else-non-zero ambee get-position-of-matching-text string-space-one-space-space source-code-as-words amenn amenn
ambee if-no-begin ambee yes-or-no-same-two-words 0 ambee either-zero-if-not-found-else-non-zero amenn amenn amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-one-space-no-space-space string-placeholder-for-space-one-space-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-no-space-one-space-space string-placeholder-for-space-one-space-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-placeholder-for-space-one-space-space string-space-one-space-space amenn
ambee if-end amenn

combee **** do twice in case overlapping cases **** comenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-nospay-space-nospay-space string-space-nospay-space amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-space-nospay-space-nospay-space string-space-nospay-space amenn
----
convert-source-handle-nospay-insertions:
ambee copy-text word-to-use-in-handler current-symbol amenn

ambee copy-text current-symbol string-symbol-open-bracket-dash amenn
ambee append-text-no-space string-open-bracket-dash string-symbol-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-symbol amenn
ambee append-text-no-space current-symbol string-dash-close-bracket-symbol amenn

ambee copy-text current-symbol string-symbol-nospay-open-bracket-dash amenn
ambee append-text string-nospay string-symbol-nospay-open-bracket-dash amenn
ambee append-text string-open-bracket-dash string-symbol-nospay-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-nospay-symbol amenn
ambee append-text string-nospay string-dash-close-bracket-nospay-symbol amenn
ambee append-text current-symbol string-dash-close-bracket-nospay-symbol amenn

combee **** do twice in case symbol is adjacent to both open and close parameter brackets **** comenn
ambee copy-and-replace source-code-as-words source-code-as-words string-symbol-open-bracket-dash string-symbol-nospay-open-bracket-dash amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-symbol-open-bracket-dash string-symbol-nospay-open-bracket-dash amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-symbol string-dash-close-bracket-nospay-symbol amenn
ambee copy-and-replace source-code-as-words source-code-as-words string-dash-close-bracket-symbol string-dash-close-bracket-nospay-symbol amenn
----
create-new-result-storage-position:
ambee put-into-phrase storage-type  result  amenn
ambee create-new-storage-position amenn
----
create-new-storage-position:
ambee numeric-increment current-storage-position amenn
ambee clear-phrase contents-at-storage-position fenambee current-storage-position amenn amenn
ambee copy-text storage-type storage-type-at-storage-position fenambee current-storage-position amenn amenn
ambee copy-text current-storage-position current fenambee storage-type amennfen storage-position amenn
----
create-new-text-storage-position:
ambee put-into-phrase storage-type  text  amenn
ambee create-new-storage-position amenn
----
expand-one-template:
ambee expand-text template fenambee word-to-use-in-handler amenn ambee word-to-use-in-handler amenn amenn
----
filter-tokens-case-1:
ambee copy-text word-to-use-in-handler current-token amenn
ambee copy-words-found-in-both-lists current-token list-combee-comenn-defenn non-empty-if-valid-token-handler-name amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase non-empty-if-valid-token-handler-name amenn amenn
ambee filter-tokens-case-2 amenn
ambee if-else amenn
ambee filter-tokens-case fenambee non-empty-if-valid-token-handler-name amenn amenn
ambee if-end amenn
----
filter-tokens-case-2:
ambee if-no-begin ambee yes-or-no-within-comment amenn amenn
ambee filter-tokens-case-3 amenn
ambee if-else amenn
combee ****
ambee append-text current-token comments-ignored amenn
**** comenn
ambee if-end amenn
----
filter-tokens-case-3:
ambee copy-words-found-in-both-lists current-token list-ambee-amenn non-empty-if-valid-token-handler-name amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase non-empty-if-valid-token-handler-name amenn amenn
ambee filter-tokens-case-4 amenn
ambee if-else amenn
ambee filter-tokens-case fenambee non-empty-if-valid-token-handler-name amenn amenn
ambee if-end amenn
----
filter-tokens-case-4:
ambee if-no-begin ambee yes-or-no-empty-phrase phrase-being-defined amenn amenn
ambee append-text current-token list-of-tokens-in-current-definition amenn
ambee if-else amenn
ambee copy-text current-token phrase-being-defined amenn
ambee remove-colon-if-at-end-of-phrase-being-defined amenn
ambee if-end amenn
----
filter-tokens-case-ambee:
ambee numeric-increment count-of-ambee-tokens amenn
ambee append-text string-ambee list-of-tokens-in-current-definition amenn
----
filter-tokens-case-amenn:
ambee numeric-increment count-of-amenn-tokens amenn
ambee append-text string-amenn list-of-tokens-in-current-definition amenn
----
filter-tokens-case-combee:
ambee put-into-phrase yes-or-no-within-comment  yes  amenn
----
filter-tokens-case-comenn:
ambee put-into-phrase yes-or-no-within-comment  no  amenn
----
filter-tokens-case-defenn-case-balanced-ambee-amenn:
ambee if-no-begin ambee yes-or-no-same-two-words greater ambee numeric-equal-greater-less-compare ambee numeric-add ambee count-of-ambee-tokens amenn ambee count-of-amenn-tokens amenn amenn 0  amenn amenn amenn
ambee handle-definition-simple-or-immediate amenn
ambee if-else amenn
ambee handle-definition-contains-ambee-amenn amenn
ambee if-end amenn
----
filter-tokens-case-defenn:
ambee numeric-increment unique-phrase-number amenn
ambee if-yes-begin ambee yes-or-no-same-two-words equal ambee numeric-equal-greater-less-compare ambee count-of-ambee-tokens amenn ambee count-of-amenn-tokens amenn amenn amenn amenn
ambee filter-tokens-case-defenn-case-balanced-ambee-amenn amenn
ambee if-else amenn
ambee handle-definition-simple-or-immediate amenn

combee ****
if unbalanced needs warning:
ambee handle-non-zero-count-of-ambee-minus-amenn-tokens amenn
**** comenn

ambee if-end amenn

ambee clear-phrase phrase-being-defined amenn
ambee put-into-phrase yes-or-no-within-comment  no  amenn
ambee clear-phrase list-of-tokens-in-current-definition amenn
ambee put-into-phrase count-of-ambee-tokens  0  amenn
ambee put-into-phrase count-of-amenn-tokens  0  amenn

ambee generate-list-of-all-dashrep-phrases list-of-all-dashrep-phrases amenn
ambee copy-words-that-begin-with-listed-words list-of-all-dashrep-phrases list-of-phrases-to-delete list-of-temporary-phrase-name-prefixes amenn
ambee delete-listed-phrases list-of-phrases-to-delete amenn
----
generate-code-for-one-action:
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name action-name amenn
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-action-name-with-underscores string-placeholder-special amenn
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-special action-name-with-underscores amenn
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-phrase-being-defined phrase-being-defined amenn
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-character-hyphen-in-brackets character-hyphen amenn
combee **** reminder: do not modify apostrophes or backslashes here because those characters need to appear in the code **** comenn
ambee copy-from-phrase-append-to-file runtime-code-for-parameter-phrase ambee filename-output-results-all-compiled-functions amenn amenn
ambee copy-text current-result-storage-position higher-result-storage-position amenn
ambee recursion-stack-pop amenn
ambee copy-text runtime-code-storage-item-reference-before-pointer higher-result-storage-operand amenn
ambee append-text-no-space higher-result-storage-position higher-result-storage-operand amenn
ambee append-text-no-space runtime-code-storage-item-reference-after-pointer higher-result-storage-operand amenn
ambee append-text higher-result-storage-operand list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
----
generate-list-of-tokens-in-current-definition-quotable:
ambee copy-and-replace list-of-tokens-in-current-definition list-of-tokens-in-current-definition-quotable character-apostrophe string-placeholder-special amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-apostrophe-within-quoted-text amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-apostrophe character-apostrophe amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable character-backslash string-placeholder-special amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-special code-for-backslash-within-quoted-text amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-placeholder-character-backslash character-backslash amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-apostrophe-apostrophe-space-period-space empty-text amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable list-of-tokens-in-current-definition-quotable string-space-period-space-apostrophe-apostrophe empty-text amenn


combee ****
ambee trace-show list-of-tokens-in-current-definition-quotable amenn
**** comenn
----
generate-runtime-code-for-external-function-branch:
ambee copy-text word-to-use-in-handler phrase-name amenn
ambee copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore amenn

ambee copy-text code-function-branch-part-1 runtime-code-function-branch amenn
ambee append-text-no-space phrase-name runtime-code-function-branch amenn
ambee append-text-no-space code-function-branch-part-2 runtime-code-function-branch amenn
ambee append-text-no-space phrase-name-with-underscores runtime-code-function-branch amenn
ambee append-text-no-space code-function-branch-part-3 runtime-code-function-branch amenn
ambee copy-and-replace runtime-code-function-branch runtime-code-function-branch function-name-prefix empty-text amenn
ambee copy-from-phrase-append-to-file runtime-code-function-branch ambee filename-output-results-all-function-branches amenn amenn

ambee copy-text code-function-external-part-1 runtime-code-function-external amenn
ambee append-text-no-space phrase-name-with-underscores runtime-code-function-external amenn
ambee append-text-no-space code-function-external-part-2 runtime-code-function-external amenn
ambee append-text-no-space phrase-name-with-underscores runtime-code-function-external amenn
ambee append-text-no-space code-function-external-part-3 runtime-code-function-external amenn
ambee copy-from-phrase-append-to-file runtime-code-function-external ambee filename-output-results-functions-replacement-only amenn amenn
----
generate-runtime-code-for-one-function-branch:
ambee copy-text word-to-use-in-handler phrase-name amenn
ambee copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore amenn
ambee copy-text code-function-branch-part-1 runtime-code-function-branch amenn
ambee append-text-no-space phrase-name runtime-code-function-branch amenn
ambee append-text-no-space code-function-branch-part-2 runtime-code-function-branch amenn
ambee append-text-no-space phrase-name-with-underscores runtime-code-function-branch amenn
ambee append-text-no-space code-function-branch-part-3 runtime-code-function-branch amenn
ambee copy-from-phrase-append-to-file runtime-code-function-branch ambee filename-output-results-all-function-branches amenn amenn
----
generate-runtime-code-for-one-function-replacement-only:
ambee copy-text word-to-use-in-handler phrase-name amenn
ambee copy-and-replace phrase-name phrase-name-with-underscores character-hyphen character-underscore amenn
ambee copy-text code-function-replacement-only-part-1 runtime-code-function-replacement-only amenn
ambee append-text-no-space phrase-name-with-underscores runtime-code-function-replacement-only amenn
ambee append-text-no-space code-function-replacement-only-part-2 runtime-code-function-replacement-only amenn
ambee append-text-no-space phrase-name runtime-code-function-replacement-only amenn
ambee append-text-no-space code-function-replacement-only-part-3 runtime-code-function-replacement-only amenn
ambee copy-from-phrase-append-to-file runtime-code-function-replacement-only ambee filename-output-results-functions-replacement-only amenn amenn
----
generate-runtime-code-for-phrase-definition-simple:
ambee copy-text code-phrase-definition-simple-part-1 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple amenn
ambee append-text code-phrase-definition-simple-part-2 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space phrase-being-defined runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space code-phrase-definition-simple-part-3 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple amenn
ambee append-text code-phrase-definition-simple-part-4 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space list-of-tokens-in-current-definition-quotable runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space code-phrase-definition-simple-part-5 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space pointer-storage-position-for-phrase-name runtime-code-for-phrase-definition-simple amenn
ambee append-text code-phrase-definition-simple-part-6 runtime-code-for-phrase-definition-simple amenn
ambee append-text-no-space pointer-storage-position-for-phrase-definition runtime-code-for-phrase-definition-simple amenn
ambee append-text code-phrase-definition-simple-part-7 runtime-code-for-phrase-definition-simple amenn
----
generate-runtime-code-using-quoted-string:
ambee numeric-increment storage-item-pointer amenn
ambee copy-text storage-item-pointer storage-item-pointer-for fenambee word-to-use-in-handler amenn amenn
ambee copy-text code-quoted-string-storage-item-part-1 generated-runtime-code amenn
ambee append-text-no-space storage-item-pointer generated-runtime-code amenn
ambee append-text-no-space code-quoted-string-storage-item-part-2 generated-runtime-code amenn
ambee append-text template-quoted fenambee word-to-use-in-handler amenn generated-runtime-code amenn
ambee append-text code-quoted-string-storage-item-part-3 generated-runtime-code amenn
ambee append-text-no-space word-to-use-in-handler generated-runtime-code amenn
ambee append-text-no-space code-quoted-string-storage-item-part-4 generated-runtime-code amenn
ambee append-text-no-space storage-item-pointer generated-runtime-code amenn
ambee append-text-no-space code-quoted-string-storage-item-part-5 generated-runtime-code amenn
ambee append-text-no-space generated-runtime-code output-results-all-storage-items amenn
----
generate-storage-for-current-text:
ambee create-new-text-storage-position amenn
ambee copy-text code-for-text-storage-position-part-1 runtime-code-for-storage-in-current-definition amenn
ambee append-text-no-space current-text-storage-position runtime-code-for-storage-in-current-definition amenn
ambee append-text code-for-text-storage-position-part-2 runtime-code-for-storage-in-current-definition amenn
ambee copy-and-replace current-text current-text-quotable character-apostrophe string-placeholder-special amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-apostrophe-within-quoted-text amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-apostrophe character-apostrophe amenn
ambee copy-and-replace current-text-quotable current-text-quotable character-backslash string-placeholder-special amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-placeholder-special code-for-backslash-within-quoted-text amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-placeholder-character-backslash character-backslash amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-apostrophe-apostrophe-space-period-space empty-text amenn
ambee copy-and-replace current-text-quotable current-text-quotable string-space-period-space-apostrophe-apostrophe empty-text amenn
ambee append-text-no-space current-text-quotable runtime-code-for-storage-in-current-definition amenn
ambee append-text-no-space code-for-text-storage-position-part-3 runtime-code-for-storage-in-current-definition amenn
ambee copy-from-phrase-append-to-file runtime-code-for-storage-in-current-definition ambee filename-output-results-all-definition-items amenn amenn
----
generate-versions-of-function-point-to-word-in-operand:
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-one string-whichever string-one amenn
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-two string-whichever string-two amenn
ambee copy-and-replace template-function-point-to-words-in-operand-whichever template-function-point-to-words-in-operand-three string-whichever string-three amenn
----
get-all-operands:
ambee copy-text digit-0 number-of-operands amenn
ambee copy-text list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn list-of-operands-raw amenn
ambee copy-without-extra-spaces list-of-operands-raw list-of-operands-raw amenn
ambee copy-and-replace list-of-operands-raw list-of-operands-for-counting string-space-fen-space string-placeholder-fen amenn
ambee copy-and-replace list-of-operands-for-counting list-of-operands-for-counting string-space-nospay-space string-placeholder-nospay amenn
ambee put-into-phrase number-of-operands ambee get-count-of-words list-of-operands-for-counting amenn amenn
ambee copy-text list-of-operands-for-counting operand-or-operands amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-concatenated-all-operands amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase runtime-code-for-concatenated-all-operands amenn amenn
ambee copy-text runtime-code-concatenated-empty runtime-code-for-concatenated-all-operands amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-same-two-words less ambee numeric-equal-greater-less-compare ambee number-of-operands amenn 1  amenn amenn amenn
ambee copy-word-at-position list-of-operands-for-counting operand-or-operands 1  amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-operand-number-one amenn
ambee if-else amenn
ambee copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-one amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-same-two-words less ambee numeric-equal-greater-less-compare ambee number-of-operands amenn 2  amenn amenn amenn
ambee copy-word-at-position list-of-operands-for-counting operand-or-operands 2  amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-operand-number-two amenn
ambee if-else amenn
ambee copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-two amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-same-two-words less ambee numeric-equal-greater-less-compare ambee number-of-operands amenn 3  amenn amenn amenn
ambee copy-word-at-position list-of-operands-for-counting operand-or-operands 3  amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-operand-number-three amenn
ambee if-else amenn
ambee copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-three amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-same-two-words less ambee numeric-equal-greater-less-compare ambee number-of-operands amenn 4  amenn amenn amenn
ambee copy-word-at-position list-of-operands-for-counting operand-or-operands 4  amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-operand-number-four amenn
ambee if-else amenn
ambee copy-text runtime-code-concatenated-empty runtime-code-for-operand-number-four amenn
ambee if-end amenn
----
get-source-code-character-at-adjacent-position:
ambee copy-characters-from-position-to-position source-code-as-words adjacent-character ambee word-to-use-in-handler amenn ambee word-to-use-in-handler amenn amenn
ambee append-text adjacent-character list-of-adjacent-characters amenn
----
handle-definition-contains-ambee-amenn:
ambee copy-text string-outside current-state-of-if-branching amenn
ambee create-new-result-storage-position amenn
ambee copy-text current-result-storage-position result-storage-position-for-current-phrase amenn
ambee copy-text code-parameter-result-storage-part-1 runtime-code-for-result-storage-at-end-of-expand amenn
ambee append-text-no-space result-storage-position-for-current-phrase runtime-code-for-result-storage-at-end-of-expand amenn
ambee append-text code-parameter-result-storage-part-2 runtime-code-for-result-storage-at-end-of-expand amenn
ambee copy-from-phrase-append-to-file runtime-code-for-result-storage-at-end-of-expand ambee filename-output-results-all-definition-items amenn amenn

ambee copy-and-replace phrase-being-defined phrase-being-defined-with-underscores character-hyphen character-underscore amenn
ambee copy-text list-of-tokens-in-current-definition list-of-tokens-in-complex-definition amenn
ambee copy-text character-space list-of-tokens-without-ambee-amenn-fen amenn
ambee append-text-no-space list-of-tokens-in-current-definition list-of-tokens-without-ambee-amenn-fen amenn
ambee append-text-no-space character-space list-of-tokens-without-ambee-amenn-fen amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-fen-space string-placeholder-special amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-special string-space-hyphen-space amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-ambee-space string-placeholder-omit amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-space-amenn-space string-placeholder-omit amenn
ambee copy-and-replace list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen string-placeholder-omit character-space amenn
ambee copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-without-ambee-amenn-fen amenn

ambee copy-text code-compiled-function-part-1 runtime-code-compiled-function amenn
ambee append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function amenn
ambee append-text-no-space code-compiled-function-part-2 runtime-code-compiled-function amenn

combee **** todo: avoid need for workaround **** comenn
ambee put-into-phrase unique-phrase-number-for-phrase-name fenambee phrase-being-defined amenn  ambee unique-phrase-number amenn  amenn
ambee append-text unique-phrase-number-for-phrase-name fenambee phrase-being-defined amenn runtime-code-compiled-function amenn


ambee copy-and-replace code-compiled-function-part-3 code-compiled-function-part-3 string-placeholder-phrase-being-defined phrase-being-defined amenn
ambee append-text code-compiled-function-part-3 runtime-code-compiled-function amenn

ambee append-text string-placeholder-list-of-tokens-can-go-here runtime-code-compiled-function amenn
combee ****
ambee append-text list-of-tokens-in-current-definition runtime-code-compiled-function amenn
**** comenn

ambee append-text-no-space code-compiled-function-part-4 runtime-code-compiled-function amenn
ambee copy-from-phrase-append-to-file runtime-code-compiled-function ambee filename-output-results-all-compiled-functions amenn amenn

ambee copy-without-extra-spaces list-of-tokens-without-ambee-amenn-fen list-of-tokens-in-current-definition amenn
ambee handle-definition-simple amenn

ambee use-handler-with-each-word-in-phrase handle-token-next-case-1 list-of-tokens-in-complex-definition amenn

ambee terminate-branching-if-not-terminated amenn

ambee copy-text phrase-name-storage-position-for-definition-number fenambee current-definition-number amenn phrase-name-storage-position-for-current-definition amenn
ambee copy-text storage-position-for-word-list-associated-with-result-storage-position fenambee current-result-storage-position amenn storage-position-for-word-list-associated-with-current-result-storage-position amenn
ambee get-all-operands amenn
ambee copy-text code-compiled-function-part-5 runtime-code-compiled-function amenn
ambee append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function amenn
ambee append-text code-compiled-function-part-6 runtime-code-compiled-function amenn
ambee append-text runtime-code-for-concatenated-all-operands runtime-code-compiled-function amenn
ambee append-text code-compiled-function-part-7 runtime-code-compiled-function amenn
ambee append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function amenn
ambee append-text code-compiled-function-part-8 runtime-code-compiled-function amenn
ambee append-text-no-space result-storage-position-for-current-phrase runtime-code-compiled-function amenn
ambee append-text code-compiled-function-part-9 runtime-code-compiled-function amenn
ambee append-text-no-space phrase-being-defined-with-underscores runtime-code-compiled-function amenn
ambee append-text-no-space code-compiled-function-part-10 runtime-code-compiled-function amenn
ambee copy-from-phrase-append-to-file runtime-code-compiled-function ambee filename-output-results-all-compiled-functions amenn amenn
ambee append-text phrase-being-defined list-of-functions-generated amenn
ambee clear-phrase phrase-being-defined amenn
ambee clear-phrase list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
----
handle-definition-immediate:
ambee generate-list-of-tokens-in-current-definition-quotable amenn
ambee copy-and-replace list-of-tokens-in-current-definition-quotable phrase-definition-modified string-placeholder-space character-space amenn
ambee copy-without-extra-spaces phrase-definition-modified phrase-definition-modified amenn
ambee copy-and-replace phrase-definition-modified phrase-definition-modified string-space-new-line-in-brackets string-placeholder-special amenn
ambee copy-and-replace phrase-definition-modified phrase-definition-modified string-placeholder-special string-new-line-in-brackets amenn
ambee copy-and-replace phrase-definition-modified phrase-definition-modified string-new-line-in-brackets-space string-placeholder-special amenn
ambee copy-and-replace phrase-definition-modified phrase-definition-modified string-placeholder-special string-new-line-in-brackets amenn
ambee copy-and-replace phrase-definition-modified phrase-definition-modified string-new-line-in-brackets character-newline amenn
ambee copy-text phrase-definition-modified ambee immediate-definition-phrase-name amennfen modified amenn
----
handle-definition-simple-or-immediate:
ambee copy-text unique-phrase-number unique-phrase-number-for-phrase-name fenambee phrase-being-defined amenn amenn
ambee copy-text phrase-being-defined phrase-name-for-phrase-number fenambee unique-phrase-number amenn amenn
ambee copy-words-found-in-both-lists phrase-being-defined list-of-immediate-definition-phrases possible-immediate-definition-phrase-name amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase possible-immediate-definition-phrase-name amenn amenn
ambee handle-definition-simple amenn
ambee if-else amenn
ambee copy-text possible-immediate-definition-phrase-name immediate-definition-phrase-name amenn
ambee handle-definition-immediate amenn
ambee if-end amenn

ambee numeric-increment unique-phrase-number amenn
----
handle-definition-simple:
ambee create-new-text-storage-position amenn
ambee copy-text current-text-storage-position pointer-storage-position-for-phrase-name amenn
ambee create-new-text-storage-position amenn
ambee copy-text current-text-storage-position pointer-storage-position-for-phrase-definition amenn
ambee generate-list-of-tokens-in-current-definition-quotable amenn
ambee generate-runtime-code-for-phrase-definition-simple amenn
ambee copy-from-phrase-append-to-file runtime-code-for-phrase-definition-simple ambee filename-output-results-all-definition-items amenn amenn
----
handle-fen-and-nospay-within-operand-or-operands:
ambee copy-and-replace operand-or-operands operand-or-operands-step-1 character-space string-placeholder-special amenn
ambee copy-and-replace operand-or-operands-step-1 operand-or-operands-step-2 string-placeholder-fen runtime-code-between-items-for-concatenation-type-fen amenn
ambee copy-and-replace operand-or-operands-step-2 operand-or-operands-step-3 string-placeholder-nospay runtime-code-between-items-for-concatenation-type-nospay amenn
ambee copy-and-replace operand-or-operands-step-3 operand-or-operands string-placeholder-special runtime-code-inserted-separator-space amenn
----
handle-non-zero-count-of-ambee-minus-amenn-tokens:
ambee copy-text warning-ambee-amenn-imbalance-introduction warning-message amenn
ambee append-text phrase-being-defined warning-message amenn

ambee if-yes-begin ambee yes-or-no-same-two-words greater ambee numeric-equal-greater-less-compare ambee count-of-ambee-tokens amenn ambee count-of-amenn-tokens amenn amenn amenn amenn
ambee append-text warning-more-ambee-than-amenn-tokens warning-message amenn
ambee if-else amenn
ambee append-text warning-more-amenn-than-ambee-tokens warning-message amenn
ambee if-end amenn

ambee append-text-no-space warning-message warning-messages amenn
----
handle-token-ambee:
ambee copy-text digit-0 count-of-tokens-after-ambee amenn
ambee recursion-stack-push amenn
ambee create-new-result-storage-position amenn
ambee copy-text code-parameter-result-storage-part-1 runtime-code-for-parameter-result-storage amenn
ambee append-text-no-space current-result-storage-position runtime-code-for-parameter-result-storage amenn
ambee append-text code-parameter-result-storage-part-2 runtime-code-for-parameter-result-storage amenn
ambee copy-from-phrase-append-to-file runtime-code-for-parameter-result-storage ambee filename-output-results-all-definition-items amenn amenn
ambee clear-phrase action-name-at-storage-position fenambee current-result-storage-position amenn amenn
ambee append-text string-ambee definition-for-phrase-being-defined amenn
----
handle-token-amenn-case-action-check-operand-count:
ambee get-all-operands amenn

ambee if-yes-begin ambee yes-or-no-same-two-phrase-definitions number-of-operands required-operand-count-for-action fenambee action-name amenn amenn amenn
ambee handle-token-amenn-case-action-might-have-template amenn
ambee if-else amenn
ambee expand-text template-runtime-code-wrong-number-of-operands runtime-code-for-parameter-phrase amenn
ambee append-text action-name list-of-dashrep-actions-with-wrong-number-of-operands amenn
ambee if-end amenn
----
handle-token-amenn-case-action-might-have-template:
ambee if-yes-begin ambee yes-or-no-empty-phrase template-runtime-code-for-action fenambee action-name amenn amenn amenn
ambee copy-word-at-position list-of-counts-as-words operand-count-as-word ambee number-of-operands amenn amenn
ambee expand-text template-runtime-code-standard-for-operand-count fenambee operand-count-as-word amenn runtime-code-for-parameter-phrase amenn
ambee if-else amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee if-end amenn
----
handle-token-amenn-case-action-not-empty:
ambee append-text string-amenn definition-for-phrase-being-defined amenn
ambee copy-text current-result-storage-position storage-item-pointer amenn
ambee expand-text template-runtime-code-storage-item-with-pointer runtime-code-storage-item-result amenn
ambee copy-text action-name-at-storage-position fenambee current-result-storage-position amenn action-name amenn
ambee put-into-phrase yes-or-no-action-recognized  no  amenn
ambee clear-phrase runtime-code-for-parameter-phrase amenn

ambee if-no-begin ambee yes-or-no-empty-phrase template-runtime-code-for-action fenambee action-name amenn amenn amenn
ambee put-into-phrase yes-or-no-action-recognized  yes  amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-empty-phrase required-operand-count-for-action fenambee action-name amenn amenn amenn
ambee put-into-phrase yes-or-no-action-recognized  yes  amenn
ambee if-end amenn

ambee copy-words-found-in-both-lists action-name list-of-not-really-action-names possible-not-really-action-name amenn

ambee if-no-begin ambee yes-or-no-empty-phrase possible-not-really-action-name amenn amenn
ambee put-into-phrase yes-or-no-action-recognized  no  amenn
ambee if-end amenn

ambee if-yes-begin ambee yes-or-no-action-recognized amenn amenn
ambee handle-token-amenn-case-action-recognized amenn
ambee if-else amenn
ambee handle-token-amenn-case-action-not-recognized amenn
ambee if-end amenn

ambee generate-code-for-one-action amenn
----
handle-token-amenn-case-action-not-recognized:
ambee copy-word-at-position definition-for-phrase-being-defined next-to-last-word-in-phrase-being-defined ambee numeric-minus ambee get-count-of-words definition-for-phrase-being-defined amenn 1  amenn amenn

ambee if-no-begin ambee yes-or-no-same-two-phrase-definitions next-to-last-word-in-phrase-being-defined action-name amenn amenn
ambee append-text action-name list-of-action-names-not-recognized amenn
ambee if-end amenn

ambee handle-token-amenn-case-executable-phrase amenn
----
handle-token-amenn-case-action-possible-variable-operand-count:
ambee if-no-begin ambee yes-or-no-empty-phrase required-operand-count-for-action fenambee action-name amenn amenn amenn
ambee handle-token-amenn-case-action-check-operand-count amenn
ambee if-else amenn
ambee get-all-operands amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee if-end amenn
----
handle-token-amenn-case-action-recognized:
ambee append-text action-name list-of-dashrep-actions-used amenn
ambee copy-and-replace action-name action-name-with-underscores character-hyphen character-underscore amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase handle-token-amenn-case fenambee action-name amenn amenn amenn
ambee handle-token-amenn-case-action-possible-variable-operand-count amenn
ambee if-else amenn
ambee handle-token-amenn-case fenambee action-name amenn amenn
ambee if-end amenn

ambee if-no-begin ambee yes-or-no-empty-phrase template-function fenambee action-name amenn amenn amenn
ambee put-into-phrase requested-template-function  template-function fenambee action-name amenn  amenn
ambee append-text requested-template-function list-of-template-functions-for-requested-actions amenn
ambee if-end amenn
----
handle-token-amenn-case-executable-phrase:
ambee copy-text digit-0 number-of-operands amenn
ambee copy-text string-two-apostrophes runtime-code-for-concatenated-all-operands amenn
ambee numeric-increment current-accumulator-pointer amenn
ambee copy-text action-name current-text amenn
ambee generate-storage-for-current-text amenn
ambee copy-text runtime-code-storage-item-reference-before-pointer operand-instead-of-action-name amenn
ambee append-text-no-space current-text-storage-position operand-instead-of-action-name amenn
ambee append-text-no-space runtime-code-storage-item-reference-after-pointer operand-instead-of-action-name amenn
ambee copy-text operand-instead-of-action-name list-of-operands-raw amenn
ambee append-text list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn list-of-operands-raw amenn
ambee copy-text operand-or-operands saved-operand-or-operands amenn


combee ****
ambee trace-show list-of-operands-raw amenn
**** comenn


ambee copy-without-extra-spaces list-of-operands-raw operand-or-operands amenn
ambee copy-words-found-in-both-lists operand-or-operands string-fen not-empty-if-operands-include-fen amenn
ambee copy-and-replace operand-or-operands operand-or-operands string-space-fen-space string-placeholder-fen amenn
ambee copy-and-replace operand-or-operands operand-or-operands string-space-nospay-space string-placeholder-nospay amenn
ambee handle-fen-and-nospay-within-operand-or-operands amenn
ambee copy-text operand-or-operands runtime-code-for-executable-phrase amenn


combee ****
ambee trace-show operand-or-operands amenn
**** comenn


ambee copy-text saved-operand-or-operands operand-or-operands amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase not-empty-if-operands-include-fen amenn amenn
ambee append-text action-name list-of-function-branches-needed amenn
ambee expand-text template-runtime-code-for-action-executable-phrase-without-fen runtime-code-for-parameter-phrase amenn
ambee if-else amenn
ambee expand-text template-runtime-code-for-action-executable-phrase runtime-code-for-parameter-phrase amenn
ambee if-end amenn

ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-code-for-executable-phrase runtime-code-for-executable-phrase amenn
ambee copy-and-replace action-name action-name-with-underscores character-hyphen character-underscore amenn
ambee copy-and-replace runtime-code-for-parameter-phrase runtime-code-for-parameter-phrase string-placeholder-code-for-executable-phrase-with-underscores action-name-with-underscores amenn
----
handle-token-amenn-case-expand-text:
ambee numeric-increment current-accumulator-pointer amenn
ambee get-all-operands amenn
ambee append-text action-name list-of-dashrep-actions-used amenn
ambee expand-text template-runtime-code-for-action-expand-text runtime-code-for-parameter-phrase amenn
----
handle-token-amenn-case-if-else:
ambee start-branching-if-not-started amenn
ambee get-all-operands amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee copy-text string-else current-state-of-if-branching amenn
----
handle-token-amenn-case-if-end:
ambee start-branching-if-not-started amenn
ambee get-all-operands amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee copy-text string-outside current-state-of-if-branching amenn
----
handle-token-amenn-case-if-no-begin:
ambee terminate-branching-if-not-terminated amenn
ambee get-all-operands amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee copy-text string-begin current-state-of-if-branching amenn
----
handle-token-amenn-case-if-yes-begin:
ambee terminate-branching-if-not-terminated amenn
ambee get-all-operands amenn
ambee expand-text template-runtime-code-for-action fenambee action-name amenn runtime-code-for-parameter-phrase amenn
ambee copy-text string-begin current-state-of-if-branching amenn
----
handle-token-amenn-case-use-handler-with-each-word-in-phrase:
ambee create-new-text-storage-position amenn
ambee clear-phrase contents-at-storage-position fenambee current-text-storage-position amenn amenn
ambee copy-text current-text-storage-position storage-position-for-word-list-associated-with-result-storage-position fenambee current-result-storage-position amenn amenn
ambee copy-text storage-position-for-word-list-associated-with-result-storage-position fenambee current-result-storage-position amenn storage-position-for-word-list-associated-with-loop amenn
ambee expand-text template-runtime-code-for-word-list-storage-position runtime-code-for-word-list-storage-position amenn
ambee copy-from-phrase-append-to-file runtime-code-for-word-list-storage-position ambee filename-output-results-all-definition-items amenn amenn
ambee get-all-operands amenn
ambee copy-word-at-position text-words-at-result-storage-position fenambee current-result-storage-position amenn handler-name 1  amenn
ambee copy-and-replace handler-name handler-name-with-underscores character-hyphen character-underscore amenn
ambee copy-word-at-position text-words-at-result-storage-position fenambee current-result-storage-position amenn phrase-name-for-list-of-words-for-loop 2  amenn
ambee expand-text template-runtime-code-for-action-use-handler-with-each-word-in-phrase runtime-code-for-parameter-phrase amenn
----
handle-token-amenn:
ambee if-no-begin ambee yes-or-no-empty-phrase action-name-at-storage-position fenambee current-result-storage-position amenn amenn amenn
ambee handle-token-amenn-case-action-not-empty amenn
ambee if-else amenn
ambee expand-text template-runtime-code-for-action-not-recognized runtime-code-for-parameter-phrase amenn
ambee generate-code-for-one-action amenn
ambee if-end amenn
----
handle-token-fen:
ambee append-text string-fen definition-for-phrase-being-defined amenn
ambee append-text string-fen list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
----
handle-token-next-case-1:
ambee copy-text word-to-use-in-handler current-token amenn
ambee numeric-increment count-of-tokens-after-ambee amenn
ambee copy-words-found-in-both-lists current-token list-ambee-amenn-fen-nospay non-empty-if-valid-token-handler-name amenn

ambee if-yes-begin ambee yes-or-no-empty-phrase non-empty-if-valid-token-handler-name amenn amenn
ambee handle-token-next-case-2 amenn
ambee if-else amenn
ambee handle-token fenambee current-token amenn amenn
ambee if-end amenn
----
handle-token-next-case-2:
ambee if-no-begin ambee yes-or-no-empty-phrase phrase-being-defined amenn amenn
ambee handle-token-next-case-3 amenn
ambee if-else amenn
ambee handle-token-phrase-name amenn
ambee if-end amenn
----
handle-token-next-case-3:
ambee append-text current-token definition-for-phrase-being-defined amenn

ambee if-no-begin ambee yes-or-no-same-two-phrase-definitions digit-1 count-of-tokens-after-ambee amenn amenn
ambee handle-token-text-word amenn
ambee if-else amenn
ambee copy-text current-token action-name-at-storage-position fenambee current-result-storage-position amenn amenn
ambee if-end amenn
----
handle-token-nospay:
ambee append-text string-nospay definition-for-phrase-being-defined amenn
ambee append-text string-nospay list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
----
handle-token-phrase-name:
ambee copy-text current-token phrase-being-defined amenn
ambee numeric-increment current-definition-number amenn
ambee copy-text phrase-being-defined current-text amenn
ambee generate-storage-for-current-text amenn
ambee copy-text current-text-storage-position phrase-name-storage-position-for-definition-number fenambee current-definition-number amenn amenn
ambee clear-phrase current-text amenn
ambee create-new-result-storage-position amenn
ambee clear-phrase list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
ambee clear-phrase recursion-stack amenn
ambee recursion-stack-push amenn
ambee copy-text current-definition-number phrase-number-for-phrase-name fenambee phrase-being-defined amenn amenn
ambee copy-text phrase-being-defined phrase-name-for-phrase-number fenambee current-definition-number amenn amenn
ambee clear-phrase definition-for-phrase-being-defined amenn
----
handle-token-text-word:
ambee copy-text current-token current-text amenn
ambee generate-storage-for-current-text amenn
ambee append-text current-text contents-at-storage-position fenambee current-text-storage-position amenn amenn
ambee append-text current-text text-words-at-result-storage-position fenambee current-result-storage-position amenn amenn
ambee copy-text runtime-code-storage-item-reference-before-pointer current-storage-operand amenn
ambee append-text-no-space current-text-storage-position current-storage-operand amenn
ambee append-text-no-space runtime-code-storage-item-reference-after-pointer current-storage-operand amenn
ambee append-text current-storage-operand list-of-operands-for-result-storage-position fenambee current-result-storage-position amenn amenn
----
initialize-input-output-files:
combee **** reminder: avoid backslashs here because they get interpreted in the runtime code **** comenn
ambee copy-text character-period dashrep-path-prefix-for-file-writing amenn
ambee append-text-no-space character-backslash dashrep-path-prefix-for-file-writing amenn
ambee copy-text dashrep-path-prefix-for-file-writing dashrep-path-prefix-for-file-reading amenn

ambee put-into-phrase input-filename  input_to_dashrep_compiler.txt  amenn
ambee put-into-phrase filename-output-results-from-compiler  output_from_dashrep_compiler.txt  amenn
ambee delete-file ambee filename-output-results-from-compiler amenn amenn
ambee put-into-phrase filename-output-standard-runtime-functions  output_compiler_standard_runtime_functions.txt  amenn
ambee delete-file ambee filename-output-standard-runtime-functions amenn amenn
ambee put-into-phrase filename-output-results-all-definition-items  output_compiler_all_definition_items.txt  amenn
ambee delete-file ambee filename-output-results-all-definition-items amenn amenn
ambee put-into-phrase filename-output-results-all-function-branches  output_compiler_all_function_branches.txt  amenn
ambee delete-file ambee filename-output-results-all-function-branches amenn amenn
ambee put-into-phrase filename-output-results-functions-replacement-only  output_compiler_functions_replacement_only.txt  amenn
ambee delete-file ambee filename-output-results-functions-replacement-only amenn amenn
ambee put-into-phrase filename-output-results-all-compiled-functions  output_compiler_all_compiled_functions.txt  amenn
ambee delete-file ambee filename-output-results-all-compiled-functions amenn amenn
ambee put-into-phrase filename-output-all-definitions-complex  output_compiler_all_tokens_for_definitions_complex.txt  amenn
ambee delete-file ambee filename-output-all-definitions-complex amenn amenn
ambee put-into-phrase filename-output-all-phrase-names-complex  output_compiler_all_phrase_names_complex.txt  amenn
ambee delete-file ambee filename-output-all-phrase-names-complex amenn amenn
ambee put-into-phrase filename-output-debug-trace-all-dashrep-definitions  output_compiler_debug_trace_all_definitions.txt  amenn
ambee delete-file ambee filename-output-debug-trace-all-dashrep-definitions amenn amenn
----
list-of-not-really-action-names:
recognized
not-recognized
executable-phrase-begin
executable-phrase-end
executable-phrase-without-fen
unchanged
----
recursion-stack-pop-case-empty:
ambee put-into-phrase current-result-storage-position  0  amenn

combee ****
ambee copy-text warning-ambee-amenn-imbalance-introduction warning-message amenn
ambee append-text phrase-being-defined warning-message amenn
ambee append-text warning-more-amenn-than-ambee-tokens warning-message amenn
ambee append-text-no-space warning-message warning-messages amenn
**** comenn
----
recursion-stack-pop-case-not-empty:
ambee if-yes-begin ambee yes-or-no-same-two-words greater ambee numeric-equal-greater-less-compare ambee position-top-of-stack amenn 1  amenn amenn amenn
ambee copy-word-at-position recursion-stack current-result-storage-position ambee position-top-of-stack amenn amenn
ambee numeric-decrement position-top-of-stack amenn
ambee copy-words-from-position-to-position recursion-stack recursion-stack 1 ambee position-top-of-stack amenn amenn
ambee if-else amenn
ambee copy-text recursion-stack current-result-storage-position amenn
ambee clear-phrase recursion-stack amenn
ambee if-end amenn
----
recursion-stack-pop:
ambee put-into-phrase position-top-of-stack  ambee get-count-of-words recursion-stack amenn  amenn

ambee if-no-begin ambee yes-or-no-same-two-words less ambee numeric-equal-greater-less-compare ambee position-top-of-stack amenn 1  amenn amenn amenn
ambee recursion-stack-pop-case-not-empty amenn
ambee if-else amenn
ambee recursion-stack-pop-case-empty amenn
ambee if-end amenn

combee ****
ambee recursion-stack-show amenn
**** comenn
----
recursion-stack-push:
ambee append-text current-result-storage-position recursion-stack amenn

combee ****
ambee recursion-stack-show amenn
**** comenn
----
remove-colon-if-at-end-of-phrase-being-defined:
ambee put-into-phrase phrase-length  ambee get-count-of-characters phrase-being-defined amenn  amenn
ambee copy-characters-from-position-to-position phrase-being-defined possible-colon ambee phrase-length amenn ambee phrase-length amenn amenn

ambee if-yes-begin ambee yes-or-no-same-two-phrase-definitions possible-colon character-colon amenn amenn
ambee copy-characters-from-position-to-position phrase-being-defined phrase-being-defined 1 ambee numeric-minus ambee phrase-length amenn 1  amenn amenn
ambee if-end amenn
----
run-compiler:
ambee initialize-input-output-files amenn
ambee copy-from-file-to-phrase ambee input-filename amenn source-code amenn
ambee compile-source-code-generate-output-results amenn
ambee put-into-phrase yes-or-no-export-delimited-definitions  yes  amenn

combee ****
ambee generate-list-of-all-dashrep-phrases list-of-all-dashrep-phrases amenn
**** comenn

ambee write-results-to-output-file amenn

combee ****
ambee write-dashrep-definitions-listed-in-phrase-to-file list-of-all-dashrep-phrases ambee filename-output-debug-trace-all-dashrep-definitions amenn amenn
**** comenn

ambee check-elapsed-time amenn
----
start-branching-if-not-started:
ambee if-yes-begin ambee yes-or-no-same-two-phrase-definitions current-state-of-if-branching string-outside amenn amenn
ambee copy-from-phrase-append-to-file runtime-code-for-overdue-start-of-if-branch ambee filename-output-results-all-compiled-functions amenn amenn
ambee if-end amenn
----
start-here:
ambee run-compiler amenn
----
terminate-branching-if-not-terminated:
ambee if-no-begin ambee yes-or-no-same-two-phrase-definitions current-state-of-if-branching string-outside amenn amenn
ambee expand-text template-runtime-code-for-overdue-terminate-if-branch runtime-code-for-overdue-terminate-if-branch amenn
ambee copy-from-phrase-append-to-file runtime-code-for-overdue-terminate-if-branch ambee filename-output-results-all-compiled-functions amenn amenn
ambee if-end amenn
----
write-results-to-output-file:
ambee if-no-begin ambee yes-or-no-empty-phrase warning-messages amenn amenn
ambee copy-text runtime-code-at-top-if-warning-message output-warning-messages amenn
ambee append-text-no-space warning-messages output-warning-messages amenn
ambee append-text-no-space new-empty-lines output-warning-messages amenn
ambee copy-from-phrase-append-to-file output-warning-messages ambee filename-output-results-from-compiler amenn amenn
ambee if-end amenn

ambee copy-from-phrase-append-to-file segment-start-object-code-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-text character-pound-sign start-object-code-in-executable-code amenn
ambee append-text source-code-copyright-notice start-object-code-in-executable-code amenn
ambee copy-from-phrase-append-to-file start-object-code-in-executable-code ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file segment-start-object-code-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-optional-import-statements-begin ambee filename-output-results-from-compiler amenn amenn

ambee if-no-begin ambee yes-or-no-empty-phrase optional-import-statements-modified amenn amenn
ambee copy-from-phrase-append-to-file optional-import-statements-modified ambee filename-output-results-from-compiler amenn amenn
ambee if-end amenn

ambee copy-from-phrase-append-to-file segment-optional-import-statements-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-initialize-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file initialize-global-arrays ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file initialize-global-variables ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file output-results-all-storage-items ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-initialize-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-definition-items-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-append-file-to-file ambee filename-output-results-all-definition-items amenn ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file segment-definition-items-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-branch-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-append-file-to-file ambee filename-output-results-all-function-branches amenn ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file segment-branch-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-functions-replacement-only-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-append-file-to-file ambee filename-output-results-functions-replacement-only amenn ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file segment-functions-replacement-only-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-functions-compiled-begin ambee filename-output-results-from-compiler amenn amenn
ambee copy-append-file-to-file ambee filename-output-results-all-compiled-functions amenn ambee filename-output-results-from-compiler amenn amenn
ambee copy-from-phrase-append-to-file segment-functions-compiled-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-optional-extra-runtime-functions-begin ambee filename-output-results-from-compiler amenn amenn

ambee if-no-begin ambee yes-or-no-empty-phrase optional-extra-runtime-functions-modified amenn amenn
ambee copy-from-phrase-append-to-file optional-extra-runtime-functions-modified ambee filename-output-results-from-compiler amenn amenn
ambee if-end amenn

ambee copy-from-phrase-append-to-file segment-optional-extra-runtime-functions-end ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-functions-runtime-begin ambee filename-output-results-from-compiler amenn amenn

ambee copy-words-found-only-in-first-list list-of-template-functions-for-requested-actions list-of-template-functions list-of-template-functions-for-requested-actions amenn
ambee copy-words-unique-only list-of-template-functions-for-requested-actions list-of-template-functions-for-requested-actions amenn

ambee expand-text list-of-template-functions output-results-all-runtime-functions amenn
ambee copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-hyphen-here string-bracketed-hyphen-here amenn
ambee copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-new-line string-bracketed-new-line amenn
ambee copy-and-replace output-results-all-runtime-functions output-results-all-runtime-functions bracketed-placeholder-for-empty-line string-bracketed-empty-line amenn
ambee copy-from-phrase-append-to-file output-results-all-runtime-functions ambee filename-output-results-from-compiler amenn amenn

ambee copy-from-phrase-append-to-file segment-functions-runtime-end ambee filename-output-results-from-compiler amenn amenn
----
bracketed-placeholder-for-empty-line:
<placeholder_for_empty_line>
----
bracketed-placeholder-for-hyphen-here:
<placeholder_for_hyphen_here>
----
bracketed-placeholder-for-new-line:
<placeholder_for_new_line>
----
build-paired-replacements-for-converting-hyphens-into-defenns:
ambee prepend-text string-defenn paired-replacements-for-converting-hyphens-into-defenns amenn
ambee prepend-text string-of-hyphens paired-replacements-for-converting-hyphens-into-defenns amenn
ambee prepend-text-no-space character-hyphen string-of-hyphens amenn
----
build-paired-replacements-for-converting-to-combee-comenn:
ambee prepend-text-no-space character-hyphen string-hyphens-and-asterisk amenn
ambee append-text-no-space character-hyphen string-asterisk-and-hyphens amenn
ambee prepend-text string-comenn paired-replacements-for-converting-to-combee-comenn amenn
ambee prepend-text string-hyphens-and-asterisk paired-replacements-for-converting-to-combee-comenn amenn
ambee prepend-text string-combee paired-replacements-for-converting-to-combee-comenn amenn
ambee prepend-text string-asterisk-and-hyphens paired-replacements-for-converting-to-combee-comenn amenn
----
character-apostrophe:
'
----
character-backslash:
\
----
character-close-angle-bracket:
>
----
character-close-bracket:
]
----
character-colon:
:
----
character-e:
e
----
character-equal-sign:
=
----
character-f:
f
----
character-n:
n
----
character-open-angle-bracket:
<
----
character-open-bracket:
[
----
character-period:
.
----
character-pound-sign:
#
----
character-quotation-mark:
"
----
character-semicolon:
;
----
character-underscore:
_
----
count-of-ambee-tokens:
0
----
count-of-amenn-tokens:
0
----
current-accumulator-pointer:
1
----
dashes-long-line:
dashes-twenty no-space dashes-twenty no-space dashes-twenty
----
dashes-twenty:
four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens no-space four-hyphens
----
dashrep-compiled-code-output-phrase-name:
----
define-special-strings-that-are-padded-with-spaces:
ambee copy-text string-ambee string-space-ambee-space amenn
ambee prepend-text-no-space character-space string-space-ambee-space amenn
ambee append-text-no-space character-space string-space-ambee-space amenn

ambee copy-text string-amenn string-space-amenn-space amenn
ambee prepend-text-no-space character-space string-space-amenn-space amenn
ambee append-text-no-space character-space string-space-amenn-space amenn

ambee copy-text string-fen string-space-fen-space amenn
ambee prepend-text-no-space character-space string-space-fen-space amenn
ambee append-text-no-space character-space string-space-fen-space amenn

ambee copy-text string-hyphen-here string-space-hyphen-here-space amenn
ambee prepend-text-no-space character-space string-space-hyphen-here-space amenn
ambee append-text-no-space character-space string-space-hyphen-here-space amenn

ambee copy-text string-combee string-space-combee-space amenn
ambee prepend-text-no-space character-space string-space-combee-space amenn
ambee append-text-no-space character-space string-space-combee-space amenn

ambee copy-text string-comenn string-space-comenn-space amenn
ambee prepend-text-no-space character-space string-space-comenn-space amenn
ambee append-text-no-space character-space string-space-comenn-space amenn

ambee copy-text code-concat string-space-concat-space amenn
ambee prepend-text-no-space character-space string-space-concat-space amenn
ambee append-text-no-space character-space string-space-concat-space amenn

ambee copy-text string-one-space string-space-one-space-space amenn
ambee prepend-text-no-space character-space string-space-one-space-space amenn
ambee append-text-no-space character-space string-space-one-space-space amenn

ambee copy-text character-hyphen string-space-hyphen-space amenn
ambee prepend-text-no-space character-space string-space-hyphen-space amenn
ambee append-text-no-space character-space string-space-hyphen-space amenn

ambee copy-text string-two-apostrophes string-apostrophe-apostrophe-space-period-space amenn
ambee append-text-no-space character-space string-apostrophe-apostrophe-space-period-space amenn
ambee append-text-no-space character-period string-apostrophe-apostrophe-space-period-space amenn
ambee append-text-no-space character-space string-apostrophe-apostrophe-space-period-space amenn

ambee copy-text character-space string-space-period-space-apostrophe-apostrophe amenn
ambee append-text-no-space character-period string-space-period-space-apostrophe-apostrophe amenn
ambee append-text-no-space character-space string-space-period-space-apostrophe-apostrophe amenn
ambee append-text-no-space string-two-apostrophes string-space-period-space-apostrophe-apostrophe amenn

ambee copy-text string-end-of string-space-end-of-line-here-space amenn
ambee prepend-text-no-space character-space string-space-end-of-line-here-space amenn
ambee append-text-no-space character-hyphen string-space-end-of-line-here-space amenn
ambee append-text-no-space string-line-here string-space-end-of-line-here-space amenn
ambee append-text-no-space character-space string-space-end-of-line-here-space amenn

ambee copy-text string-code-nospay-between-spaces-without-padded-spaces string-code-nospay-between-spaces amenn
ambee prepend-text-no-space character-space string-code-nospay-between-spaces amenn
ambee append-text-no-space character-space string-code-nospay-between-spaces amenn

ambee copy-text string-nospay string-space-nospay-space amenn
ambee prepend-text-no-space character-space string-space-nospay-space amenn
ambee append-text-no-space character-space string-space-nospay-space amenn

ambee copy-text string-amennfenambee string-space-amennfenambee-space amenn
ambee prepend-text-no-space character-space string-space-amennfenambee-space amenn
ambee append-text-no-space character-space string-space-amennfenambee-space amenn

ambee copy-text string-amenn string-space-amenn-fen-ambee-space amenn
ambee prepend-text-no-space character-space string-space-amenn-fen-ambee-space amenn
ambee append-text string-fen string-space-amenn-fen-ambee-space amenn
ambee append-text string-ambee string-space-amenn-fen-ambee-space amenn
ambee append-text-no-space character-space string-space-amenn-fen-ambee-space amenn

ambee copy-text string-nospay string-space-nospay-space amenn
ambee prepend-text-no-space character-space string-space-nospay-space amenn
ambee append-text-no-space character-space string-space-nospay-space amenn

ambee copy-text string-space-nospay-space string-space-nospay-space-nospay-space amenn
ambee append-text-no-space string-nospay string-space-nospay-space-nospay-space amenn
ambee append-text-no-space character-space string-space-nospay-space-nospay-space amenn
----
define-special-strings-that-cannot-be-spelled-in-full:
ambee copy-text character-f string-fen amenn
ambee append-text-no-space character-e string-fen amenn
ambee append-text-no-space character-n string-fen amenn

ambee copy-text string-am string-ambee amenn
ambee append-text-no-space string-bee string-ambee amenn

ambee copy-text string-am string-amenn amenn
ambee append-text-no-space string-enn string-amenn amenn

ambee copy-text string-amenn string-amennfen amenn
ambee append-text-no-space string-fen string-amennfen amenn

ambee copy-text string-com string-combee amenn
ambee append-text-no-space string-bee string-combee amenn

ambee copy-text string-com string-comenn amenn
ambee append-text-no-space string-enn string-comenn amenn

ambee copy-text string-def string-defenn amenn
ambee append-text-no-space string-enn string-defenn amenn

ambee copy-text string-fen string-fenambee amenn
ambee append-text-no-space string-bee string-fenambee amenn

ambee copy-text string-no string-nospay amenn
ambee append-text-no-space string-spay string-nospay amenn

ambee copy-text string-amenn string-amennfenambee amenn
ambee append-text-no-space string-fenambee string-amennfenambee amenn
----
define-special-strings-that-contain-hyphens:
ambee copy-text string-hyphen string-hyphen-here amenn
ambee append-text-no-space character-hyphen string-hyphen-here amenn
ambee append-text-no-space string-here string-hyphen-here amenn

ambee copy-text string-character string-character-hyphen amenn
ambee append-text-no-space character-hyphen string-character-hyphen amenn
ambee append-text-no-space string-hyphen string-character-hyphen amenn

ambee copy-text string-no string-no-space amenn
ambee append-text-no-space character-hyphen string-no-space amenn
ambee append-text-no-space string-space string-no-space amenn

ambee copy-text string-one string-one-space amenn
ambee append-text-no-space character-hyphen string-one-space amenn
ambee append-text-no-space string-space string-one-space amenn

ambee copy-text string-new string-new-line amenn
ambee append-text-no-space character-hyphen string-new-line amenn
ambee append-text-no-space string-line string-new-line amenn

ambee copy-text string-empty string-empty-line amenn
ambee append-text-no-space character-hyphen string-empty-line amenn
ambee append-text-no-space string-line string-empty-line amenn

ambee copy-text string-empty string-empty-text amenn
ambee append-text-no-space character-hyphen string-empty-text amenn
ambee append-text-no-space string-text string-empty-text amenn
----
define-special-strings:
ambee define-special-strings-that-cannot-be-spelled-in-full amenn
ambee define-special-strings-that-contain-hyphens amenn
ambee define-special-strings-that-are-padded-with-spaces amenn

ambee copy-text character-open-bracket string-open-bracket-dash amenn
ambee append-text-no-space character-hyphen string-open-bracket-dash amenn

ambee copy-text character-hyphen string-dash-close-bracket amenn
ambee append-text-no-space character-close-bracket string-dash-close-bracket amenn

ambee copy-text character-hyphen string-dash-open-bracket-dash amenn
ambee append-text-no-space string-open-bracket-dash string-dash-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-dash amenn
ambee append-text-no-space character-hyphen string-dash-close-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-dash-open-bracket-dash amenn
ambee append-text-no-space character-hyphen string-dash-close-bracket-dash-open-bracket-dash amenn
ambee append-text-no-space string-open-bracket-dash string-dash-close-bracket-dash-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-space-fen-space-open-bracket-dash amenn
ambee append-text string-fen string-dash-close-bracket-space-fen-space-open-bracket-dash amenn
ambee append-text string-open-bracket-dash string-dash-close-bracket-space-fen-space-open-bracket-dash amenn

ambee copy-text string-open-bracket-dash string-open-bracket-dash-open-bracket-dash amenn
ambee append-text-no-space string-open-bracket-dash string-open-bracket-dash-open-bracket-dash amenn

ambee copy-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash amenn
ambee append-text string-open-bracket-dash string-open-bracket-dash-space-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-dash-close-bracket amenn
ambee append-text-no-space string-dash-close-bracket string-dash-close-bracket-dash-close-bracket amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket amenn
ambee append-text string-dash-close-bracket string-dash-close-bracket-space-dash-close-bracket amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-open-bracket-dash amenn
ambee append-text-no-space string-open-bracket-dash string-dash-close-bracket-open-bracket-dash amenn

ambee copy-text string-dash-close-bracket string-dash-close-bracket-nospay-open-bracket-dash amenn
ambee append-text string-nospay string-dash-close-bracket-nospay-open-bracket-dash amenn
ambee append-text string-open-bracket-dash string-dash-close-bracket-nospay-open-bracket-dash amenn

ambee copy-text string-no-space string-space-no-space-character-hyphen-no-space-space amenn
ambee prepend-text-no-space character-space string-space-no-space-character-hyphen-no-space-space amenn
ambee append-text string-character-hyphen string-space-no-space-character-hyphen-no-space-space amenn
ambee append-text string-no-space string-space-no-space-character-hyphen-no-space-space amenn
ambee append-text-no-space character-space string-space-no-space-character-hyphen-no-space-space amenn

ambee copy-text string-fen string-space-fen-ambee-space amenn
ambee prepend-text-no-space character-space string-space-fen-ambee-space amenn
ambee append-text string-ambee string-space-fen-ambee-space amenn
ambee append-text-no-space character-space string-space-fen-ambee-space amenn

ambee copy-text string-amenn string-space-amenn-fen-space amenn
ambee prepend-text-no-space character-space string-space-amenn-fen-space amenn
ambee append-text string-fen string-space-amenn-fen-space amenn
ambee append-text-no-space character-space string-space-amenn-fen-space amenn

ambee copy-text string-fen string-space-fenambee-space amenn
ambee prepend-text-no-space character-space string-space-fenambee-space amenn
ambee append-text-no-space string-ambee string-space-fenambee-space amenn
ambee append-text-no-space character-space string-space-fenambee-space amenn

ambee copy-text string-amenn string-space-amennfen-space amenn
ambee prepend-text-no-space character-space string-space-amennfen-space amenn
ambee append-text-no-space string-fen string-space-amennfen-space amenn
ambee append-text-no-space character-space string-space-amennfen-space amenn

ambee copy-text character-period runtime-code-inserted-separator-space amenn
ambee append-text character-apostrophe runtime-code-inserted-separator-space amenn
ambee append-text character-apostrophe runtime-code-inserted-separator-space amenn
ambee append-text character-period runtime-code-inserted-separator-space amenn
ambee prepend-text-no-space character-space runtime-code-inserted-separator-space amenn
ambee append-text-no-space character-space runtime-code-inserted-separator-space amenn

ambee copy-text character-newline new-empty-line amenn
ambee copy-text new-empty-line new-empty-lines amenn
ambee append-text-no-space character-newline new-empty-lines amenn

ambee copy-text string-one-space string-space-one-space-no-space-space amenn
ambee prepend-text-no-space character-space string-space-one-space-no-space-space amenn
ambee append-text string-no-space string-space-one-space-no-space-space amenn
ambee append-text-no-space character-space string-space-one-space-no-space-space amenn

ambee copy-text string-no-space string-space-no-space-one-space-space amenn
ambee prepend-text-no-space character-space string-space-no-space-one-space-space amenn
ambee append-text string-one-space string-space-no-space-one-space-space amenn
ambee append-text-no-space character-space string-space-no-space-one-space-space amenn

ambee copy-text four-hyphens string-of-hyphens amenn
ambee generate-counts-from-integer-to-integer 2 8 list-2-to-8  amenn
ambee use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-hyphens-into-defenns list-2-to-8  amenn

ambee clear-phrase paired-replacements-for-converting-to-combee-comenn amenn
ambee put-into-phrase string-asterisk-and-hyphens  *  amenn
ambee put-into-phrase string-hyphens-and-asterisk  *  amenn
ambee append-text-no-space character-hyphen string-asterisk-and-hyphens amenn
ambee prepend-text-no-space character-hyphen string-hyphens-and-asterisk amenn
ambee generate-counts-from-integer-to-integer 2 8 list-2-to-8  amenn
ambee use-handler-with-each-word-in-phrase build-paired-replacements-for-converting-to-combee-comenn list-2-to-8  amenn

ambee copy-text character-period runtime-code-between-items-for-concatenation-type-fen amenn
ambee prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen amenn
ambee append-text character-apostrophe runtime-code-between-items-for-concatenation-type-fen amenn
ambee append-text-no-space character-hyphen runtime-code-between-items-for-concatenation-type-fen amenn
ambee append-text-no-space character-apostrophe runtime-code-between-items-for-concatenation-type-fen amenn
ambee append-text character-period runtime-code-between-items-for-concatenation-type-fen amenn
ambee append-text-no-space character-space runtime-code-between-items-for-concatenation-type-fen amenn

ambee copy-text character-period runtime-code-between-items-for-concatenation-type-nospay amenn
ambee prepend-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay amenn
ambee append-text-no-space character-space runtime-code-between-items-for-concatenation-type-nospay amenn

ambee copy-text character-apostrophe runtime-code-concatenated-empty amenn
ambee append-text-no-space character-apostrophe runtime-code-concatenated-empty amenn

ambee copy-text string-combee list-combee-comenn-defenn amenn
ambee append-text string-comenn list-combee-comenn-defenn amenn
ambee append-text string-defenn list-combee-comenn-defenn amenn

ambee copy-text string-ambee list-ambee-amenn amenn
ambee append-text string-amenn list-ambee-amenn amenn

ambee copy-text list-ambee-amenn list-ambee-amenn-fen-nospay amenn
ambee append-text string-fen list-ambee-amenn-fen-nospay amenn
ambee append-text string-nospay list-ambee-amenn-fen-nospay amenn

ambee copy-text string-placeholder-prefix string-placeholder-character-apostrophe amenn
ambee append-text-no-space string-apostrophe string-placeholder-character-apostrophe amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-character-apostrophe amenn

ambee copy-text string-placeholder-prefix string-placeholder-character-backslash amenn
ambee append-text-no-space string-backslash string-placeholder-character-backslash amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-character-backslash amenn

ambee copy-text string-placeholder-prefix string-placeholder-action-name amenn
ambee append-text-no-space string-action string-placeholder-action-name amenn
ambee append-text-no-space character-underscore string-placeholder-action-name amenn
ambee append-text-no-space string-name string-placeholder-action-name amenn
ambee copy-text string-placeholder-action-name string-placeholder-action-name-with-underscores amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-action-name amenn
ambee append-text-no-space character-underscore string-placeholder-action-name-with-underscores amenn
ambee append-text-no-space string-with string-placeholder-action-name-with-underscores amenn
ambee append-text-no-space character-underscore string-placeholder-action-name-with-underscores amenn
ambee append-text-no-space string-underscores string-placeholder-action-name-with-underscores amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-action-name-with-underscores amenn

ambee copy-text string-placeholder-prefix string-placeholder-omit amenn
ambee append-text-no-space string-omit string-placeholder-omit amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-omit amenn

ambee copy-text string-placeholder-prefix string-placeholder-fen amenn
ambee append-text-no-space string-fen string-placeholder-fen amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-fen amenn

ambee copy-text string-placeholder-prefix string-placeholder-nospay amenn
ambee append-text-no-space string-nospay string-placeholder-nospay amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-nospay amenn

ambee copy-text string-placeholder-prefix string-placeholder-special amenn
ambee append-text-no-space string-special string-placeholder-special amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-special amenn

ambee copy-text string-placeholder-prefix string-placeholder-phrase-being-defined amenn
ambee append-text-no-space string-phrase string-placeholder-phrase-being-defined amenn
ambee append-text-no-space character-underscore string-placeholder-phrase-being-defined amenn
ambee append-text-no-space string-being string-placeholder-phrase-being-defined amenn
ambee append-text-no-space character-underscore string-placeholder-phrase-being-defined amenn
ambee append-text-no-space string-defined string-placeholder-phrase-being-defined amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-phrase-being-defined amenn

ambee copy-text string-placeholder-prefix string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space string-code string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space character-underscore string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space string-for string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space character-underscore string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space string-executable string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space character-underscore string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space string-phrase string-placeholder-code-for-executable-phrase amenn
ambee copy-text string-placeholder-code-for-executable-phrase string-placeholder-code-for-executable-phrase-with-underscores amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-code-for-executable-phrase amenn
ambee append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-with-underscores amenn
ambee append-text-no-space string-with string-placeholder-code-for-executable-phrase-with-underscores amenn
ambee append-text-no-space character-underscore string-placeholder-code-for-executable-phrase-with-underscores amenn
ambee append-text-no-space string-underscores string-placeholder-code-for-executable-phrase-with-underscores amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-code-for-executable-phrase-with-underscores amenn

ambee copy-text character-open-angle-bracket string-placeholder-for-space-one-space-space amenn
ambee append-text-no-space string-one string-placeholder-for-space-one-space-space amenn
ambee append-text-no-space character-underscore string-placeholder-for-space-one-space-space amenn
ambee append-text-no-space string-space string-placeholder-for-space-one-space-space amenn
ambee append-text-no-space character-close-angle-bracket string-placeholder-for-space-one-space-space amenn

ambee copy-text template-new-empty-line string-new-line-in-brackets amenn
ambee copy-text string-new-line-in-brackets string-space-new-line-in-brackets amenn
ambee prepend-text-no-space character-space string-space-new-line-in-brackets amenn
ambee copy-text string-new-line-in-brackets string-new-line-in-brackets-space amenn
ambee append-text-no-space character-space string-new-line-in-brackets-space amenn

ambee copy-text character-open-angle-bracket string-bracketed-hyphen-here amenn
ambee append-text-no-space string-hyphen string-bracketed-hyphen-here amenn
ambee append-text-no-space character-underscore string-bracketed-hyphen-here amenn
ambee append-text-no-space string-here string-bracketed-hyphen-here amenn
ambee append-text-no-space character-close-angle-bracket string-bracketed-hyphen-here amenn

ambee copy-text character-open-angle-bracket string-bracketed-empty-line amenn
ambee append-text-no-space string-empty string-bracketed-empty-line amenn
ambee append-text-no-space character-underscore string-bracketed-empty-line amenn
ambee append-text-no-space string-line string-bracketed-empty-line amenn
ambee append-text-no-space character-close-angle-bracket string-bracketed-empty-line amenn

ambee copy-text character-open-angle-bracket string-bracketed-new-line amenn
ambee append-text-no-space string-new string-bracketed-new-line amenn
ambee append-text-no-space character-underscore string-bracketed-new-line amenn
ambee append-text-no-space string-line string-bracketed-new-line amenn
ambee append-text-no-space character-close-angle-bracket string-bracketed-new-line amenn
----
digit-0:
0
----
digit-1:
1
----
endless-loop-counter-limit-version-for-use-handler-loop:
100000
----
export-defs-all-begin:
<all_defs_begin>
----
export-defs-all-end:
<all_defs_end>
----
export-defs-def-begin:
<defs_def_begin>
----
export-defs-def-end:
<defs_def_end>
----
export-defs-phrase-begin:
<def_phrase_begin>
----
export-defs-phrase-end:
<def_phrase_end>
----
list-of-counts-as-words:
one two three four five six
----
list-of-function-branches-already-generated:
start-here
----
list-of-functions-in-optional-code:
----
list-of-immediate-definition-phrases:
optional-import-statements
optional-extra-runtime-functions
list-of-functions-in-optional-code
dashrep-time-limit
dashrep-endless-loop-counter-limit
----
list-of-phrases-with-quoted-strings:
non-breaking-space
empty-text
character-space
character-hyphen
four-hyphens
character-newline
line-break
character-tab
character-open-square-bracket
character-close-square-bracket
comments-ignored
dashrep-endless-loop-counter-limit
dashrep-gather-tag-begin
dashrep-gather-tag-end
dashrep-gather-tag-matching-id
dashrep-gather-tag-unique
dashrep-gather-tag-delete
dashrep-path-prefix-for-file-reading
dashrep-path-prefix-for-file-writing
dashrep-time-limit
dashrep-version
export-defs-all-begin
export-defs-all-end
export-defs-def-begin
export-defs-def-end
export-defs-phrase-begin
export-defs-phrase-end
linewise-input-line-from-file
linewise-input-line-count
list-of-compiled-executable-phrases
list-of-pointers-to-unique-words
list-of-unique-word-counts
numeric-map-tile-zoom
time-day-of-month
time-day-of-week
time-day-of-year
time-hour
time-minute
time-month-number
time-second
time-year
yes-or-no-indicate-line-endings
yes-or-no-permission-administrator
yes-or-no-permission-to-append-to-files
yes-or-no-permission-to-delete-or-overwrite-files
yes-or-no-use-two-spaces-as-column-delimiter
----
list-of-temporary-phrase-name-prefixes:
contents-at-storage-position-
action-name-at-storage-position-
storage-type-at-storage-position-
text-words-at-result-storage-position-
list-of-operands-for-result-storage-position-
storage-position-for-word-list-associated-with-result-storage-position-
----
object-code-copyright-notice:
(c) Copyright 2017 by the entity who owns the source code from which this object code was generated. ALL RIGHTS RESERVED.
----
optional-extra-runtime-functions:
----
optional-import-statements:
----
source-code-copyright-notice:
(c) Copyright 2016-2017 by Richard Fobes at www.github.com/cpsolver/Dashrep-language  ALL RIGHTS RESERVED.
----
storage-position-number:
0
----
string-action:
action
----
string-am:
am
----
string-apostrophe:
apostrophe
----
string-backslash:
backslash
----
string-bee:
bee
----
string-begin:
begin
----
string-being:
being
----
string-character-hyphen-in-brackets:
<character_hyphen>
----
string-character:
character
----
string-code:
code
----
string-com:
com
----
string-def:
def
----
string-defined:
defined
----
string-definition:
definition
----
string-else:
else
----
string-empty:
empty
----
string-end-of:
end-of
----
string-enn:
enn
----
string-executable-phrase:
executable-phrase
----
string-executable:
executable
----
string-for:
for
----
string-four:
four
----
string-here:
here
----
string-hyphen:
hyphen
----
string-line-here:
line-here
----
string-line:
line
----
string-name:
name
----
string-new-line-in-brackets:
[new_line]
----
string-new:
new
----
string-no:
no
----
string-one:
one
----
string-outside:
outside
----
string-phrase:
phrase
----
string-placeholder-list-of-tokens-can-go-here:
list_of_tokens_can_go_here
----
string-placeholder-prefix:
<dashrep_placeholder_
----
string-placeholder-space:
<character_space>
----
string-space:
space
----
string-spay:
spay
----
string-special:
special
----
string-text:
text
----
string-three:
three
----
string-two-apostrophes:
''
----
string-two:
two
----
string-underscores:
underscores
----
string-whichever:
whichever
----
string-with:
with
----
string-yes:
yes
----
template-new-empty-line:
<new_line>
----
template-new-empty-lines:
<new_line>
<new_line>
----
template-quoted-character-close-square-bracket:
']'
----
template-quoted-character-hyphen:
'-'
----
template-quoted-character-newline:
"\n"
----
template-quoted-character-open-square-bracket:
'['
----
template-quoted-character-space:
' '
----
template-quoted-character-tab:
"\t"
----
template-quoted-character-underscore:
'_'
----
template-quoted-comments-ignored:
''
----
template-quoted-dashrep-endless-loop-counter-limit:
'900000000'
----
template-quoted-dashrep-gather-tag-begin:
'entry_begin'
----
template-quoted-dashrep-gather-tag-delete:
'delete_id'
----
template-quoted-dashrep-gather-tag-end:
'entry_end'
----
template-quoted-dashrep-gather-tag-matching-id:
'1'
----
template-quoted-dashrep-gather-tag-unique:
'url'
----
template-quoted-dashrep-language-yes:
'yes'
----
template-quoted-dashrep-language:
'yes'
----
template-quoted-dashrep-path-prefix-for-file-reading:
''
----
template-quoted-dashrep-path-prefix-for-file-writing:
''
----
template-quoted-dashrep-time-limit:
'1200'
----
template-quoted-dashrep-version:
'5.00'
----
template-quoted-empty-text:
''
----
template-quoted-export-defs-all-begin:
''
----
template-quoted-export-defs-all-end:
''
----
template-quoted-export-defs-def-begin:
''
----
template-quoted-export-defs-def-end:
''
----
template-quoted-export-defs-phrase-begin:
''
----
template-quoted-export-defs-phrase-end:
''
----
template-quoted-four-hyphens:
'-' . '-' . '-' . '-'
----
template-quoted-line-break:
'<br />'
----
template-quoted-linewise-input-line-count:
'0'
----
template-quoted-linewise-input-line-from-file:
''
----
template-quoted-list-of-compiled-executable-phrases:
''
----
template-quoted-list-of-pointers-to-unique-words:
''
----
template-quoted-list-of-unique-word-counts:
''
----
template-quoted-non-breaking-space:
'no-space &#160; no-space'
----
template-quoted-numeric-map-tile-zoom:
'1'
----
template-quoted-time-day-of-month:
'1'
----
template-quoted-time-day-of-week:
'1'
----
template-quoted-time-day-of-year:
'1'
----
template-quoted-time-hour:
'0'
----
template-quoted-time-minute:
'0'
----
template-quoted-time-month-number:
'1'
----
template-quoted-time-second:
'0'
----
template-quoted-time-year:
'1900'
----
template-quoted-yes-or-no-indicate-line-endings:
'yes'
----
template-quoted-yes-or-no-permission-administrator:
'yes'
----
template-quoted-yes-or-no-permission-to-append-to-files:
'yes'
----
template-quoted-yes-or-no-permission-to-delete-or-overwrite-files:
'yes'
----
template-quoted-yes-or-no-use-two-spaces-as-column-delimiter:
'no'
----
template-show-recursion-stack:
# recursion stack: recursion-stack ( no-space tokens-since-last-show-recursion-stack no-space )  <new_line>
----
template-warning-ambee-amenn-imbalance-introduction:
WARNING:  Definition of phrase
----
template-warning-more-ambee-than-amenn-tokens:
contains more am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
template-warning-more-amenn-than-ambee-tokens:
contains fewer am no-space bee tokens (or character-open-square-bracket no-space character-hyphen occurences) than am no-space enn tokens (or character-hyphen no-space character-close-square-bracket occurences)  <new_line>
----
unique-phrase-number:
10
----
unused-template-quoted-empty-line:
"\n\n"
----
warning-wrong-number-of-required-operands-part-1:
WARNING:  Wrong number of required operands for action
----
warning-wrong-number-of-required-operands-part-2:
(required=
----
warning-wrong-number-of-required-operands-part-3:
, supplied=
----
warning-wrong-number-of-required-operands-part-4:
)  <new_line>
----
code-concat:
.
----
code-for-apostrophe-within-quoted-text:
' . "'" . '
----
code-for-backslash-within-quoted-text:
' . '\\' . '
----
code-for-text-storage-position-part-1:
my $storage_item__
----
code-for-text-storage-position-part-2:
= '
----
code-for-text-storage-position-part-3:
' ;
----
code-get-or-put-phrase-definition-begin:
$global_dashrep_replacement{
----
code-get-or-put-phrase-definition-end:
}
----
code-not-equals:
!=
----
function-name-prefix:
function_compiled__
----
initialize-variable-begin:
$storage_item__ no-space
----
list-of-static-segments-need-to-expand:
initialize-global-arrays
initialize-global-variables
runtime-code-statement-end-with-new-line
runtime-code-at-top-if-warning-message
runtime-code-for-text-storage-position-end
runtime-code-for-overdue-start-of-if-branch
warning-ambee-amenn-imbalance-introduction
warning-more-ambee-than-amenn-tokens
warning-more-amenn-than-ambee-tokens
segment-initialize-begin
segment-initialize-end
segment-definition-items-begin
segment-definition-items-end
segment-start-object-code-begin
segment-start-object-code-end
segment-optional-import-statements-begin
segment-optional-import-statements-end
segment-functions-runtime-begin
segment-functions-runtime-end
segment-functions-compiled-begin
segment-functions-compiled-end
segment-branch-begin
segment-branch-end
segment-functions-replacement-only-begin
segment-functions-replacement-only-end
segment-optional-extra-runtime-functions-begin
segment-optional-extra-runtime-functions-end
code-phrase-definition-simple-part-1
code-phrase-definition-simple-part-2
code-phrase-definition-simple-part-3
code-phrase-definition-simple-part-4
code-phrase-definition-simple-part-5
code-phrase-definition-simple-part-6
code-phrase-definition-simple-part-7
code-quoted-string-storage-item-part-1
code-quoted-string-storage-item-part-2
code-quoted-string-storage-item-part-3
code-quoted-string-storage-item-part-4
code-quoted-string-storage-item-part-5
code-function-branch-part-1
code-function-branch-part-2
code-function-branch-part-3
code-function-replacement-only-part-1
code-function-replacement-only-part-2
code-function-replacement-only-part-3
code-function-external-part-1
code-function-external-part-2
code-function-external-part-3
code-compiled-function-part-1
code-compiled-function-part-2
code-compiled-function-part-3
code-compiled-function-part-4
code-compiled-function-part-5
code-compiled-function-part-6
code-compiled-function-part-7
code-compiled-function-part-8
code-compiled-function-part-9
code-compiled-function-part-10
code-parameter-result-storage-part-1
code-parameter-result-storage-part-2
----
optional-extra-runtime-functions:
----
optional-import-statements:
----
runtime-code-check-operand-begin-contains-real-numbers:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_contains_real_numbers(
----
runtime-code-check-operand-begin-is-file-name:
$global_yes_or_no = &function_parameterized__yes_or_no_file_name(
----
runtime-code-check-operand-begin-is-folder-name:
$global_yes_or_no = &function_parameterized__yes_or_no_valid_path_prefix(
----
runtime-code-check-operand-begin-is-input-file-open-for-reading:
$global_yes_or_no = &function_parameterized__open_for_reading_file_named(
----
runtime-code-check-operand-begin-is-integer:
$global_yes_or_no = &function_parameterized__yes_or_no_integer(
----
runtime-code-check-operand-begin-is-phrase-name:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_name(
----
runtime-code-check-operand-begin-is-phrase-not-empty:
$global_yes_or_no = &function_parameterized__yes_or_no_phrase_definition_not_empty(
----
runtime-code-check-operand-begin-is-positive-integer:
$global_yes_or_no = &function_parameterized__yes_or_no_positive_integer(
----
runtime-code-check-operand-begin-is-real-number:
$global_yes_or_no = &function_parameterized__yes_or_no_real_number(
----
runtime-code-check-operand-begin-output-append-file:
$global_yes_or_no = &function_parameterized__yes_or_output_append_file(
----
runtime-code-check-operand-begin-output-file-exists:
$global_yes_or_no = &function_parameterized__yes_or_no_output_file_exists(
----
runtime-code-check-operand-end-contains-real-numbers:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'not_real_numbers' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-input-file-exists:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'file_for_reading_not_exists' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-file-name:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'file_name_invalid' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-folder-name:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'folder_name_invalid' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-input-file-open-for-reading:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'file_does_not_open_for_reading' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-integer:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'not_integer' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-phrase-name:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'not_phrase_name' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-phrase-not-empty:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'phrase_is_empty' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-positive-integer:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'not_positive_integer' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-is-real-number:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
$global_runtime_error_type = 'not_real_number' ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-end-output-append-file:
) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
runtime-code-check-operand-initialize:
$global_yes_or_no_operand_error = $global_no ;  <new_line>
----
runtime-code-conditionally-insert-separator-space-begin:
# todo: use this new code to more-fastly append repeatedly -- in places where code currently uses ".= ' '" or "ne"  <new_line>

if ( $global_yes_or_no_conditionally_need_separator_space == $global_yes ) {  <new_line>
----
runtime-code-conditionally-insert-separator-space-end:
} else {  <new_line>
   $global_yes_or_no_conditionally_need_separator_space = $global_yes ;  <new_line>
}  <new_line>
----
runtime-code-conditionally-insert-separator-space-initialize:
$global_yes_or_no_conditionally_need_separator_space = $global_no ;  <new_line>
----
runtime-code-storage-item-reference-after-pointer:
----
runtime-code-storage-item-reference-before-pointer:
$storage_item__
----
string-code-nospay-between-spaces-without-padded-spaces:
. ' ' . '' . ' ' .
----
template-code-compiled-function-part-1:
# no-space dashes-long-line  <new_line>
sub function-name-prefix
----
template-code-compiled-function-part-10:
<new_line>
----
template-code-compiled-function-part-2:
( ) {  <new_line>
$global_phrase_usage_count_for_phrase_number[
----
template-code-compiled-function-part-3:
] ++ ;  <new_line>
my $saved_accumulator_pointer = -1 ;  <new_line>
<new_line>
#
----
template-code-compiled-function-part-4:
<new_line>
<new_line>
template-runtime-code-check-for-endless-loop
<new_line>
template-runtime-code-check-for-time-limit-exceeded
----
template-code-compiled-function-part-5:
# save concatenated result  <new_line>
template-storage-item-prefix
----
template-code-compiled-function-part-6:
=
----
template-code-compiled-function-part-7:
;  <new_line>
if ( $global_no == &function_parameterized__yes_or_no_empty( template-storage-item-prefix
----
template-code-compiled-function-part-8:
) ) {  <new_line>
if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= template-storage-item-prefix
----
template-code-compiled-function-part-9:
;  <new_line>
}  <new_line>
<new_line>
return '' ;  <new_line>
} # end of function-name-prefix
----
template-code-function-branch-part-1:
} elsif ( $global_phrase_name_to_match eq '
----
template-code-function-branch-part-2:
' ) {  <new_line>
&function_compiled__
----
template-code-function-branch-part-3:
( ) ;
----
template-code-function-external-part-1:
sub function_compiled__
----
template-code-function-external-part-2:
( ) {  <new_line>
&
----
template-code-function-external-part-3:
( ) ;  <new_line>
}  <new_line>
----
template-code-function-replacement-only-part-1:
sub function_compiled__
----
template-code-function-replacement-only-part-2:
( ) {  <new_line>
$global_phrase_name = '
----
template-code-function-replacement-only-part-3:
' ;  <new_line>
&special_function_do_single_replacement_only( ) ;  <new_line>
}  <new_line>
----
template-code-parameter-result-storage-part-1:
my template-storage-item-prefix
----
template-code-parameter-result-storage-part-2:
= '' ; # result storage
----
template-code-phrase-definition-simple-part-1:
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-2:
= '
----
template-code-phrase-definition-simple-part-3:
' ;  <new_line>
my initialize-variable-begin
----
template-code-phrase-definition-simple-part-4:
= '
----
template-code-phrase-definition-simple-part-5:
' ; <new_line>
code-get-or-put-phrase-definition-begin initialize-variable-begin
----
template-code-phrase-definition-simple-part-6:
code-get-or-put-phrase-definition-end = initialize-variable-begin
----
template-code-phrase-definition-simple-part-7:
;
----
template-code-quoted-string-storage-item-part-1:
my initialize-variable-begin
----
template-code-quoted-string-storage-item-part-2:
=
----
template-code-quoted-string-storage-item-part-3:
;  <new_line>
$global_dashrep_replacement{ '
----
template-code-quoted-string-storage-item-part-4:
' } = initialize-variable-begin
----
template-code-quoted-string-storage-item-part-5:
;  <new_line>
----
template-displayed-list-of-possible-new-executable-phrases:
# no-space dashes-long-line  <new_line>
#  Possible new executable phrases (not yet declared)  <new_line>
<new_line>
# list-of-possible-new-executable-phrases  <new_line>
----
template-function-dashrep-expand-phrases:
# no-space dashes-long-line  <new_line>
# dashrep_expand_phrases  <new_line>
<new_line>

sub dashrep_expand_phrases( ) {  <new_line>

my $expand_endless_cycle_count_maximum ;  <new_line>
my $supplied_text ;  <new_line>
my $current_phrase ;  <new_line>
my $result_text ;  <new_line>
my $output_buffer ;  <new_line>
my $space_directive ;  <new_line>
my $expand_endless_loop_counter ;  <new_line>
my $expand_endless_loop_counter_maximum ;  <new_line>
my $recursion_level ;  <new_line>
my $pointer_to_phrase_begin ;  <new_line>
my $pointer_to_next_space ;  <new_line>
my $pointer_to_phrase_end ;  <new_line>
my $prior_length ;  <new_line>
my $prefix ;  <new_line>
my $possible_phrase_name_with_underscores ;  <new_line>
my $length_of_tag ;  <new_line>
my $new_output_buffer ;  <new_line>
my $pointer_to_remainder_of_output_buffer ;  <new_line>
my $possible_phrase_name_with_hyphens ;  <new_line>
my $pointer_to_close_angle_bracket ;  <new_line>
my $length_of_output_buffer ;  <new_line>
my $maximum_cycle_count ;  <new_line>
my $phrase_name ;  <new_line>
my $cycle_count ;  <new_line>
my $phrase_name_with_highest_cycle_count ;  <new_line>
my $length_of_code_at_recursion_level_current ;  <new_line>
my @code_at_recursion_level ;  <new_line>
my @length_of_code_at_recursion_level ;  <new_line>
my @pointer_to_remainder_of_code_at_recursion_level ;  <new_line>

combee ****
Get the hyphenated phrase or supplied string.
**** comenn

if ( scalar( @_ ) == 1 ) {  <new_line>
$supplied_text = $_[ 0 ] ;  <new_line>
} else {  <new_line>
$result_text = '' ;  <new_line>
return $result_text ;  <new_line>
}  <new_line>

combee ****
Initialization.
**** comenn

$space_directive = 'none' ;  <new_line>
$result_text = '' ;  <new_line>
$output_buffer = '' ;  <new_line>
$pointer_to_remainder_of_output_buffer = 0 ;  <new_line>
$new_output_buffer = '' ;  <new_line>
$possible_phrase_name_with_underscores = '' ;  <new_line>
$expand_endless_loop_counter = 0 ;  <new_line>
$expand_endless_loop_counter_maximum = 100000 ;  <new_line>
$expand_endless_cycle_count_maximum = 100000 ;  <new_line>
@code_at_recursion_level = ( ) ;  <new_line>
@length_of_code_at_recursion_level = ( ) ;  <new_line>
@pointer_to_remainder_of_code_at_recursion_level = ( ) ;  <new_line>
$code_at_recursion_level[ 0 ] = 'unused' ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ 0 ] = 0 ;  <new_line>
$length_of_code_at_recursion_level[ 0 ] = 0 ;  <new_line>

combee ****
Begin a loop that handles each space delimited string
in the phrase definition.
**** comenn

$code_at_recursion_level[ 1 ] = $supplied_text ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ 1 ] = 0 ;  <new_line>
$length_of_code_at_recursion_level[ 1 ] = length( $code_at_recursion_level[ 1 ] ) ;  <new_line>
$recursion_level = 1 ;  <new_line>
while ( ( $recursion_level > 0 ) && ( $expand_endless_loop_counter <= $expand_endless_loop_counter_maximum ) ) {  <new_line>
$expand_endless_loop_counter ++ ;  <new_line>

combee ****
Get the next phrase name.
If there is no more code at the current recursion
level, shift back to the previous recursion level.
When the recursion_level reaches zero, the loop
will end.
**** comenn

$length_of_code_at_recursion_level_current = $length_of_code_at_recursion_level[ $recursion_level ] ;  <new_line>
if ( $length_of_code_at_recursion_level_current == 0 ) {  <new_line>
$recursion_level <character_hyphen><character_hyphen> ;  <new_line>
next ;  <new_line>
}  <new_line>
$pointer_to_phrase_begin = $pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] ;  <new_line>
while ( ( $pointer_to_phrase_begin < $length_of_code_at_recursion_level_current ) && ( substr( $code_at_recursion_level[ $recursion_level ] , $pointer_to_phrase_begin , 1 ) eq ' ' ) ) {  <new_line>
$pointer_to_phrase_begin ++ ;  <new_line>
}  <new_line>
$pointer_to_next_space = index( $code_at_recursion_level[ $recursion_level ] , ' ' , $pointer_to_phrase_begin ) ;  <new_line>
if ( $pointer_to_next_space == -1 ) {  <new_line>
$pointer_to_phrase_end = $length_of_code_at_recursion_level_current - 1 ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $length_of_code_at_recursion_level_current ;  <new_line>
} else {  <new_line>
$pointer_to_next_space = index( $code_at_recursion_level[ $recursion_level ] , ' ' , $pointer_to_phrase_begin ) ;  <new_line>
if ( $pointer_to_next_space > $pointer_to_phrase_begin ) {  <new_line>
$pointer_to_phrase_end = $pointer_to_next_space - 1 ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $pointer_to_next_space ;  <new_line>
} else {  <new_line>
$pointer_to_phrase_end = <character_hyphen>2 ;  <new_line>
}  <new_line>
}  <new_line>
if ( $pointer_to_phrase_begin > $pointer_to_phrase_end ) {  <new_line>
$recursion_level <character_hyphen><character_hyphen> ;  <new_line>
next ;  <new_line>
}  <new_line>
$current_phrase = substr( $code_at_recursion_level[ $recursion_level ] , $pointer_to_phrase_begin , ( $pointer_to_phrase_end - $pointer_to_phrase_begin + 1 ) ) ;  <new_line>

combee ****
Check for an endless loop caused by the same
phrase name being encountered too many times.
If this occurs, exit the endless loop.
**** comenn

if ( $global_yes_or_no_count_phrase_usage == $global_yes ) {  <new_line>
$global_number_of_times_encountered_phrase_named{ $current_phrase } ++ ;  <new_line>
if ( $global_number_of_times_encountered_phrase_named{ $current_phrase } >= $expand_endless_cycle_count_maximum ) {  <new_line>
$maximum_cycle_count = 0 ;  <new_line>
foreach $phrase_name ( keys( %global_number_of_times_encountered_phrase_named ) ) {  <new_line>
$cycle_count = $global_number_of_times_encountered_phrase_named{ $phrase_name } ;  <new_line>
if ( $cycle_count > $maximum_cycle_count ) {  <new_line>
$maximum_cycle_count = $cycle_count ;  <new_line>
$phrase_name = $phrase_name_with_highest_cycle_count ;  <new_line>
}  <new_line>
}  <new_line>
print 'trace_diagnostic__expand_phrases__error_endless_loop__highest_count ' . $phrase_name_with_highest_cycle_count . ' ' . $maximum_cycle_count . "\n" ;  <new_line>
$global_action_result = 'trace_diagnostic__expand_phrases__error_endless_loop__highest_count ' . $phrase_name_with_highest_cycle_count . ' ' . $maximum_cycle_count . "\n" ;  <new_line>
return '' ;  <new_line>
}  <new_line>
}  <new_line>


combee ****
If the phrase name is a hyphen directive, or a
space directive, or a line directive, handle it.
**** comenn

if ( $current_phrase eq ( 'hyphen' . '-' . 'here' ) ) {  <new_line>
$output_buffer .= '-' ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'no' . '-' . 'space' ) ) {  <new_line>
if ( $space_directive ne 'one_requested' ) {  <new_line>
$space_directive = 'none' ;  <new_line>
}  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'no_space' . '>' ) ) {  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'one' . '-' . 'space' ) ) {  <new_line>
$space_directive = 'one_requested' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'one_space' . '>' ) ) {  <new_line>
$space_directive = 'one_requested' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'new' . '-' . 'line' ) ) {  <new_line>
$output_buffer .= "\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'new_line' . '>' ) ) {  <new_line>
$output_buffer .= "\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( 'empty' . '-' . 'line' ) ) {  <new_line>
$output_buffer .= "\n\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>
if ( $current_phrase eq ( '<' . 'empty_line' . '>' ) ) {  <new_line>
$output_buffer .= "\n\n" ;  <new_line>
$space_directive = 'none' ;  <new_line>
next ;  <new_line>
}  <new_line>

combee ****
If the phrase name has a definition (which can be
empty), and it is not a space directive or line
directive, insert phrase definition into the text
being expanded, and remove the phrase name.
**** comenn

if ( ( $current_phrase =~ /[^ \<character_hyphen>]\<character_hyphen>[^ \<character_hyphen>]/ ) && ( exists( $global_dashrep_replacement{ $current_phrase } ) ) ) {  <new_line>
$recursion_level ++ ;  <new_line>
$code_at_recursion_level[ $recursion_level ] = $global_dashrep_replacement{ $current_phrase } ;  <new_line>
$length_of_code_at_recursion_level[ $recursion_level ] = length( $code_at_recursion_level[ $recursion_level ] ) ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = 0 ;  <new_line>
next ;  <new_line>
}  <new_line>

combee ****
If a space should be inserted here, insert it.
Specify a default of inserting one space after
the next phrase insertion.
**** comenn

if ( ( $space_directive eq 'one' ) || ( $space_directive eq 'one_requested' ) ) {  <new_line>
$output_buffer .= ' ' ;  <new_line>
}  <new_line>
$space_directive = 'one' ;  <new_line>

combee ****
At this point the current text string is not the
name of a defined phrase, so just use the text string.
**** comenn

$output_buffer .= $current_phrase ;  <new_line>
$pointer_to_remainder_of_code_at_recursion_level[ $recursion_level ] = $pointer_to_phrase_end + 1 ;  <new_line>

combee ****
In the output buffer, if there is a
"<specify " string that needs to be
combined with the preceding tag, combine it into
a single XML or HTML tag.
Handle tags of type "<xyz />" as well as "<xyz>".
**** comenn

if ( index( $output_buffer , '<specify ' ) > 0 ) {  <new_line>
$prior_length = 0 ;  <new_line>
while ( length( $output_buffer ) != $prior_length ) {  <new_line>
$prior_length = length( $output_buffer ) ;  <new_line>
$output_buffer =~ s/ *\/> *<specify +([^>]+)>/ $1 \/>/ ;  <new_line>
}  <new_line>
if ( index( $output_buffer , '<specify ' ) > 0 ) {  <new_line>
$prior_length = 0 ;  <new_line>
while ( length( $output_buffer ) != $prior_length ) {  <new_line>
$prior_length = length( $output_buffer ) ;  <new_line>
$output_buffer =~ s/ *> *<specify +/ / ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>

combee ****
If the output buffer contains a recognized phrase
name using underscores instead of hyphens, and it
is enclosed in angle brackets (with no spaces),
then replace that text with the definition of the
specified phrase.
**** comenn

$output_buffer =~ s/ *<placeholder_for_hyphen_here> */<character_hyphen>/sg ;  <new_line>
$output_buffer =~ s/ *<placeholder_for_new_line> */\n/sg ;  <new_line>
$output_buffer =~ s/ *<placeholder_for_empty_line> */\n/sg ;  <new_line>

if ( $output_buffer =~ /<((no_space)|(hyphen_ no-space here)|(new_line))> *$/ ) {  <new_line>
$space_directive = 'none' ;  <new_line>
}  <new_line>
$length_of_output_buffer = -1 ;  <new_line>
$pointer_to_remainder_of_output_buffer = 0 ;  <new_line>
$new_output_buffer = '' ;  <new_line>
while ( substr( $output_buffer , $pointer_to_remainder_of_output_buffer ) =~ /^(.*?)<([^ \<character_hyphen><character_close_angle_bracket>]+_[^ \<character_hyphen><character_close_angle_bracket>]+)<character_close_angle_bracket>/s ) {  <new_line>
$prefix = $1 ;  <new_line>
$possible_phrase_name_with_underscores = $2 ;  <new_line>
$length_of_output_buffer = length( $output_buffer ) ;  <new_line>
$new_output_buffer .= $prefix ;  <new_line>
$length_of_tag = length( $possible_phrase_name_with_underscores ) ;  <new_line>
$pointer_to_remainder_of_output_buffer += length( $prefix ) + $length_of_tag + 2 ;  <new_line>

$possible_phrase_name_with_hyphens = $possible_phrase_name_with_underscores ;  <new_line>
$possible_phrase_name_with_hyphens =~ s/_/<character_hyphen>/g ;  <new_line>
if ( exists( $global_dashrep_replacement{ $possible_phrase_name_with_hyphens } ) ) {  <new_line>
$new_output_buffer .= $global_dashrep_replacement{ $possible_phrase_name_with_hyphens } ;  <new_line>
} else {  <new_line>
$new_output_buffer .= '<' . $possible_phrase_name_with_underscores . '>' ;  <new_line>
}  <new_line>
}  <new_line>
if ( $length_of_output_buffer != -1 ) {  <new_line>
$output_buffer = $new_output_buffer . substr( $output_buffer , $pointer_to_remainder_of_output_buffer ) ;  <new_line>
$new_output_buffer = '' ;  <new_line>
$possible_phrase_name_with_underscores = '' ;  <new_line>
}  <new_line>

combee ****
If the output buffer does not contain any text
that might need to be revised, then append it to
the result text.
**** comenn

$pointer_to_close_angle_bracket = index( $output_buffer , '>' ) ;  <new_line>
if ( $pointer_to_close_angle_bracket < 0 ) {  <new_line>
$result_text .= $output_buffer ;  <new_line>
$output_buffer = '' ;  <new_line>
} elsif ( length( $output_buffer ) > 1000 ) {  <new_line>
$result_text .= substr( $output_buffer , 0 , 500 ) ;  <new_line>
$output_buffer = substr( $output_buffer , 500 ) ;  <new_line>
}  <new_line>

combee ****
Repeat the loop that handles each space delimited
string.
**** comenn

}  <new_line>

combee ****
Supply the results.
**** comenn

$result_text .= $output_buffer ;  <new_line>
return $result_text ;  <new_line>

template-function-segment-ending
----
template-function-handle-endless-loop-encountered:
# no-space dashes-long-line  <new_line>
# handle_endless_loop_encountered  <new_line>
<new_line>

sub handle_endless_loop_encountered( ) {  <new_line>

print 'Exceeded endless hyphen-here loop count of ' . $global_endless_loop_counter_limit . "\n" ;  <new_line>
$global_action_result = 'trace_diagnostic__handle_endless_loop_encountered' . "\n" ;  <new_line>

exit ;  <new_line>

template-function-segment-ending
----
template-function-handle-time-limit-exceeded:
# no-space dashes-long-line  <new_line>
# handle_time_limit_exceeded  <new_line>
<new_line>

sub handle_time_limit_exceeded( ) {  <new_line>

print 'Exceeded time limit of ' . $global_time_limit . ' seconds' . "\n" ;  <new_line>
$global_action_result = 'trace_diagnostic__handle_time_limit_exceeded ' . $global_time_limit . "\n" ;  <new_line>

exit ;  <new_line>

template-function-segment-ending
----
template-function-open-trace-output-file-if-not-open:
# no-space dashes-long-line  <new_line>
# function__open_trace_output_file_if_not_open  <new_line>
#  <new_line>

sub function__open_trace_output_file_if_not_open( ) {  <new_line>

if ( $global_yes_or_no_trace_output_file_is_open == $global_no ) {  <new_line>

if ( ( exists( $global_dashrep_replacement{ 'output hyphen-here trace hyphen-here file hyphen-here name' } ) ) && ( $global_dashrep_replacement{ 'output hyphen-here trace hyphen-here file hyphen-here name' } ne '' ) ) {  <new_line>
$global_trace_file_name = $global_dashrep_replacement{ 'output hyphen-here trace hyphen-here file hyphen-here name' } ;  <new_line>
} else {  <new_line>
$global_trace_file_name = 'output_trace.txt' ;  <new_line>
}  <new_line>

open( TRACE_OUT , '>' . $global_trace_file_name ) ;  <new_line>
$global_yes_or_no_trace_output_file_is_open = $global_yes ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-initialize-global-arrays:
my %global_dashrep_replacement = ( ) ;  <new_line>
<new_line>

my %global_yes_found_word = ( ) ;  <new_line>
my %global_exists_tag_name = ( ) ;  <new_line>
my %global_content_for_tag = ( ) ;  <new_line>
my %global_endless_loop_replacements_with_count = ( ) ;  <new_line>
my %global_found_unique_value = ( ) ;  <new_line>
my %global_item_number_at_row_column = ( ) ;  <new_line>
my %global_listed_word = ( ) ;  <new_line>
my %global_occurrence_count_for_word = ( ) ;  <new_line>
my %global_text_to_find_at_position = ( ) ;  <new_line>
my %global_words_at_numeric_value = ( ) ;  <new_line>
<new_line>

my @global_accumulator = ( ) ;  <new_line>
$global_accumulator[ 0 ] = '' ;  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>

my @global_count_of_items_appended_to_accumulator = ( ) ;  <new_line>
$global_count_of_items_appended_to_accumulator[ 0 ] = 0 ;  <new_line>
$global_count_of_items_appended_to_accumulator[ 1 ] = 0 ;  <new_line>

my @global_saved_accumulator_pointer_at_recursion_location = ( ) ;  <new_line>
$global_saved_accumulator_pointer_at_recursion_location[ 0 ] = 0 ;  <new_line>

my @global_begin_position_for_word = ( ) ;  <new_line>
$global_begin_position_for_word[ 0 ] = 0 ;  <new_line>
$global_begin_position_for_word[ 1 ] = 0 ;  <new_line>

my @global_length_of_word = ( ) ;  <new_line>
$global_length_of_word[ 0 ] = 0 ;  <new_line>
$global_length_of_word[ 1 ] = 0 ;  <new_line>

my @global_pointer_to_whitespace_type = ( ) ;  <new_line>
$global_pointer_to_whitespace_type[ 0 ] = 0 ;  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = 0 ;  <new_line>

my @global_yes_find_next_whitespace_of_type = ( ) ;  <new_line>
$global_yes_find_next_whitespace_of_type[ 0 ] = 0 ;  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>

my @global_phrase_usage_count_for_phrase_number = ( ) ;  <new_line>
my @global_word_begin_operand_one_at_word = ( ) ;  <new_line>
my @global_word_length_operand_one_at_word = ( ) ;  <new_line>
my @global_word_begin_operand_two_at_word = ( ) ;  <new_line>
my @global_word_length_operand_two_at_word = ( ) ;  <new_line>
my @global_word_begin_operand_three_at_word = ( ) ;  <new_line>
my @global_word_length_operand_three_at_word = ( ) ;  <new_line>
my @global_list_of_items_one = ( ) ;  <new_line>
my @global_list_of_items_two = ( ) ;  <new_line>
my @global_column_position_for_item_number = ( ) ;  <new_line>
my @global_input_list = ( ) ;  <new_line>
my @global_input_list_one = ( ) ;  <new_line>
my @global_input_list_two = ( ) ;  <new_line>
my @global_item_number_found_at_position = ( ) ;  <new_line>
my @global_left_and_up_direction_value_for_item_number = ( ) ;  <new_line>
my @global_list = ( ) ;  <new_line>
my @global_list_of_file_names = '' ;  <new_line>
my @global_list_of_positions = '' ;  <new_line>
my @global_list_of_storage_names = '' ;  <new_line>
my @global_list_indicating_sort_order = ( ) ;  <new_line>
my @global_list_of_action_names = ( ) ;  <new_line>
my @global_list_of_key_values = ( ) ;  <new_line>
my @global_list_of_loop_words = ( ) ;  <new_line>
my @global_list_of_paired_words = ( ) ;  <new_line>
my @global_list_of_parameter_words = ( ) ;  <new_line>
my @global_list_of_phrase_names = ( ) ;  <new_line>
my @global_list_of_phrases = ( ) ;  <new_line>
my @global_list_of_remaining_item_numbers = ( ) ;  <new_line>
my @global_list_of_sorted_numbers = ( ) ;  <new_line>
my @global_list_of_source_words = ( ) ;  <new_line>
my @global_list_of_start_matching_positions = ( ) ;  <new_line>
my @global_list_of_strings_to_match = ( ) ;  <new_line>
my @global_list_of_tag_names = ( ) ;  <new_line>
my @global_list_of_tag_values_in_sequence_encountered = ( ) ;  <new_line>
my @global_list_of_text_items_to_find = ( ) ;  <new_line>
my @global_list_of_unique_values = ( ) ;  <new_line>
my @global_list_of_values_in_column = ( ) ;  <new_line>
my @global_list_of_words = ( ) ;  <new_line>
my @global_list_of_words_to_check = ( ) ;  <new_line>
my @global_list_of_x_values = ( ) ;  <new_line>
my @global_list_of_y_values = ( ) ;  <new_line>
my @global_octet_number_at_position = ( ) ;  <new_line>
my @global_phrase_naming_convention_for_column = ( ) ;  <new_line>
my @global_right_and_up_direction_value_for_item_number = ( ) ;  <new_line>
my @global_right_direction_text_for_item_number = ( ) ;  <new_line>
my @global_right_direction_value_for_item_number = ( ) ;  <new_line>
my @global_row_position_for_item_number = ( ) ;  <new_line>
my @global_sequence_of_phrases = ( ) ;  <new_line>
my @global_sort_order = ( ) ;  <new_line>
my @global_text_item_in_column = ( ) ;  <new_line>
my @global_unique_word_at_position = ( ) ;  <new_line>
my @global_up_direction_text_for_item_number = ( ) ;  <new_line>
my @global_up_direction_value_for_item_number = ( ) ;  <new_line>
my @global_value_in_column = ( ) ;  <new_line>
my @global_zero_if_not_remaining_item_number = ( ) ;  <new_line>
my @global_name_value_pairs = ( ) ;  <new_line>
<new_line>


# todo: remove these when no longer used  <new_line>

my %global_number_of_times_encountered_phrase_named ;  <new_line>
%global_number_of_times_encountered_phrase_named = ( ) ;  <new_line>
----
template-initialize-global-variables:
my $global_pi = 0 ; # (calculated if needed)  <new_line>

my $global_string_word_to_use_in_handler = 'word-to-use-in-handler' ;  <new_line>
my $global_word_to_use_in_handler = '' ;  <new_line>
my $global_accumulated_text = '' ;  <new_line>
my $global_source_text = '' ;  <new_line>
my $global_target_text = '' ;  <new_line>
my $global_temporary_text = '' ;  <new_line>
my $global_default_text = '' ;  <new_line>
my $global_text_expanded_parameters_only = '' ;  <new_line>
my $global_action_name = '' ;  <new_line>
my $global_action_result = '' ;  <new_line>
my $global_operand_one = '' ;  <new_line>
my $global_operand_two = '' ;  <new_line>
my $global_operand_three = '' ;  <new_line>
my $global_operand_four = '' ;  <new_line>
my $global_operand_five = '' ;  <new_line>
my $global_operands_all = '' ;  <new_line>
my $global_operand_one_words = '' ;  <new_line>
my $global_operand_two_words = '' ;  <new_line>
my $global_operand_three_words = '' ;  <new_line>
my $global_phrase_name = '' ;  <new_line>
my $global_phrase_contents = '' ;  <new_line>
my $global_phrase_name_to_match = '' ;  <new_line>
my $output_results = '' ;  <new_line>
my $global_current_word = '' ;  <new_line>
my $global_concatenated_all_operands = '' ;  <new_line>
my $global_concatenated_all_operands_modified = '' ;  <new_line>
my $global_string_to_be_replaced = '' ;  <new_line>
my $global_text_to_insert = '' ;  <new_line>
my $global_word_pointer_text = '0' ;  <new_line>
my $global_phrase_name_currently_executing = '' ;  <new_line>
my $global_accumulated_matching_entry_info = '' ;  <new_line>
my $global_action_name_exists = '' ;  <new_line>
my $global_all_defs_begin = '' ;  <new_line>
my $global_all_defs_end = '' ;  <new_line>
my $global_all_lines = '' ;  <new_line>
my $global_angle_in_radians = '' ;  <new_line>
my $global_bottom_left_open_column = '' ;  <new_line>
my $global_bottom_right_open_column = '' ;  <new_line>
my $global_bottom_row_number = '' ;  <new_line>
my $global_character_code_to_decode = '' ;  <new_line>
my $global_character_pointer_to_next_word_zero_based = 0 ;  <new_line>
my $global_runtime_error_type = '' ;  <new_line>
my $global_list_indicating_sort_order_text_string = '' ;  <new_line>
my $global_list_name_prefix = '' ;  <new_line>
my $global_list_of_words_as_text = '' ;  <new_line>
my $global_list_of_x_values_as_text = '' ;  <new_line>
my $global_list_of_y_values_as_text = '' ;  <new_line>
my $global_source_file_name = '' ;  <new_line>
my $global_source_file_name_saved = '' ;  <new_line>
my $global_source_path_prefix = '' ;  <new_line>
my $global_source_path_prefix_saved = '' ;  <new_line>
my $global_source_file_full_path = '' ;  <new_line>
my $global_source_file_full_path_saved = '' ;  <new_line>
my $global_target_file_name = '' ;  <new_line>
my $global_target_file_name_saved = '' ;  <new_line>
my $global_target_path_prefix = '' ;  <new_line>
my $global_target_path_prefix_saved = '' ;  <new_line>
my $global_target_file_full_path = '' ;  <new_line>
my $global_target_file_full_path_saved = '' ;  <new_line>
my $global_trace_file_name = '' ;  <new_line>
my $global_url = '' ;  <new_line>
<new_line>

my $global_yes = 1 ;  <new_line>
my $global_no = 0 ;  <new_line>
my $global_yes_or_no = 0 ;  <new_line>
my $global_yes_or_no_operand_error = $global_no ;  <new_line>
my $global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
my $global_tracking_on_yes_or_no = $global_no ;  <new_line>
my $global_yes_or_no_within_ampersand_encoded_character = $global_no ;  <new_line>
my $global_yes_or_no_trace_output_file_is_open = $global_no ;  <new_line>
my $global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
my $global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
<new_line>

my $global_storage_number = 1 ;  <new_line>
my $global_accumulator_pointer = 1 ;  <new_line>
my $global_plus_or_minus_one = 1 ;  <new_line>
my $global_number_of_operands = 0 ;  <new_line>
my $global_numeric_value_first = 0 ;  <new_line>
my $global_numeric_value_second = 0 ;  <new_line>
my $global_character_pointer = 0 ;  <new_line>
my $global_character_pointer_begin = 0 ;  <new_line>
my $global_character_pointer_end = 0 ;  <new_line>
my $global_length_of_text = 0 ;  <new_line>
my $global_length_of_text_source = 0 ;  <new_line>
my $global_length_of_text_segment = 0 ;  <new_line>
my $global_length_of_string_to_be_replaced = 0 ;  <new_line>
my $global_length_of_text_to_insert = 0 ;  <new_line>
my $global_pointer_to_next_space = 0 ;  <new_line>
my $global_pointer_to_first_space = 0 ;  <new_line>
my $global_pointer_to_future_space = 0 ;  <new_line>
my $global_pointer_to_previous_space = 0 ;  <new_line>
my $global_pointer_to_next_whitespace = 0 ;  <new_line>
my $global_pointer_to_previous_whitespace = 0 ;  <new_line>
my $global_pointer_to_left_bracket = 0 ;  <new_line>
my $global_pointer_to_right_bracket = 0 ;  <new_line>
my $global_pointer_to_hyphen = 0 ;  <new_line>
my $global_pointer_to_underscore = 0 ;  <new_line>
my $global_whitespace_type = 0 ;  <new_line>
my $global_counter_number_of_adjacent_spaces = 0 ;  <new_line>
my $global_pointer_to_word = 0 ;  <new_line>
my $global_pointer_to_next_word = 0 ;  <new_line>
my $global_number_of_words = 0 ;  <new_line>
my $global_word_pointer_numeric = 0 ;  <new_line>
my $global_calculated_value = 0 ;  <new_line>
my $global_normalized_calculated_value = 0 ;  <new_line>
my $global_count_range = 0 ;  <new_line>
my $global_counter = 0 ;  <new_line>
my $global_count_number = 0 ;  <new_line>
my $global_count_of_items_appended = 0 ;  <new_line>
my $global_word_pointer_operand_one = 0 ;  <new_line>
my $global_word_pointer_operand_two = 0 ;  <new_line>
my $global_word_pointer_operand_three = 0 ;  <new_line>
my $global_phrase_number = 0 ;  <new_line>
my $global_number_of_unique_phrases = 0 ;  <new_line>
my $global_count_of_items_with_missing_unique_id = 0 ;  <new_line>
my $global_list_length = 0 ;  <new_line>
<new_line>

my $global_action_debug_line = '' ;  <new_line>
my $global_endless_loop_counter = 0 ;  <new_line>
my $global_endless_loop_counter_limit = 900000 ;  <new_line>
my $global_time_limit = 300 ;  # 300 seconds = 5 minutes  <new_line>
my $global_starting_time = time ;  <new_line>
my $global_interval_count_for_time_limit_check = 0 ;  <new_line>
my $global_nesting_level_of_file_actions = 0 ;  <new_line>
my $global_recursion_level_of_expand_parameters = 0 ;  <new_line>
<new_line>

my $global_file_private_protection_mode = 0600 ;  # octal number that specifies no "world" read access  <new_line>
my $global_file_public_read_protection_mode = 0644 ;  # octal number that specifies public "world" read access  <new_line>
my $global_file_private_but_executable_protection_mode = 0711 ;  # octal number that specifies private but "world" executable access  <new_line>
<new_line>

my $global_character_position = 0 ;  <new_line>
my $global_character_to_capitalize = '' ;  <new_line>
my $global_character_to_replace = '' ;  <new_line>
my $global_column_number = 0 ;  <new_line>
my $global_column_pointer = 0 ;  <new_line>
my $global_content_for_tag = '' ;  <new_line>
my $global_cosine_of_angle = 0 ;  <new_line>
my $global_count = 0 ;  <new_line>
my $global_count_list_one = 0 ;  <new_line>
my $global_count_list_two = 0 ;  <new_line>
my $global_counter_one = 0 ;  <new_line>
my $global_counter_two = 0 ;  <new_line>
my $global_current_character_position_number = 0 ;  <new_line>
my $global_day_of_month = 0 ;  <new_line>
my $global_day_of_year = 0 ;  <new_line>
my $global_def_begin = '' ;  <new_line>
my $global_def_end = '' ;  <new_line>
my $global_definitions_or_phrase_names = '' ;  <new_line>
my $global_destination_phrase = '' ;  <new_line>
my $global_possible_phrase = '' ;  <new_line>
my $global_directory = '' ;  <new_line>
my $global_do_nothing = 0 ;  <new_line>
my $global_elapsed_time = 0 ;  <new_line>
my $global_ending_character_position = 0 ;  <new_line>
my $global_ending_count = 0 ;  <new_line>
my $global_ending_first_count = 0 ;  <new_line>
my $global_endless_loop_replacements_with_count = 0 ;  <new_line>
my $global_entry_begin = '' ;  <new_line>
my $global_entry_delete = '' ;  <new_line>
my $global_entry_end = '' ;  <new_line>
my $global_entry_matching_id = '' ;  <new_line>
my $global_entry_unique = '' ;  <new_line>
my $global_epoch_seconds = 0 ;  <new_line>
my $global_extra_info = '' ;  <new_line>
my $global_extra_words_without_sort_value = '' ;  <new_line>
my $global_file_name = '' ;  <new_line>
my $global_file_size = 0 ;  <new_line>
my $global_fill_direction = '' ;  <new_line>
my $global_fill_direction_bottom_left = '' ;  <new_line>
my $global_fill_direction_bottom_right = '' ;  <new_line>
my $global_fill_direction_top_left = '' ;  <new_line>
my $global_fill_direction_top_right = '' ;  <new_line>
my $global_final_result = '' ;  <new_line>
my $global_first_object_of_action = '' ;  <new_line>
my $global_first_or_second = '' ;  <new_line>
my $global_first_word = '' ;  <new_line>
my $global_found_unique_value = '' ;  <new_line>
my $global_full_path = '' ;  <new_line>
my $global_generated_list = '' ;  <new_line>
my $global_dashrep_text_list_of_phrase_names = '' ;  <new_line>
my $global_growing_text_to_append = '' ;  <new_line>
my $global_handler_phrase_name = '' ;  <new_line>
my $global_hour = 0 ;  <new_line>
my $global_input_line = '' ;  <new_line>
my $global_input_list_one_phrase_name = '' ;  <new_line>
my $global_input_list_two_phrase_name = '' ;  <new_line>
my $global_item_number = 0 ;  <new_line>
my $global_item_number_at_min_or_max = 0 ;  <new_line>
my $global_item_number_at_row_column = 0 ;  <new_line>
my $global_item_number_found_at_position = 0 ;  <new_line>
my $global_last_pointer = 0 ;  <new_line>
my $global_length_desired = 0 ;  <new_line>
my $global_length_of_first_word = 0 ;  <new_line>
my $global_length_of_loop_list = 0 ;  <new_line>
my $global_length_of_string = 0 ;  <new_line>
my $global_line_count = 0 ;  <new_line>
my $global_line_ending = '' ;  <new_line>
my $global_line_number = 0 ;  <new_line>
my $global_line_status = '' ;  <new_line>
my $global_listed_word = '' ;  <new_line>
my $global_local_endless_loop_counter = 0 ;  <new_line>
my $global_local_endless_loop_counter_maximum = 0 ;  <new_line>
my $global_loop_status_done = '' ;  <new_line>
my $global_map_tile_n = 0 ;  <new_line>
my $global_map_tile_zoom = 0 ;  <new_line>
my $global_matching_text = '' ;  <new_line>
my $global_max_or_min_value = 0 ;  <new_line>
my $global_minimum_number_of_columns = 0 ;  <new_line>
my $global_minute = 0 ;  <new_line>
my $global_month_number = 0 ;  <new_line>
my $global_multiline_value_name = '' ;  <new_line>
my $global_multiplier_for_right_direction_values = 0 ;  <new_line>
my $global_multiplier_for_up_direction_values = 0 ;  <new_line>
my $global_name_of_parameter_for_handler = '' ;  <new_line>
my $global_name_of_phrase_that_contains_list_of_index_values = '' ;  <new_line>
my $global_need_maximum = '' ;  <new_line>
my $global_need_maximum_or_minimum = '' ;  <new_line>
my $global_need_minimum = '' ;  <new_line>
my $global_next_number = 0 ;  <new_line>
my $global_next_value_to_compare = 0 ;  <new_line>
my $global_number_of_characters_to_get = 0 ;  <new_line>
my $global_number_of_column_names = 0 ;  <new_line>
my $global_number_of_columns = 0 ;  <new_line>
my $global_number_of_full_rows = 0 ;  <new_line>
my $global_number_of_items = 0 ;  <new_line>
my $global_number_of_items_in_bottom_row = 0 ;  <new_line>
my $global_number_of_items_remaining = 0 ;  <new_line>
my $global_number_of_items_to_find = 0 ;  <new_line>
my $global_number_of_rows = 0 ;  <new_line>
my $global_number_of_unique_words = 0 ;  <new_line>
my $global_number_of_zeros_needed = 0 ;  <new_line>
my $global_numeric_return_value = 0 ;  <new_line>
my $global_numeric_value = 0 ;  <new_line>
my $global_octet_number = 0 ;  <new_line>
my $global_odd_or_even_based_on_zero_or_one = '' ;  <new_line>
my $global_output_list_one_phrase_name = '' ;  <new_line>
my $global_output_list_two_phrase_name = '' ;  <new_line>
my $global_pair_pointer = 0 ;  <new_line>
my $global_pair_pointer_offset_zero = 0 ;  <new_line>
my $global_pair_status = '' ;  <new_line>
my $global_paired_words_as_text = '' ;  <new_line>
my $global_parameter_begin_or_end_string = '' ;  <new_line>
my $global_parameter_level = 0 ;  <new_line>
my $global_partial_translation = '' ;  <new_line>
my $global_phrase_begin = '' ;  <new_line>
my $global_phrase_being_edited = '' ;  <new_line>
my $global_phrase_end = '' ;  <new_line>
my $global_phrase_length = 0 ;  <new_line>
my $global_phrase_name_containing_parameter_list = '' ;  <new_line>
my $global_phrase_name_containing_pattern = '' ;  <new_line>
my $global_phrase_name_containing_source_words = '' ;  <new_line>
my $global_phrase_name_to_clear = '' ;  <new_line>
my $global_phrase_naming_convention_for_column = '' ;  <new_line>
my $global_phrase_naming_convention_for_this_column = '' ;  <new_line>
my $global_phrase_type = '' ;  <new_line>
my $global_phrase_words = '' ;  <new_line>
my $global_pointer = 0 ;  <new_line>
my $global_pointer_one = 0 ;  <new_line>
my $global_pointer_to_matching_text = 0 ;  <new_line>
my $global_pointer_two = 0 ;  <new_line>
my $global_position = 0 ;  <new_line>
my $global_position_as_string = 0 ;  <new_line>
my $global_position_begin = 0 ;  <new_line>
my $global_position_end = 0 ;  <new_line>
my $global_position_of_text_found = 0 ;  <new_line>
my $global_possible_error_message = '' ;  <new_line>
my $global_possible_match = '' ;  <new_line>
my $global_possible_matching_entry_info = '' ;  <new_line>
my $global_possible_new_limit = '' ;  <new_line>
my $global_possible_phrase_name = '' ;  <new_line>
my $global_prefix = '' ;  <new_line>
my $global_prefix_text = '' ;  <new_line>
my $global_range_of_right_direction_values = '' ;  <new_line>
my $global_range_of_up_direction_values = '' ;  <new_line>
my $global_read_time = 0 ;  <new_line>
my $global_remainder = 0 ;  <new_line>
my $global_remainder_of_line = '' ;  <new_line>
my $global_remaining_text = '' ;  <new_line>
my $global_repeat_count = 0 ;  <new_line>
my $global_replacement_count = 0 ;  <new_line>
my $global_replacement_count_text = '' ;  <new_line>
my $global_result_text = '' ;  <new_line>
my $global_result_value = 0 ;  <new_line>
my $global_result_word_list = '' ;  <new_line>
my $global_right_and_up_direction_value_for_item_number = '' ;  <new_line>
my $global_right_direction_maximum_value = 0 ;  <new_line>
my $global_right_direction_minimum_value = 0 ;  <new_line>
my $global_row_number = 0 ;  <new_line>
my $global_row_position_for_item_number = 0 ;  <new_line>
my $global_search_starting_position = 0 ;  <new_line>
my $global_second_object_of_action = '' ;  <new_line>
my $global_second_time = 0 ;  <new_line>
my $global_second_word = '' ;  <new_line>
my $global_segment_if_first = '' ;  <new_line>
my $global_segment_if_second = '' ;  <new_line>
my $global_segment_that_might_include_else = '' ;  <new_line>
my $global_separator = '' ;  <new_line>
my $global_separator_one = '' ;  <new_line>
my $global_separator_two = '' ;  <new_line>
my $global_sequence_of_phrases = '' ;  <new_line>
my $global_sine_of_angle = 0 ;  <new_line>
my $global_single_value = 0 ;  <new_line>
my $global_slash_or_backslash_for_path = '' ;  <new_line>
my $global_sort_order = '' ;  <new_line>
my $global_source_definitions = '' ;  <new_line>
my $global_source_phrase_name = '' ;  <new_line>
my $global_starting_character_position = 0 ;  <new_line>
my $global_starting_count = 0 ;  <new_line>
my $global_starting_second_count = 0 ;  <new_line>
my $global_storage_name = '' ;  <new_line>
my $global_string_in_phrase = '' ;  <new_line>
my $global_string_to_find = '' ;  <new_line>
my $global_string_to_insert = '' ;  <new_line>
my $global_string_to_match = '' ;  <new_line>
my $global_string_to_search = '' ;  <new_line>
my $global_suffix = '' ;  <new_line>
my $global_supplied_text = '' ;  <new_line>
my $global_tag_name = '' ;  <new_line>
my $global_target_column_number = 0 ;  <new_line>
my $global_target_operand = '' ;  <new_line>
my $global_target_phrase_name = '' ;  <new_line>
my $global_target_row_number = 0 ;  <new_line>
my $global_target_sub_folder = '' ;  <new_line>
my $global_temp_text = '' ;  <new_line>
my $global_text_begin = '' ;  <new_line>
my $global_text_being_edited = '' ;  <new_line>
my $global_text_end = '' ;  <new_line>
my $global_text_for_right_direction_values = '' ;  <new_line>
my $global_text_for_up_direction_values = '' ;  <new_line>
my $global_text_item_in_column = '' ;  <new_line>
my $global_text_list_key = '' ;  <new_line>
my $global_text_list_loop = '' ;  <new_line>
my $global_text_list_of_start_matching_positions = '' ;  <new_line>
my $global_text_list_of_unique_word_counts = '' ;  <new_line>
my $global_text_list_of_unique_word_pointers = '' ;  <new_line>
my $global_text_parameter = '' ;  <new_line>
my $global_text_parameter_content = '' ;  <new_line>
my $global_text_parameter_name = '' ;  <new_line>
my $global_text_parameter_value = '' ;  <new_line>
my $global_text_string = '' ;  <new_line>
my $global_text_to_append = '' ;  <new_line>
my $global_text_to_expand = '' ;  <new_line>
my $global_text_to_find = '' ;  <new_line>
my $global_text_to_find_at_position = '' ;  <new_line>
my $global_raw_input = '' ;  <new_line>
my $global_name_value = '' ;  <new_line>
my $global_name = '' ;  <new_line>

my $global_top_left_open_column = 0 ;  <new_line>
my $global_top_right_open_column = 0 ;  <new_line>
my $global_top_row_number = 0 ;  <new_line>
my $global_translation = '' ;  <new_line>
my $global_undeleted_phrase_content = '' ;  <new_line>
my $global_unicode_number = 0 ;  <new_line>
my $global_unique_word_at_position = '' ;  <new_line>
my $global_up_direction_maximum_value = 0 ;  <new_line>
my $global_up_direction_minimum_value = 0 ;  <new_line>
my $global_use_two_spaces_as_delimiter = '' ;  <new_line>
my $global_use_value_direction = '' ;  <new_line>
my $global_value = 0 ;  <new_line>
my $global_value_direction_left_and_up = 0 ;  <new_line>
my $global_value_direction_right = 0 ;  <new_line>
my $global_value_direction_right_and_up = 0 ;  <new_line>
my $global_value_direction_up = 0 ;  <new_line>
my $global_value_in_column = 0 ;  <new_line>
my $global_value_of_operand_one = 0 ;  <new_line>
my $global_value_one = 0 ;  <new_line>
my $global_value_two = 0 ;  <new_line>
my $global_weekday = '' ;  <new_line>
my $global_word = '' ;  <new_line>
my $global_word_count = 0 ;  <new_line>
my $global_word_number = 0 ;  <new_line>
my $global_word_number_begin = 0 ;  <new_line>
my $global_word_number_end = 0 ;  <new_line>
my $global_word_position = 0 ;  <new_line>
my $global_word_to_check = '' ;  <new_line>
my $global_word_to_find = '' ;  <new_line>
my $global_words_to_find = '' ;  <new_line>
my $global_words_to_match = '' ;  <new_line>
my $global_write_time = '' ;  <new_line>
my $global_year = 0 ;  <new_line>
my $global_zero_if_not_remaining_item_number = '' ;  <new_line>
my $global_zero_padding = '' ;  <new_line>
my $global_cgi_string_length_limit = 100000 ;  <new_line>
my $global_cgi_line_length_limit = 100 ;  <new_line>
my $global_unique_value = '' ;  <new_line>
my $global_yes_or_no_conditionally_need_separator_space = $global_no ;  <new_line>
<new_line>
<new_line>
----
template-return-if-no-permission-administrator:
if ( not( ( exists( code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here administrator' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here administrator' code-get-or-put-phrase-definition-end eq 'yes' ) ) ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__case_no_permission_administrator ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>
----
template-return-if-no-permission-to-append-to-files:
if ( not( ( exists( code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here append hyphen-here to hyphen-here files' code-get-or-put-phrase-definition-end eq 'yes' ) ) ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__case_no_permission_to_append_to_files ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>
----
template-return-if-no-permission-to-delete-overwrite-files:
if ( not( ( exists( code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' code-get-or-put-phrase-definition-end ) ) && (
 code-get-or-put-phrase-definition-begin 'yes hyphen-here or hyphen-here no hyphen-here permission hyphen-here to hyphen-here delete hyphen-here or hyphen-here overwrite hyphen-here files' code-get-or-put-phrase-definition-end eq 'yes' ) ) ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__case_no_permission_to_delete_overwrite_files ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>
----
template-runtime-code-at-top-if-warning-message:
print 'Compiler error; for details see warning messages at top of compiler output file.' . "\n" ;  <new_line>
exit ;  <new_line>
# All done!  <new_line>
<new_line>
----
template-runtime-code-check-for-endless-loop:
# Check for endless loop  <new_line>
$global_endless_loop_counter ++ ;  <new_line>
if ( $global_endless_loop_counter > $global_endless_loop_counter_limit ) {  <new_line>
&handle_endless_loop_encountered( ) ;  <new_line>
exit ;  <new_line>
}  <new_line>
----
template-runtime-code-check-for-time-limit-exceeded:
# Check for time limit exceeded  <new_line>
$global_interval_count_for_time_limit_check ++ ;  <new_line>
if ( $global_interval_count_for_time_limit_check > 10000 ) {  <new_line>
$global_interval_count_for_time_limit_check = 0 ;  <new_line>
$elapsed_time = time - $global_starting_time ;  <new_line>
if ( $elapsed_time > $global_time_limit ) {  <new_line>
&handle_time_limit_exceeded( ) ;  <new_line>
exit ;  <new_line>
}  <new_line>
}  <new_line>
----
template-runtime-code-for-text-storage-position-begin:
my template-storage-item-prefix current-text-storage-position = '
----
template-runtime-code-for-text-storage-position-end:
' ;
----
template-runtime-code-for-word-list-storage-position:
my template-storage-item-prefix storage-position-for-word-list-associated-with-loop = '' ;  combee **** # stores list of words for loop **** comenn
----
template-runtime-code-one-storage-position-declaration:
my storage-position-name = '' ;  <new_line>
----
template-runtime-code-protect-target-file:
# Protect target file as private  <new_line>
if ( not( chmod( $global_file_private_protection_mode , $global_target_file_full_path ) ) ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__setting_private_protection_not_successful ' . $global_target_file_full_path ;  <new_line>
}  <new_line>
----
template-runtime-code-statement-end-with-new-line:
;  <new_line>
----
template-runtime-code-storage-item-with-pointer:
template-storage-item-prefix storage-item-pointer
----
template-segment-branch-begin:
# no-space dashes-long-line  <new_line>
#  Function branching based on phrase name  <new_line>
#  <new_line>
<new_line>
sub function_branch_based_on_phrase_name( ) {  <new_line>
<new_line>

template-runtime-code-check-for-endless-loop
<new_line>
template-runtime-code-check-for-time-limit-exceeded
<new_line>

if ( $global_phrase_name_to_match eq $global_phrase_name_currently_executing ) {  <new_line>
print 'ERROR:  Phrase ' . $global_phrase_name_to_match . ' has requested executing itself, which would cause an endless loop, so exiting now!' . "\n" ;  <new_line>

$global_action_result = 'dashrep_runtime_error__function_branch_based_on_phrase_name__case_attempt_to_execute_self__endless_loop ' . $global_phrase_name_to_match . "\n" ;  <new_line>

exit ;  <new_line>
}  <new_line>

if ( index( $global_phrase_name_to_match , ' ' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_runtime_error__function_branch_based_on_phrase_name__case_invalid_phrase_name ' . $global_phrase_name_to_match . "\n" ;  <new_line>
exit ;  <new_line>
}  <new_line>

if ( $global_phrase_name_to_match eq 'start-here' ) {  <new_line>
&function_compiled__start_here( ) ;
----
template-segment-branch-end:
} elsif ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ) ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= code-get-or-put-phrase-definition-begin $global_phrase_name_to_match code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>

if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>

$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= $global_phrase_name_to_match ;  <new_line>
} # end of branching  <new_line>
return '' ;  <new_line>
} # end of function_branch_based_on_phrase_name  <new_line>
<new_line>
----
template-segment-definition-items-begin:
# no-space dashes-long-line  <new_line>
#  Begin text encountered in definitions  <new_line>
<new_line>
----
template-segment-definition-items-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End text encountered in definitions  <new_line>
<new_line>
----
template-segment-functions-compiled-begin:
# no-space dashes-long-line  <new_line>
#  Begin compiled functions  <new_line>
<new_line>
----
template-segment-functions-compiled-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End compiled functions  <new_line>
<new_line>
<new_line>
----
template-segment-functions-replacement-only-begin:
# no-space dashes-long-line  <new_line>
#  Functions that only do simple (single-item) replacement  <new_line>
#  <new_line>
<new_line>
----
template-segment-functions-replacement-only-end:
<new_line>
sub special_function_do_single_replacement_only( ) {  <new_line>
if ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
if ( $global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] > 0 ) {  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' ' ;  <new_line>
}  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] ++ ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= $global_phrase_name ;  <new_line>
}  <new_line>
return '' ;  <new_line>
}  <new_line>
<new_line>

<new_line>
#  End of functions that only do single-item replacement only  <new_line>
<new_line>
----
template-segment-functions-runtime-begin:
# no-space dashes-long-line  <new_line>
#  Execute starting/main function  <new_line>
<new_line>

if ( ( exists( $global_dashrep_replacement{ 'yes<character_hyphen>or<character_hyphen>no<character_hyphen>count<character_hyphen>phrase<character_hyphen>usage' } ) ) && ( $global_dashrep_replacement{ 'yes<character_hyphen>or<character_hyphen>no<character_hyphen>count<character_hyphen>phrase<character_hyphen>usage' } eq 'yes' ) ) {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_yes ;  <new_line>
} else {  <new_line>
$global_yes_or_no_count_phrase_usage = $global_no ;  <new_line>
}  <new_line>
$global_accumulator[ 1 ] = '' ;  <new_line>
& no-space function-name-prefix no-space start_here( ) ;  <new_line>
$output_results = &dashrep_expand_phrases( $global_accumulator[ 1 ] ) ;  <new_line>
if ( ( exists( code-get-or-put-phrase-definition-begin 'standard<character_hyphen>output' code-get-or-put-phrase-definition-end ) ) && ( code-get-or-put-phrase-definition-begin 'standard<character_hyphen>output' code-get-or-put-phrase-definition-end ne '' ) ) {  <new_line>
print code-get-or-put-phrase-definition-begin 'standard-output' code-get-or-put-phrase-definition-end ;  <new_line>
if ( $global_yes_or_no_trace_output_file_is_open == $global_yes ) {  <new_line>
print TRACE_OUT "\n\n\n" . $output_results . "\n" ;  <new_line>
}  <new_line>
} else {  <new_line>
print $output_results . "\n" ;  <new_line>
}  <new_line>

exit ;  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Begin runtime functions  <new_line>
<new_line>
----
template-segment-functions-runtime-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End runtime functions  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  All done.  <new_line>
<new_line>

exit;  <new_line>

1;  <new_line>
----
template-segment-initialize-begin:
# no-space dashes-long-line  <new_line>
#  Declare and initialize global arrays and variables  <new_line>
<new_line>
----
template-segment-initialize-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End of initialize variables  <new_line>
<new_line>
----
template-segment-optional-extra-runtime-functions-begin:
# no-space dashes-long-line  <new_line>
#  Begin optional extra runtime functions  <new_line>
#  <new_line>
#  Reminder: Only the following Dashrep conversions are done:  <new_line>
#  * Dashrep comments are removed.  <new_line>
#  * New line directives in angle brackets are handled.  <new_line>
#  * Character space directives in angle brackets are replaced.  <new_line>
#  * Multiple adjacent spaces are compressed to a single space.  <new_line>
<new_line>
----
template-segment-optional-extra-runtime-functions-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End optional extra runtime functions  <new_line>
<new_line>
----
template-segment-optional-import-statements-begin:
# no-space dashes-long-line  <new_line>
#  Begin optional import statements  <new_line>
#  <new_line>
#  Reminder: Only the following Dashrep conversions are done:  <new_line>
#  * Dashrep comments are removed.  <new_line>
#  * New line directives in angle brackets are handled.  <new_line>
#  * Character space directives in angle brackets are replaced.  <new_line>
#  * Multiple adjacent spaces are compressed to a single space.  <new_line>
<new_line>
----
template-segment-optional-import-statements-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End optional import statements  <new_line>
<new_line>
----
template-segment-start-object-code-begin:
#!/usr/bin/perl  <new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  Dashrep compiler output  <new_line>
<new_line>
# object-code-copyright-notice  <new_line>
<new_line>
<new_line>

# no-space dashes-long-line  <new_line>
#  Copyright notice within phrase "source<character_hyphen>code<character_hyphen>copyright<character_hyphen>notice":  <new_line>
<new_line>
----
template-segment-start-object-code-end:
<new_line>
<new_line>
# no-space dashes-long-line  <new_line>
#  End of introduction to object code that follows  <new_line>
<new_line>
----
template-storage-item-containing-word-list-associated-with-loop:
template-storage-item-prefix storage-position-for-word-list-associated-with-loop
----
template-storage-item-prefix:
$storage_item__ no-space
----
check-operand-four-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-four runtime-code-check-operand-end-is-phrase-name
----
check-operand-four-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-four runtime-code-check-operand-end-is-positive-integer
----
check-operand-one-input-file-exists:
runtime-code-check-operand-begin-input-file-exists runtime-code-for-operand-number-one runtime-code-check-operand-end-input-file-exists
----
check-operand-one-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-one runtime-code-check-operand-end-is-file-name
----
check-operand-one-is-folder-name:
runtime-code-check-operand-begin-is-folder-name runtime-code-for-operand-number-one runtime-code-check-operand-end-is-folder-name
----
check-operand-one-is-input-file-open-for-reading:
runtime-code-check-operand-begin-is-input-file-open-for-reading runtime-code-for-operand-number-one runtime-code-check-operand-end-is-input-file-open-for-reading
----
check-operand-one-is-integer:
runtime-code-check-operand-begin-is-integer runtime-code-for-operand-number-one runtime-code-check-operand-end-is-integer
----
check-operand-one-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-one runtime-code-check-operand-end-is-phrase-name
----
check-operand-one-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-one runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-one-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-one runtime-code-check-operand-end-is-positive-integer
----
check-operand-one-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-one runtime-code-check-operand-end-is-real-number
----
check-operand-three-contains-real-numbers:
runtime-code-check-operand-begin-contains-real-numbers runtime-code-for-operand-number-three runtime-code-check-operand-end-contains-real-numbers
----
check-operand-three-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-three runtime-code-check-operand-end-is-phrase-name
----
check-operand-three-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-three runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-three-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-three runtime-code-check-operand-end-is-positive-integer
----
check-operand-two-contains-real-numbers:
runtime-code-check-operand-begin-contains-real-numbers runtime-code-for-operand-number-two runtime-code-check-operand-end-contains-real-numbers
----
check-operand-two-is-file-name:
runtime-code-check-operand-begin-is-file-name runtime-code-for-operand-number-two runtime-code-check-operand-end-is-file-name
----
check-operand-two-is-input-file-open-for-reading:
runtime-code-check-operand-begin-is-input-file-open-for-reading runtime-code-for-operand-number-two runtime-code-check-operand-end-is-input-file-open-for-reading
----
check-operand-two-is-integer:
runtime-code-check-operand-begin-is-integer runtime-code-for-operand-number-two runtime-code-check-operand-end-is-integer
----
check-operand-two-is-output-append-file:
runtime-code-check-operand-begin-output-append-file runtime-code-for-operand-number-two runtime-code-check-operand-end-output-append-file
----
check-operand-two-is-phrase-name:
runtime-code-check-operand-begin-is-phrase-name runtime-code-for-operand-number-two runtime-code-check-operand-end-is-phrase-name
----
check-operand-two-is-phrase-not-empty:
runtime-code-check-operand-begin-is-phrase-not-empty runtime-code-for-operand-number-two runtime-code-check-operand-end-is-phrase-not-empty
----
check-operand-two-is-positive-integer:
runtime-code-check-operand-begin-is-positive-integer runtime-code-for-operand-number-two runtime-code-check-operand-end-is-positive-integer
----
check-operand-two-is-real-number:
runtime-code-check-operand-begin-is-real-number runtime-code-for-operand-number-two runtime-code-check-operand-end-is-real-number
----
list-of-template-functions:
template-function-dashrep-expand-phrases
template-function-handle-endless-loop-encountered
template-function-handle-time-limit-exceeded

template-function-parameterized-yes-or-no-empty
template-function-parameterized-remove-leading-trailing-spaces
template-function-parameterized-yes-or-no-phrase-name
template-function-parameterized-yes-or-no-phrase-definition-not-empty
template-function-parameterized-yes-or-no-positive-integer
template-function-parameterized-yes-or-no-integer
template-function-parameterized-yes-or-no-real-number
template-function-parameterized-yes-or-no-phrase-contains-real-numbers
template-function-parameterized-normalize-calculated-value
template-function-parameterized-convert-numeric-text-into-numeric-value
template-function-parameterized-convert-numeric-value-into-numeric-text
template-function-parameterized-get-list-of-words
template-function-parameterized-yes-or-no-valid-path
template-function-parameterized-yes-or-no-valid-path-prefix
template-function-parameterized-yes-or-no-file-name
template-function-parameterized-yes-or-no-folder-name
template-function-parameterized-open-file-for-reading
template-function-parameterized-open-file-for-appending
template-function-parameterized-open-file-for-writing-new-file
template-function-parameterized-yes-or-no-valid-url

template-function-point-to-words
template-function-point-to-words-in-operand-one
template-function-point-to-words-in-operand-two
template-function-point-to-words-in-operand-three
template-function-remove-extra-spaces
template-function-get-count-of-words
template-function-get-word-at-position
template-function-open-trace-output-file-if-not-open

list-of-template-functions-for-requested-actions
----
open-file-for-appending:
$global_yes_or_no = &function_parameterized__open_file_for_appending( $global_target_file_name ) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
open-file-for-reading:
$global_yes_or_no = &function_parameterized__open_file_for_reading( $global_source_file_name ) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
open-file-for-writing-new-file:
$global_yes_or_no = &function_parameterized__open_file_for_writing_new_file( $global_target_file_name ) ;  <new_line>
if ( $global_yes_or_no == $global_no ) {  <new_line>
$global_yes_or_no_operand_error = $global_yes ;  <new_line>
}  <new_line>
----
required-operand-count-for-action-append-multiple-from-phrases-named-in-pattern:
2
----
required-operand-count-for-action-append-new-line:
1
----
required-operand-count-for-action-append-repeatedly-using-count:
3
----
required-operand-count-for-action-append-text-no-space:
2
----
required-operand-count-for-action-append-text:
2
----
required-operand-count-for-action-clear-listed-phrases:
1
----
required-operand-count-for-action-clear-phrase:
1
----
required-operand-count-for-action-convert-from-spoken-dashrep-code:
2
----
required-operand-count-for-action-convert-into-spoken-dashrep-code:
2
----
required-operand-count-for-action-convert-unicode-to-html-entities:
2
----
required-operand-count-for-action-copy-and-move-attributes-into-xml-tags:
2
----
required-operand-count-for-action-copy-and-remove-attributes-from-xml-tags:
2
----
required-operand-count-for-action-copy-and-replace-using-paired-listed-words:
3
----
required-operand-count-for-action-copy-and-replace:
4
----
required-operand-count-for-action-copy-append-file-to-file:
2
----
required-operand-count-for-action-copy-characters-from-position-to-position:
4
----
required-operand-count-for-action-copy-definition-of-named-phrase:
2
----
required-operand-count-for-action-copy-from-columns-in-file-to-column-lists:
2
----
required-operand-count-for-action-copy-from-columns-in-file-to-named-phrases:
3
----
required-operand-count-for-action-copy-from-file-to-phrase:
2
----
required-operand-count-for-action-copy-from-phrase-append-to-file:
2
----
required-operand-count-for-action-copy-initial-caps:
2
----
required-operand-count-for-action-copy-listed-words-to-phrases-named-in-pattern:
2
----
required-operand-count-for-action-copy-lowercase-only:
2
----
required-operand-count-for-action-copy-text:
2
----
required-operand-count-for-action-copy-uppercase-only:
2
----
required-operand-count-for-action-copy-without-extra-spaces:
2
----
required-operand-count-for-action-copy-word-at-position:
3
----
required-operand-count-for-action-copy-words-found-in-both-lists:
3
----
required-operand-count-for-action-copy-words-found-in-either-list:
3
----
required-operand-count-for-action-copy-words-found-only-in-first-list:
3
----
required-operand-count-for-action-copy-words-from-position-to-position:
4
----
required-operand-count-for-action-copy-words-offset-skip:
4
----
required-operand-count-for-action-copy-words-order-reversed:
2
----
required-operand-count-for-action-copy-words-rearrange-using-order-sort-alphabetic:
3
----
required-operand-count-for-action-copy-words-rearrange-using-order-sort-numeric:
3
----
required-operand-count-for-action-copy-words-sort-alphabetic:
2
----
required-operand-count-for-action-copy-words-sort-numeric:
2
----
required-operand-count-for-action-copy-words-that-begin-with-listed-words:
3
----
required-operand-count-for-action-copy-words-that-begin-with-text:
3
----
required-operand-count-for-action-copy-words-that-contain-listed-words:
3
----
required-operand-count-for-action-copy-words-unique-only:
2
----
required-operand-count-for-action-copy-zero-pad-left-to-length:
3
----
required-operand-count-for-action-create-empty-sub-folder:
1
----
required-operand-count-for-action-decode-from-cgi-parameter:
2
----
required-operand-count-for-action-delete-file:
1
----
required-operand-count-for-action-delete-listed-phrases:
1
----
required-operand-count-for-action-encode-as-cgi-parameter:
2
----
required-operand-count-for-action-expand-parameters-only:
2
----
required-operand-count-for-action-expand-text:
2
----
required-operand-count-for-action-find-line-in-file-that-begins-with-text:
3
----
required-operand-count-for-action-find-lines-in-file-that-begin-with-any-listed-word:
3
----
required-operand-count-for-action-find-lines-in-file-that-begin-with-any-two-words-listed:
3
----
required-operand-count-for-action-gather-from-tagged-file-one-entry:
2
----
required-operand-count-for-action-gather-tagged-info-from-file:
2
----
required-operand-count-for-action-generate-counts-from-integer-to-integer:
3
----
required-operand-count-for-action-generate-every-ordered-pairwise-combination-of-words:
3
----
required-operand-count-for-action-generate-every-pairwise-combination-of-words:
4
----
required-operand-count-for-action-generate-list-of-all-dashrep-phrases:
1
----
required-operand-count-for-action-generate-list-of-files-in-current-read-directory:
1
----
required-operand-count-for-action-generate-list-of-folders-in-current-read-directory:
1
----
required-operand-count-for-action-generate-phrase-usage-counts:
1
----
required-operand-count-for-action-generate-positions-of-delimiter:
3
----
required-operand-count-for-action-generate-positions-of-first-matching-delimiter-after-listed-positions:
4
----
required-operand-count-for-action-generate-positions-of-listed-words:
3
----
required-operand-count-for-action-get-cgi-information:
0
----
required-operand-count-for-action-get-characters-from-position-to-position:
3
----
required-operand-count-for-action-get-count-of-characters:
1
----
required-operand-count-for-action-get-count-of-words:
1
----
required-operand-count-for-action-get-current-time-in-epoch-seconds:
0
----
required-operand-count-for-action-get-definitions-from-file:
1
----
required-operand-count-for-action-get-definitions-from-phrase:
1
----
required-operand-count-for-action-get-position-of-matching-text:
2
----
required-operand-count-for-action-get-position-of-word:
2
----
required-operand-count-for-action-get-url-resource:
2
----
required-operand-count-for-action-get-word-at-position:
2
----
required-operand-count-for-action-insert-angle-bracketed-definitions:
1
----
required-operand-count-for-action-insert-codeview-tags:
1
----
required-operand-count-for-action-linewise-read-from-file-and-use-handler:
2
----
required-operand-count-for-action-modification-time-of-file:
1
----
required-operand-count-for-action-numeric-absolute:
1
----
required-operand-count-for-action-numeric-cosine:
1
----
required-operand-count-for-action-numeric-decrement:
1
----
required-operand-count-for-action-numeric-divide-by:
2
----
required-operand-count-for-action-numeric-equal-greater-less-compare:
2
----
required-operand-count-for-action-numeric-increment:
1
----
required-operand-count-for-action-numeric-integer:
1
----
required-operand-count-for-action-numeric-logarithm-base-10:
1
----
required-operand-count-for-action-numeric-logarithm-base-e:
1
----
required-operand-count-for-action-numeric-minus:
2
----
required-operand-count-for-action-numeric-odd-or-even:
1
----
required-operand-count-for-action-numeric-sine:
1
----
required-operand-count-for-action-numeric-two-dimensional-sort-into-columns-and-rows:
4
----
required-operand-count-for-action-numeric-vector-absolutes:
2
----
required-operand-count-for-action-numeric-vector-add-number:
3
----
required-operand-count-for-action-numeric-vector-integers:
2
----
required-operand-count-for-action-numeric-vector-multiply-by-number:
3
----
required-operand-count-for-action-numeric-vectors-add:
3
----
required-operand-count-for-action-numeric-vectors-divide-by:
3
----
required-operand-count-for-action-numeric-vectors-from-delta-values-calculate-distances:
3
----
required-operand-count-for-action-numeric-vectors-multiply:
3
----
required-operand-count-for-action-numeric-y-map-tile-number-based-on-latitude:
1
----
required-operand-count-for-action-prepend-text-no-space:
2
----
required-operand-count-for-action-prepend-text:
2
----
required-operand-count-for-action-put-listed-phrase-definitions-into-phrase:
1
----
required-operand-count-for-action-rename-file:
2
----
required-operand-count-for-action-set-file-permission-private-but-executable:
1
----
required-operand-count-for-action-set-file-permission-private:
1
----
required-operand-count-for-action-set-file-permission-public-read:
1
----
required-operand-count-for-action-size-of-file:
1
----
required-operand-count-for-action-split-epoch-seconds-into-named-components-for-zero-meridian:
1
----
required-operand-count-for-action-split-epoch-seconds-into-named-components:
1
----
required-operand-count-for-action-trace-show:
1
----
required-operand-count-for-action-use-handler-with-each-word-in-phrase:
2
----
required-operand-count-for-action-write-dashrep-definitions-listed-in-phrase-to-file:
2
----
required-operand-count-for-action-write-gathered-listed-items-to-end-of-file:
2
----
required-operand-count-for-action-xml-move-attributes-into-tag-elements:
1
----
required-operand-count-for-action-yes-or-no-empty-phrase:
1
----
required-operand-count-for-action-yes-or-no-file-exists:
1
----
required-operand-count-for-action-yes-or-no-folder-exists:
1
----
required-operand-count-for-action-yes-or-no-same-two-phrase-definitions:
2
----
required-operand-count-for-action-yes-or-no-word-is-in-phrase:
2
----
required-operand-count-for-action-zero-one-multiple:
1
----
required-operand-count-for-action-zero-or-nonzero:
1
----
runtime-code-word-within-source-text:
substr( $global_source_text , $global_begin_position_for_word[ $global_word_pointer_numeric ] , $global_length_of_word[ $global_word_pointer_numeric ] )
----
specify-operand-one-is-file-name-for-reading:
$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
----
specify-operand-two-is-file-name-for-appending:
$global_target_file_name = runtime-code-for-operand-number-two ;  <new_line>
----
specify-operand-two-is-filename-for-writing-new-file:
$global_target_file_name = runtime-code-for-operand-number-two ;  <new_line>
----
template-check-operand-four-is-phrase-name:
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_four ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_phrase_name ' . $global_operand_four . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-four-is-positive-integer:
if ( &function_parameterized__yes_or_no_positive_integer( $global_operand_four ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_positive_integer ' . $global_operand_four . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-contains-integer:
template-check-operand-one-is-phrase-name

if ( &function_parameterized__yes_or_no_integer( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_contains_integer ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-input-file-exists:
combee ******
if ( &function_parameterized__yes_or_no_input_file_exists( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_exists_file ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-one-is-file-name:
combee ******
if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_invalid_file_name ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-one-is-folder-name:
combee ******
if ( &function_parameterized__yes_or_no_folder_name( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_invalid_folder_name ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-one-is-input-file-open-for-reading:
combee ******
if ( &function_parameterized__yes_or_no_file_open_for_reading( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_cannot_open_file_for_reading ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-one-is-integer:
if ( &function_parameterized__yes_or_no_integer( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_integer ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-is-phrase-name:
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_phrase_name ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-is-phrase-not-empty:
if ( &function_parameterized__yes_or_no_phrase_definition_not_empty( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_empty_phrase ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-is-positive-integer:
if ( &function_parameterized__yes_or_no_positive_integer( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_positive_integer ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-one-is-real-number:
if ( &function_parameterized__yes_or_no_real_number( $global_operand_one ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_real_number ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-three-contains-real-numbers:
if ( &function_parameterized__yes_or_no_phrase_contains_real_numbers( $global_operand_three ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_list_of_real_numbers ' . $global_operand_three . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-three-is-phrase-name:
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_three ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_phrase_name ' . $global_operand_three . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-three-is-phrase-not-empty:
if ( &function_parameterized__yes_or_no_phrase_definition_not_empty( $global_operand_three ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_empty_phrase ' . $global_operand_three . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-three-is-positive-integer:
if ( &function_parameterized__yes_or_no_positive_integer( $global_operand_three ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_positive_integer ' . $global_operand_three . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-contains-real-numbers:
if ( &function_parameterized__yes_or_no_phrase_contains_real_numbers( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_list_of_real_numbers ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-is-file-name:
combee ******
if ( &function_parameterized__yes_or_no_file_name( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_invalid_file_name ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-two-is-input-file-open-for-reading:
combee ******
if ( &function_parameterized__yes_or_no_file_open_for_reading( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_cannot_open_file_for_reading ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-two-is-integer:
if ( &function_parameterized__yes_or_no_integer( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_integer ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-is-output-append-file:
combee ******
if ( &function_parameterized__yes_or_no_file_open_for_appending( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_cannot_append_to_file ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
****** comenn
----
template-check-operand-two-is-phrase-name:
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_phrase_name ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-is-phrase-not-empty:
if ( &function_parameterized__yes_or_no_phrase_definition_not_empty( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_phrase_empty ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-is-positive-integer:
if ( &function_parameterized__yes_or_no_positive_integer( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_positive_integer ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-check-operand-two-is-real-number:
if ( &function_parameterized__yes_or_no_real_number( $global_operand_two ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_real_number ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-current-word-in-operand-one:
substr( $global_operand_one_words , $global_word_begin_operand_one_at_word[ $global_word_pointer_operand_one ] , $global_word_length_operand_one_at_word[ $global_word_pointer_operand_one ] )
----
template-current-word-in-operand-three:
substr( $global_operand_three_words , $global_word_begin_operand_three_at_word[ $global_word_pointer_operand_three ] , $global_word_length_operand_three_at_word[ $global_word_pointer_operand_three ] )
----
template-current-word-in-operand-two:
substr( $global_operand_two_words , $global_word_begin_operand_two_at_word[ $global_word_pointer_operand_two ] , $global_word_length_operand_two_at_word[ $global_word_pointer_operand_two ] )
----
template-function-append-multiple-from-phrases-named-in-pattern:
# no-space dashes-long-line  <new_line>

sub function__append_multiple_from_phrases_named_in_pattern( ) {  <new_line>
$global_action_name_with_underscores = 'append_multiple_from_phrases_named_in_pattern' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_phrase_name_containing_pattern = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
$global_phrase_name_containing_parameter_list = '' ;  <new_line>
$global_phrase_name_containing_source_words = '' ;  <new_line>
if ( ( defined( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } ) ) && ( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } =~ /^([^ ]*)ambee<character_hyphen>([^ ]*)<character_hyphen>amenn([^ ]*)$/ ) ) {  <new_line>
    $global_prefix = $1 ;  <new_line>
    $global_phrase_name_containing_parameter_list = $2 ;  <new_line>
    $global_suffix = $3 ;  <new_line>
} else {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__append_multiple_from_phrases_named_in_pattern__case_pattern_invalid ' . $global_phrase_name_containing_pattern ;  <new_line>
    return ;  <new_line>
}  <new_line>
$global_prefix =~ s/[ \n]+//g ;  <new_line>
$global_prefix =~ s/^<character_hyphen>+// ;  <new_line>
$global_suffix =~ s/[ \n]+//g ;  <new_line>
$global_suffix =~ s/<character_hyphen>+$// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/[ \n]+//g ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__append_multiple_from_phrases_named_in_pattern__case_parameter_list_empty' ;  <new_line>
    return ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__append_multiple_from_phrases_named_in_pattern__case_word_list_empty' ;  <new_line>
    return ;  <new_line>
}  <new_line>
@global_list_of_parameter_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
for ( $global_pointer = 0 ; $global_pointer <= $#global_list_of_parameter_words ; $global_pointer ++ ) {  <new_line>
    $global_source_phrase_name = $global_prefix . $global_list_of_parameter_words[ $global_pointer ] . $global_suffix ;  <new_line>
    if ( ( $global_source_phrase_name =~ /^[^ ]+$/ ) && ( defined( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
        $global_text_string = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
        $global_text_string =~ s/\n/ /sg ;  <new_line>
        $global_text_string =~ s/^ +// ;  <new_line>
        $global_text_string =~ s/ +$// ;  <new_line>
        $global_dashrep_replacement{ $global_target_phrase_name } .= ' ' . $global_text_string ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-append-repeatedly-using-count:
# no-space dashes-long-line  <new_line>

sub function__append_repeatedly_using_count( ) {  <new_line>
$global_action_name_with_underscores = 'append_repeatedly_using_count' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_to_append = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_action_result = '' ;  <new_line>
    return ;  <new_line>
}  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_operand_two } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
}  <new_line>
$global_text_to_append = &function_parameterized__remove_leading_trailing_spaces( $global_text_to_append ) ;  <new_line>
if ( $global_operand_three eq '0' ) {  <new_line>
    $global_repeat_count = 0 ;  <new_line>
} else {  <new_line>
    $global_repeat_count = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
}  <new_line>
if ( ( $global_repeat_count < 1 ) || ( $global_repeat_count > 99999 ) ) {  <new_line>
    $global_action_result = '' ;  <new_line>
} else {  <new_line>
    $global_growing_text_to_append = '' ;  <new_line>
    if ( $global_dashrep_replacement{ $global_operand_two } eq '' ) {  <new_line>
        $global_growing_text_to_append = $global_text_to_append ;  <new_line>
    } else {  <new_line>
        $global_growing_text_to_append = ' ' . $global_text_to_append ;  <new_line>
    }  <new_line>
    for ( $global_count = 2 ; $global_count <= $global_repeat_count ; $global_count ++ ) {  <new_line>
        $global_growing_text_to_append .= ' ' . $global_text_to_append ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_operand_two } .= $global_growing_text_to_append ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-clear-listed-phrases:
# no-space dashes-long-line  <new_line>

sub function__clear_listed_phrases( ) {  <new_line>
$global_action_name_with_underscores = 'clear_listed_phrases' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
if ( not ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_phrase_names = split( / +/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
foreach $global_phrase_name_to_clear ( @global_list_of_phrase_names ) {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ) {  <new_line>
        $global_dashrep_replacement{ $global_phrase_name_to_clear } = '' ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-clear-phrase:
# no-space dashes-long-line  <new_line>

sub function__clear_phrase( ) {  <new_line>
$global_action_name_with_underscores = 'clear_phrase' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = '' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-convert-unicode-to-html-entities:
# no-space dashes-long-line  <new_line>

sub function__convert_unicode_to_html_entities( ) {  <new_line>
$global_action_name_with_underscores = 'convert_unicode_to_html_entities' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

#  Converts non hyphen-here ASCII characters, and convert a few  <new_line>
#  ASCII characters such as:  <new_line>
#  11 which is "LF" (line feed)  <new_line>
#  13 which is "CR" (carriage return)  <new_line>
#  127 which is "del"  <new_line>

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_accumulated_text = '' ;  <new_line>
@global_octet_number_at_position = unpack( "C*" , $global_dashrep_replacement{ $global_source_phrase_name } ) ;  <new_line>
$global_yes_or_no_within_ampersand_encoded_character = 'no' ;  <new_line>
$global_pointer = -1 ;  <new_line>
while ( $global_pointer < $#global_octet_number_at_position ) {  <new_line>
    $global_pointer ++ ;  <new_line>
    $global_octet_number = $global_octet_number_at_position[ $global_pointer ] ;  <new_line>
    if ( $global_octet_number < 32 ) {  <new_line>
        $global_unicode_number = $global_octet_number ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
    } elsif ( $global_octet_number < 127 ) {  <new_line>
        $global_accumulated_text .= chr( $global_octet_number ) ;  <new_line>
    } elsif ( $global_octet_number >= 0xfc ) {  <new_line>
        $global_unicode_number = ( ( ( ( ( ( ( ( ( ( $global_octet_number - 0xfc ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 4 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 5 ] - 128 ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        $global_pointer += 5 ;  <new_line>
    } elsif ( $global_octet_number >= 0xf8 ) {  <new_line>
        $global_unicode_number = ( ( ( ( ( ( ( ( $global_octet_number - 0xf8 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 4 ] - 128 ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        $global_pointer += 4 ;  <new_line>
    } elsif ( $global_octet_number >= 0xf0 ) {  <new_line>
        $global_unicode_number = ( ( ( ( ( ( $global_octet_number - 0xf0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 3 ] - 128 ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        $global_pointer += 3 ;  <new_line>
    } elsif ( $global_octet_number >= 0xe0 ) {  <new_line>
        $global_unicode_number = ( ( ( ( $global_octet_number - 0xe0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 2 ] - 128 ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        $global_pointer += 2 ;  <new_line>
    } elsif ( $global_octet_number >= 0xc0 ) {  <new_line>
        $global_unicode_number = ( ( $global_octet_number - 0xc0 ) * 64 ) + $global_octet_number_at_position[ $global_pointer + 1 ] - 128 ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
        $global_pointer += 1 ;  <new_line>
    } elsif ( $global_octet_number > 0 ) {  <new_line>
        $global_unicode_number = $global_octet_number ;  <new_line>
        $global_accumulated_text .= '&#' . $global_unicode_number . ';' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-and-move-attributes-into-xml-tags:
# no-space dashes-long-line  <new_line>

sub function__copy_and_move_attributes_into_xml_tags( ) {  <new_line>
$global_action_name_with_underscores = 'copy_and_move_attributes_into_xml_tags' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
while( $global_text_being_edited =~ / *\/> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *\/> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4 \/>/sg ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit <character_hyphen> 100 ) {  <new_line>
        $global_action_result = 'error_endless_loop_within_action_copy_and_move_attributes_into_xml_tags';  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
while( $global_text_being_edited =~ / *> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4>/sg ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit <character_hyphen> 100 ) {  <new_line>
        $global_action_result = 'error_endless_loop_within_action_copy_and_move_attributes_into_xml_tags';  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_text_being_edited ;  <new_line>

template-function-segment-ending
----
template-function-copy-and-remove-attributes-from-xml-tags:
# no-space dashes-long-line  <new_line>

sub function__copy_and_remove_attributes_from_xml_tags( ) {  <new_line>
$global_action_name_with_underscores = 'copy_and_remove_attributes_from_xml_tags' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/< *(\/?) *([a<character_hyphen>zA<character_hyphen>Z]+)[^>\/]*(\/?)[^>]*>/<$1$2$3>/gi ;  <new_line>
$global_text_being_edited =~ s/><!\[CDATA\[/>/gi ;  <new_line>
$global_text_being_edited =~ s/\]\]></</gi ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_text_being_edited ;  <new_line>

template-function-segment-ending
----
template-function-copy-and-replace-using-paired-listed-words:
# no-space dashes-long-line  <new_line>

sub function__copy_and_replace_using_paired_listed_words( ) {  <new_line>
$global_action_name_with_underscores = 'copy_and_replace_using_paired_listed_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-not-empty

$global_action_result = '' ;  <new_line>

if ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = '' ;  <new_line>
}  <new_line>

$global_result_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>

if ( not( exists( $global_dashrep_replacement{ $global_operand_three } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_three } = '' ;  <new_line>
}  <new_line>

$global_paired_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_paired_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_paired_words_as_text =~ s/^ +// ;  <new_line>
$global_paired_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_paired_words = split( / +/ , $global_paired_words_as_text ) ;  <new_line>
$global_pair_status = 'search' ;  <new_line>
for ( $global_pair_pointer_offset_zero = 0 ; $global_pair_pointer_offset_zero <= $#global_list_of_paired_words ; $global_pair_pointer_offset_zero ++ ) {  <new_line>
    if ( $global_pair_status eq 'search' ) {  <new_line>
        $global_string_to_be_replaced = $global_list_of_paired_words[ $global_pair_pointer_offset_zero ] ;  <new_line>
        $global_pair_status = 'replace' ;  <new_line>
    } else {  <new_line>
        $global_string_to_insert = $global_list_of_paired_words[ $global_pair_pointer_offset_zero ] ;  <new_line>
        $global_remaining_text = $global_result_text ;  <new_line>
        $global_result_text = '' ;  <new_line>
        $global_pointer_to_matching_text = index( $global_remaining_text , $global_string_to_be_replaced ) ;  <new_line>
        while ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            if ( $global_pointer_to_matching_text > 0 ) {  <new_line>
                $global_result_text .= substr( $global_remaining_text , 0 , $global_pointer_to_matching_text ) ;  <new_line>
            }  <new_line>
            $global_result_text .= $global_string_to_insert ;  <new_line>
            $global_remaining_text = substr( $global_remaining_text , ( $global_pointer_to_matching_text + length( $global_string_to_be_replaced ) ) ) ;  <new_line>
            $global_pointer_to_matching_text = index( $global_remaining_text , $global_string_to_be_replaced ) ;  <new_line>
        }  <new_line>
        $global_result_text .= $global_remaining_text ;  <new_line>
        $global_pair_status = 'search' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_result_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-and-replace:
# no-space dashes-long-line  <new_line>

sub function__copy_and_replace( ) {  <new_line>
$global_action_name_with_underscores = 'copy_and_replace' ; <new_line>

template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name
template-check-operand-four-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_target_text = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
$global_string_to_be_replaced = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_four } ) ) {  <new_line>
    $global_text_to_insert = $global_dashrep_replacement{ $global_operand_four } ;  <new_line>
} else {  <new_line>
    $global_text_to_insert = '' ;  <new_line>
}  <new_line>
$global_source_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_length_of_string_to_be_replaced = length( $global_string_to_be_replaced ) ;  <new_line>
$global_length_of_text_to_insert = length( $global_text_to_insert ) ;  <new_line>
if ( ( $global_length_of_text_to_insert >= $global_length_of_string_to_be_replaced ) && ( index( $global_text_to_insert , $global_string_to_be_replaced ) >= 0 ) ) {  <new_line>
} elsif ( ( $global_length_of_string_to_be_replaced >= $global_length_of_text_to_insert ) && ( $global_length_of_text_to_insert > 0 ) && ( index( $global_string_to_be_replaced , $global_text_to_insert ) >= 0 ) ) {  <new_line>
} else {  <new_line>
    $global_character_pointer_begin = 0 ;  <new_line>
    $global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>
    while ( $global_character_pointer_end >= -1 ) {  <new_line>
        $global_length_of_text_segment = $global_character_pointer_end - $global_character_pointer_begin + 1 ;  <new_line>
        if ( $global_length_of_text_segment > 0 ) {  <new_line>
            $global_target_text .= substr( $global_source_text , $global_character_pointer_begin , $global_length_of_text_segment ) ;  <new_line>
        }  <new_line>
        $global_target_text .= $global_text_to_insert ;  <new_line>
        $global_character_pointer_begin = $global_character_pointer_end + $global_length_of_string_to_be_replaced + 1 ;  <new_line>
        $global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>
    }  <new_line>
    if ( $global_character_pointer_begin < $global_length_of_text_source ) {  <new_line>
        $global_target_text .= substr( $global_source_text , $global_character_pointer_begin ) ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_target_phrase_name } = $global_target_text ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-append-file-to-file:
# no-space dashes-long-line  <new_line>

sub function__copy_append_file_to_file( ) {  <new_line>
$global_action_name_with_underscores = 'copy_append_file_to_file' ; <new_line>

template-return-if-no-permission-to-append-to-files
$global_target_file_name = $global_operand_two ;  <new_line>
template-open-file-for-appending
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    print OUTFILE $global_input_line . "\n" ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

template-function-segment-ending
----
template-function-copy-characters-from-position-to-position:
# no-space dashes-long-line  <new_line>

sub function__copy_characters_from_position_to_position( ) {  <new_line>
$global_action_name_with_underscores = 'copy_characters_from_position_to_position' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer
template-check-operand-four-is-positive-integer

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_pointer_one = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
$global_pointer_two = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_four ) ;  <new_line>
if ( $global_pointer_one > $global_pointer_two ) {  <new_line>
    $global_action_result = '' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = substr( $global_dashrep_replacement{ $global_source_phrase_name } , ( $global_pointer_one - 1 ) , ( $global_pointer_two - $global_pointer_one + 1 ) ) ;  <new_line>

template-function-segment-ending
----
template-function-copy-definition-of-named-phrase:
# no-space dashes-long-line  <new_line>

sub function__copy_definition_of_named_phrase( ) {  <new_line>
$global_action_name_with_underscores = 'copy_definition_of_named_phrase' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_phrase_name = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_phrase_name ) == $global_yes ) {  <new_line>
if ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-from-columns-in-file-to-column-lists:
# no-space dashes-long-line  <new_line>

sub function__copy_from_columns_in_file_to_column_lists( ) {  <new_line>
$global_action_name_with_underscores = 'copy_from_columns_in_file_to_column_lists' ; <new_line>
template-check-operand-two-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_list_name_prefix = $global_operand_two ;  <new_line>
@global_list_of_values_in_column = ( ) ;  <new_line>
$global_minimum_number_of_columns = 999 ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_input_line =~ s/[\n\t]+/ /g ;  <new_line>
    $global_input_line =~ s/^ +// ;  <new_line>
    $global_input_line =~ s/ +$// ;  <new_line>
    @global_value_in_column = split( / +/ , $global_input_line ) ;  <new_line>
    $global_number_of_columns = scalar( @global_value_in_column ) ;  <new_line>
    if ( $global_number_of_columns < 2 ) {  <new_line>
        next ;  <new_line>
    } elsif ( $global_number_of_columns < $global_minimum_number_of_columns ) {  <new_line>
        $global_minimum_number_of_columns = $global_number_of_columns ;  <new_line>
    }  <new_line>
    if ( $global_number_of_columns > 0 ) {  <new_line>
        for ( $global_column_pointer = 1 ; $global_column_pointer <= $global_minimum_number_of_columns ; $global_column_pointer ++ ) {  <new_line>
            $global_list_of_values_in_column[ $global_column_pointer ] .= $global_value_in_column[ $global_column_pointer <character_hyphen> 1 ] . " " ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
for ( $global_column_pointer = 1 ; $global_column_pointer <= $global_minimum_number_of_columns ; $global_column_pointer ++ ) {  <new_line>
    $global_list_of_values_in_column[ $global_column_pointer ] =~ s/ +$// ;  <new_line>
    $global_dashrep_replacement{ $global_list_name_prefix . "<character_hyphen>" . $global_column_pointer } = $global_list_of_values_in_column[ $global_column_pointer ] ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-copy-from-columns-in-file-to-named-phrases:
# no-space dashes-long-line  <new_line>

sub function__copy_from_columns_in_file_to_named_phrases( ) {  <new_line>
$global_action_name_with_underscores = 'copy_from_columns_in_file_to_named_phrases' ; <new_line>
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$//s ;  <new_line>
if ( $global_temp_text =~ / / ) {  <new_line>
    @global_phrase_naming_convention_for_column = split( /[ \n\r]+/ , $global_temp_text ) ;  <new_line>
    $global_number_of_column_names = scalar( @global_phrase_naming_convention_for_column ) ;  <new_line>
    $global_prefix_text = $global_phrase_naming_convention_for_column[ 0 ] ;  <new_line>
} else {  <new_line>
    $global_phrase_naming_convention_for_column[ 1 ] = '' ;  <new_line>
    $global_number_of_column_names = 2 ;  <new_line>
    $global_prefix_text = $global_temp_text ;  <new_line>
}  <new_line>
if ( $global_prefix_text !~ /^[^ ]+$/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_from_columns_in_file_to_named_phrase__case_prefix_invalid ' . $global_prefix_text ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_name_of_phrase_that_contains_list_of_index_values = $global_operand_three ;  <new_line>
if ( $global_name_of_phrase_that_contains_list_of_index_values !~ /^[a hyphen-here z0<character_hyphen>9_\<character_hyphen>]+$/i ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_from_columns_in_file_to_named_phrase__case_invalid_third_operand ' . $global_name_of_phrase_that_contains_list_of_index_values ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_unique_values = '' ;  <new_line>
$global_dashrep_replacement{ $global_name_of_phrase_that_contains_list_of_index_values } = $global_list_of_unique_values ;  <new_line>
if ( ( exists( $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here use hyphen-here two hyphen-here spaces hyphen-here as hyphen-here column hyphen-here delimiter' } ) ) && ( $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here use hyphen-here two hyphen-here spaces hyphen-here as hyphen-here column hyphen-here delimiter' } eq 'yes' ) ) {  <new_line>
    $global_use_two_spaces_as_delimiter = 'yes' ;  <new_line>
} else {  <new_line>
    $global_use_two_spaces_as_delimiter = 'no' ;  <new_line>
}  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_input_line =~ s/[ \n\t]+$// ;  <new_line>
    if ( $global_use_two_spaces_as_delimiter eq 'yes' ) {  <new_line>
        @global_text_item_in_column = split( /<character_space> +/ , $global_input_line ) ;  <new_line>
    } else {  <new_line>
        @global_text_item_in_column = split( /[\t ]/ , $global_input_line ) ;  <new_line>
    }  <new_line>
    $global_number_of_columns = scalar( @global_text_item_in_column ) ;  <new_line>
    if ( $global_number_of_columns < 2 ) {  <new_line>
        next ;  <new_line>
    }  <new_line>
    $global_unique_value = $global_text_item_in_column[ 0 ] ;  <new_line>
    if ( $global_unique_value =~ / / ) {  <new_line>
        $global_unique_value =~ s/ +/_/g ;  <new_line>
    }  <new_line>
    $global_number_of_columns = scalar( @global_text_item_in_column ) ;  <new_line>
    if ( $global_number_of_columns > $global_number_of_column_names ) {  <new_line>
        $global_number_of_columns = $global_number_of_column_names ;  <new_line>
    }  <new_line>
    if ( $global_number_of_columns > 0 ) {  <new_line>
        $global_list_of_unique_values .= ' ' . $global_unique_value ;  <new_line>
        for ( $global_column_pointer = 2 ; $global_column_pointer <= $global_number_of_column_names ; $global_column_pointer ++ ) {  <new_line>
            if ( $global_phrase_naming_convention_for_column[ $global_column_pointer <character_hyphen> 1 ] ne '' ) {  <new_line>
                $global_phrase_naming_convention_for_this_column = $global_prefix_text . '<character_hyphen>' . $global_unique_value . '<character_hyphen>' . $global_phrase_naming_convention_for_column[ $global_column_pointer <character_hyphen> 1 ] ;  <new_line>
            } else {  <new_line>
                $global_phrase_naming_convention_for_this_column = $global_prefix_text . '<character_hyphen>' . $global_unique_value ;  <new_line>
            }  <new_line>
            if ( $global_column_pointer <= $global_number_of_columns ) {  <new_line>
                $global_dashrep_replacement{ $global_phrase_naming_convention_for_this_column } = $global_text_item_in_column[ $global_column_pointer <character_hyphen> 1 ] ;  <new_line>
            } else {  <new_line>
                $global_dashrep_replacement{ $global_phrase_naming_convention_for_this_column } = '' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_list_of_unique_values =~ s/^ +// ;  <new_line>
$global_dashrep_replacement{ $global_name_of_phrase_that_contains_list_of_index_values } = $global_list_of_unique_values ;  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-copy-from-file-to-phrase:
# no-space dashes-long-line  <new_line>

sub function__copy_from_file_to_phrase( ) {  <new_line>
$global_action_name_with_underscores = 'copy_from_file_to_phrase' ; <new_line>
template-check-operand-two-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_all_lines = '' ;  <new_line>
$global_line_ending = '' ;  <new_line>
$global_line_number = 0 ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings' } ) ) ) {  <new_line>
    $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings' } = 'no' ;  <new_line>
}  <new_line>
if ( ( exists( $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings' } ) ) && ( $global_dashrep_replacement{ 'yes hyphen-here or hyphen-here no hyphen-here indicate hyphen-here line hyphen-here endings' } eq 'yes' ) ) {  <new_line>
    $global_line_ending = ' end hyphen-here of hyphen-here line hyphen-here here ' ;  <new_line>
} else {  <new_line>
    $global_line_ending = ' ' ;  <new_line>
}  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_input_line =~ s/[\t\f\n\r]+/ /g ;  <new_line>
    $global_input_line =~ s/^ +/ / ;  <new_line>
    $global_input_line =~ s/ +$/ / ;  <new_line>
    if ( ( $global_input_line ne '' ) || ( $global_line_ending ne ' ' ) ) {  <new_line>
        $global_all_lines .= $global_input_line . $global_line_ending ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_all_lines ;  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-copy-from-phrase-append-to-file:
# no-space dashes-long-line  <new_line>

sub function__copy_from_phrase_append_to_file( ) {  <new_line>
$global_action_name_with_underscores = 'copy_from_phrase_append_to_file' ; <new_line>
template-check-operand-one-is-phrase-name
$global_target_file_name = $global_operand_two ;  <new_line>
template-open-file-for-appending

template-return-if-no-permission-to-append-to-files

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    print OUTFILE $global_dashrep_replacement{ $global_operand_one } . "\n" ;  <new_line>
} else {  <new_line>
    print OUTFILE $global_operand_one . "\n" ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

template-function-segment-ending
----
template-function-copy-initial-caps:
# no-space dashes-long-line  <new_line>

sub function__copy_initial_caps( ) {  <new_line>
$global_action_name_with_underscores = 'copy_initial_caps' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
$global_remaining_text = $global_temp_text ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
if ( $global_remaining_text =~ /^([a<character_hyphen>z])(.*)$/ ) {  <new_line>
    $global_character_to_capitalize = $1 ;  <new_line>
    $global_remaining_text = $2 ;  <new_line>
    $global_accumulated_text .= uc( $global_character_to_capitalize ) ;  <new_line>
}  <new_line>
while ( $global_remaining_text =~ /^(.*?) ([a<character_hyphen>z])(.*)$/ ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_to_capitalize = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= ' ' . uc( $global_character_to_capitalize ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_accumulated_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-listed-words-to-phrases-named-in-pattern:
# no-space dashes-long-line  <new_line>

sub function__copy_listed_words_to_phrases_named_in_pattern( ) {  <new_line>
$global_action_name_with_underscores = 'copy_listed_words_to_phrases_named_in_pattern' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_phrase_name_containing_source_words = $global_operand_one ;  <new_line>
$global_phrase_name_containing_pattern = $global_operand_two ;  <new_line>
$global_phrase_name_containing_parameter_list = '' ;  <new_line>
$global_target_phrase_name = '' ;  <new_line>
if ( ( defined( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } ) ) && ( $global_dashrep_replacement{ $global_phrase_name_containing_pattern } =~ /^([^ ]*)ambee<character_hyphen>([^ ]*)<character_hyphen>amenn([^ ]*)$/ ) ) {  <new_line>
    $global_prefix = $1 ;  <new_line>
    $global_phrase_name_containing_parameter_list = $2 ;  <new_line>
    $global_suffix = $3 ;  <new_line>
} else {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_listed_words_to_phrases_named_in_pattern__case_pattern_invalid ' . $global_phrase_name_containing_pattern ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_prefix =~ s/[ \n]+//g ;  <new_line>
$global_prefix =~ s/^<character_hyphen>+// ;  <new_line>
$global_suffix =~ s/[ \n]+//g ;  <new_line>
$global_suffix =~ s/<character_hyphen>+$// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/[ \n]+//g ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_parameter_list =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_listed_words_to_phrases_named_in_pattern__case_parameter_phrase_empty ' . $global_phrase_name_containing_parameter_list ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_parameter_list } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_listed_words_to_phrases_named_in_pattern__case_parameter_list_empty ' . $global_phrase_name_containing_parameter_list ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_parameter_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_phrase_name_containing_source_words =~ s/[ \n]+//sg ;  <new_line>
$global_phrase_name_containing_source_words =~ s/^<character_hyphen>+// ;  <new_line>
$global_phrase_name_containing_source_words =~ s/<character_hyphen>+$// ;  <new_line>
if ( not( defined( $global_dashrep_replacement{ $global_phrase_name_containing_source_words } ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_listed_words_to_phrases_named_in_pattern__case_parameter_list_empty ' . $global_phrase_name_containing_source_words ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_phrase_name_containing_source_words } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text !~ /[^ ]/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_listed_words_to_phrases_named_in_pattern__case_operand_one_list_empty ' . $global_phrase_name_containing_source_words ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_source_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
if ( $#global_list_of_source_words <= $#global_list_of_parameter_words ) {  <new_line>
    $global_count = $#global_list_of_source_words ;  <new_line>
} else {  <new_line>
    $global_count = $#global_list_of_parameter_words ;  <new_line>
}  <new_line>
for ( $global_pointer = 0 ; $global_pointer <= $global_count ; $global_pointer ++ ) {  <new_line>
    $global_target_phrase_name = $global_prefix . $global_list_of_parameter_words[ $global_pointer ] . $global_suffix ;  <new_line>
    $global_dashrep_replacement{ $global_target_phrase_name } .= $global_list_of_source_words[ $global_pointer ] ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-lowercase-only:
# no-space dashes-long-line  <new_line>

sub function__copy_lowercase_only( ) {  <new_line>
$global_action_name_with_underscores = 'copy_lowercase_only' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = ' ' ;  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = lc( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-copy-uppercase-only:
# no-space dashes-long-line  <new_line>

sub function__copy_uppercase_only( ) {  <new_line>
$global_action_name_with_underscores = 'copy_uppercase_only' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = ' ' ;  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = uc( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-copy-without-extra-spaces:
# no-space dashes-long-line  <new_line>

sub function__copy_without_extra_spaces( ) {  <new_line>
$global_action_name_with_underscores = 'copy_without_extra_spaces' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = ' ' ;  <new_line>
$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
&function__remove_extra_spaces( ) ;  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-copy-word-at-position:
# no-space dashes-long-line  <new_line>
# function__copy_word_at_position  <new_line>
#  <new_line>

sub function__copy_word_at_position( ) {  <new_line>
$global_action_name_with_underscores = 'copy_word_at_position' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer

$global_action_result = '' ;  <new_line>

$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_pointer_text = $global_operand_three ;  <new_line>

$global_default_text = '' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_word_pointer_numeric = &function_parameterized__convert_numeric_text_into_numeric_value( $global_word_pointer_text ) ;  <new_line>

if ( $global_number_of_words < $global_word_pointer_numeric ) {  <new_line>
$global_word_pointer_numeric = $global_number_of_words ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = runtime-code-word-within-source-text ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-found-in-both-lists:
# no-space dashes-long-line  <new_line>

sub function__copy_words_found_in_both_lists( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_found_in_both_lists' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name


# todo: rewrite this code to use new functions: point_to_words_in_operand_one and point_to_words_in_operand_two  <new_line>
# also use: $global_yes_found_word{ }  <new_line>

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_two } ) ) {  <new_line>
    $global_text_list_key = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
} else {  <new_line>
    $global_text_list_key = '' ;  <new_line>
}  <new_line>
$global_destination_phrase = $global_operand_three ;  <new_line>

$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( ( exists( $global_listed_word{ $global_word } ) ) && ( $global_occurrence_count_for_word{ $global_word } == 1 ) ) {  <new_line>
            $global_result_word_list .= $global_word . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-found-in-either-list:
# no-space dashes-long-line  <new_line>

sub function__copy_words_found_in_either_list( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_found_in_either_list' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_text_list_key = $global_dashrep_replacement{ $global_operand_one } . ' ' . $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_text_list_key ne '' ) {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
    %global_listed_word = ( ) ;  <new_line>
    foreach $global_word ( @global_list_of_key_values ) {  <new_line>
        $global_listed_word{ $global_word } = 'exists' ;  <new_line>
    }  <new_line>
    foreach $global_word ( keys( %global_listed_word ) ) {  <new_line>
        $global_result_word_list .= $global_word . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_result_word_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-found-only-in-first-list:
# no-space dashes-long-line  <new_line>

sub function__copy_words_found_only_in_first_list( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_found_only_in_first_list' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_two } ) ) {  <new_line>
    $global_text_list_key = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
} else {  <new_line>
    $global_text_list_key = '' ;  <new_line>
}  <new_line>

$global_destination_phrase = $global_operand_three ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( not( exists( $global_listed_word{ $global_word } ) ) ) {  <new_line>
            $global_result_word_list .= $global_word . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-from-position-to-position:
# no-space dashes-long-line  <new_line>

sub function__copy_words_from_position_to_position( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_from_position_to_position' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer
template-check-operand-four-is-positive-integer

$global_action_result = '' ;  <new_line>
$global_word_number_begin = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
$global_word_number_end = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_four ) ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_temp_text =~ s/\n/ /sg ;  <new_line>
    $global_temp_text =~ s/^ +// ;  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
    @global_list = split( / +/ , $global_temp_text ) ;  <new_line>
} else  <new_line>
{  <new_line>
    @global_list = ( ) ;  <new_line>
}  <new_line>
$global_word_count = $#global_list + 1 ;  <new_line>
if ( $global_word_number_end > $global_word_count ) {  <new_line>
    $global_word_number_end = $global_word_count ;  <new_line>
}  <new_line>
if ( ( $global_word_count < 1 ) || ( $global_word_number_begin < 1 ) || ( $global_word_number_end < 1 ) || ( $global_word_number_begin > $global_word_count ) || ( $global_word_number_end < $global_word_number_begin ) ) {  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_result_text = '' ;  <new_line>
    $global_separator = '' ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
    for ( $global_word_number = $global_word_number_begin ; $global_word_number <= $global_word_number_end ; $global_word_number ++ ) {  <new_line>
        $global_result_text .= $global_separator . $global_list[ $global_word_number - 1 ] ;  <new_line>
        $global_separator = ' ' ;  <new_line>
    }  <new_line>
    $global_result_text =~ s/ +$// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_result_text ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-words-offset-skip:
# no-space dashes-long-line  <new_line>

# todo: write this code , use new function that points to words in operand one <new_line>

sub function__copy_words_offset_skip( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_offset_skip' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer
template-check-operand-four-is-positive-integer

code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = '' ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-order-reversed:
# no-space dashes-long-line  <new_line>

sub function__copy_words_order_reversed( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_order_reversed' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_temp_text =~ s/\n/ /sg ;  <new_line>
    $global_temp_text =~ s/^ +// ;  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
    @global_list = split( / +/ , $global_temp_text ) ;  <new_line>
} else {  <new_line>
    @global_list = ( ) ;  <new_line>
}  <new_line>
$global_count = $#global_list + 1 ;  <new_line>
$global_temp_text = '' ;  <new_line>
if ( $global_count > 0 ) {  <new_line>
    for ( $global_word_number = $global_count ; $global_word_number >= 1 ; $global_word_number <character_hyphen><character_hyphen> ) {  <new_line>
        $global_temp_text .= $global_list[ $global_word_number - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_temp_text =~ s/ +$// ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_temp_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-rearrange-using-order-sort-alphabetic:
# no-space dashes-long-line  <new_line>

sub function__copy_words_rearrange_using_order_sort_alphabetic( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_rearrange_using_order_sort_alphabetic' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_operand_one =~ s/\n/ /g ;  <new_line>

if ( ( $global_operand_one !~ /^[^ ]+$/ ) || ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) || ( not( defined( $global_dashrep_replacement{ $global_operand_one } ) ) ) ) {  <new_line>
} else {  <new_line>

    $global_source_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_source_text =~ s/\n/ /sg ;  <new_line>
    $global_source_text =~ s/^ +// ;  <new_line>
    $global_source_text =~ s/ +$// ;  <new_line>
    if ( $global_source_text =~ / / ) {  <new_line>
        @global_list_of_words = split( / +/ , $global_source_text ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_words = ( ) ;  <new_line>
        $global_list_of_words[ 0 ] = $global_source_text ;  <new_line>
    }  <new_line>
    $global_list_indicating_sort_order_text_string = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/\n/ /s ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/^ +// ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/ +$// ;  <new_line>
    @global_list_indicating_sort_order = split( / +/ , $global_list_indicating_sort_order_text_string ) ;  <new_line>
    @global_sort_order = sort( @global_list_indicating_sort_order ) ;  <new_line>
    $global_extra_words_without_sort_value = '' ;  <new_line>
    if ( $#global_list_indicating_sort_order < $#global_list_of_words ) {  <new_line>
        for ( $global_word_position = ( $#global_list_indicating_sort_order + 2 ) ; $global_word_position <= ( $#global_list_of_words + 1 ) ; $global_word_position ++ ) {  <new_line>
            $global_extra_words_without_sort_value .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
    %global_words_at_numeric_value = ( ) ;  <new_line>
    for ( $global_word_position = 1 ; $global_word_position <= ( $#global_list_indicating_sort_order + 1 ) ; $global_word_position ++ ) {  <new_line>
        $global_numeric_value = $global_list_indicating_sort_order[ $global_word_position - 1 ] ;  <new_line>
        $global_words_at_numeric_value{ $global_numeric_value } .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_text_string = '' ;  <new_line>
    foreach $global_numeric_value ( @global_sort_order ) {  <new_line>
        if ( $global_words_at_numeric_value{ $global_numeric_value } =~ /[^ ]/ ) {  <new_line>
            $global_text_string .= $global_words_at_numeric_value{ $global_numeric_value } . ' ' ;  <new_line>
            $global_words_at_numeric_value{ $global_numeric_value } = '' ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_text_string .= ' ' . $global_extra_words_without_sort_value ;  <new_line>
    $global_text_string =~ s/ +/ /g ;  <new_line>
    $global_text_string =~ s/ $// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_text_string ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-words-rearrange-using-order-sort-numeric:
# no-space dashes-long-line  <new_line>

sub function__copy_words_rearrange_using_order_sort_numeric( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_rearrange_using_order_sort_numeric' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>

if ( $global_dashrep_replacement{ $global_operand_three } =~ /[^0<character_hyphen>9\.\<character_hyphen> ]/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__copy_words_rearrange_using_order_sort_numeric' ;  <new_line>
    return ;  <new_line>
}  <new_line>

$global_operand_one =~ s/\n/ /g ;  <new_line>

if ( ( $global_operand_one !~ /^[^ ]+$/ ) || ( not( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) || ( not( defined( $global_dashrep_replacement{ $global_operand_one } ) ) ) ) {  <new_line>
} else {  <new_line>

    $global_source_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_source_text =~ s/\n/ /sg ;  <new_line>
    $global_source_text =~ s/^ +// ;  <new_line>
    $global_source_text =~ s/ +$// ;  <new_line>
    if ( $global_source_text =~ / / ) {  <new_line>
        @global_list_of_words = split( / +/ , $global_source_text ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_words = ( ) ;  <new_line>
        $global_list_of_words[ 0 ] = $global_source_text ;  <new_line>
    }  <new_line>
    $global_list_indicating_sort_order_text_string = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/\n/ /s ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/^ +// ;  <new_line>
    $global_list_indicating_sort_order_text_string =~ s/ +$// ;  <new_line>
    @global_list_indicating_sort_order = split( / +/ , $global_list_indicating_sort_order_text_string ) ;  <new_line>
    @global_sort_order = sort { $a <=> $b } @global_list_indicating_sort_order ;  <new_line>
    $global_extra_words_without_sort_value = '' ;  <new_line>
    if ( $#global_list_indicating_sort_order < $#global_list_of_words ) {  <new_line>
        for ( $global_word_position = ( $#global_list_indicating_sort_order + 2 ) ; $global_word_position <= ( $#global_list_of_words + 1 ) ; $global_word_position ++ ) {  <new_line>
            $global_extra_words_without_sort_value .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
    %global_words_at_numeric_value = ( ) ;  <new_line>
    for ( $global_word_position = 1 ; $global_word_position <= ( $#global_list_indicating_sort_order + 1 ) ; $global_word_position ++ ) {  <new_line>
        $global_numeric_value = $global_list_indicating_sort_order[ $global_word_position - 1 ] ;  <new_line>
        $global_words_at_numeric_value{ $global_numeric_value } .= $global_list_of_words[ $global_word_position - 1 ] . ' ' ;  <new_line>
    }  <new_line>
    $global_text_string = '' ;  <new_line>
    foreach $global_numeric_value ( @global_sort_order ) {  <new_line>
        if ( $global_words_at_numeric_value{ $global_numeric_value } =~ /[^ ]/ ) {  <new_line>
            $global_text_string .= $global_words_at_numeric_value{ $global_numeric_value } . ' ' ;  <new_line>
            $global_words_at_numeric_value{ $global_numeric_value } = '' ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_text_string .= ' ' . $global_extra_words_without_sort_value ;  <new_line>
    $global_text_string =~ s/ +/ /g ;  <new_line>
    $global_text_string =~ s/ $// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_text_string ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-copy-words-sort-alphabetic:
# no-space dashes-long-line  <new_line>

sub function__copy_words_sort_alphabetic( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_sort_alphabetic' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
@global_list_of_sorted_numbers = sort( @global_list ) ;  <new_line>
$global_temp_text = join( ' ' , @global_list_of_sorted_numbers ) ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_temp_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-sort-numeric:
# no-space dashes-long-line  <new_line>

sub function__copy_words_sort_numeric( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_sort_numeric' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_phrase_name = $global_operand_one ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
if ( not( exists( $global_dashrep_replacement{ $global_source_phrase_name } ) ) ) {  <new_line>
    $global_dashrep_replacement{ $global_source_phrase_name } = '' ;  <new_line>
}  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_source_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
@global_list_of_sorted_numbers = sort { $a <=> $b } @global_list ;  <new_line>
$global_temp_text = join( ' ' , @global_list_of_sorted_numbers ) ;  <new_line>
$global_dashrep_replacement{ $global_target_phrase_name } = $global_temp_text ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-that-begin-with-listed-words:
# no-space dashes-long-line  <new_line>

sub function__copy_words_that_begin_with_listed_words( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_that_begin_with_listed_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_words_to_check = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_strings_to_match = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word_to_check ( @global_list_of_words_to_check ) {  <new_line>
    foreach $global_string_to_match ( @global_list_of_strings_to_match ) {  <new_line>
        $global_pointer_to_matching_text = index( $global_word_to_check , $global_string_to_match ) ;  <new_line>
        if ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            if ( $global_pointer_to_matching_text == 0 ) {  <new_line>
                $global_generated_list .= $global_word_to_check . ' ' ;  <new_line>
                last ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-that-begin-with-text:
# no-space dashes-long-line  <new_line>

sub function__copy_words_that_begin_with_text( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_that_begin_with_text' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_list_of_words_as_text = '' ;  <new_line>
}  <new_line>

$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
    @global_list_of_words = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
} elsif ( $global_list_of_words_as_text eq '' ) {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
}  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_length_of_string = length( $global_string_to_search ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word ( @global_list_of_words ) {  <new_line>
    if ( substr( $global_word , 0 , $global_length_of_string ) eq $global_string_to_search ) {  <new_line>
        $global_generated_list .= $global_word . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-that-contain-listed-words:
# no-space dashes-long-line  <new_line>

sub function__copy_words_that_contain_listed_words( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_that_contain_listed_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_words_to_check = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_list_of_words_as_text =~ s/\n/ /sg ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$// ;  <new_line>
@global_list_of_strings_to_match = split( / +/ , $global_list_of_words_as_text ) ;  <new_line>
$global_generated_list = '' ;  <new_line>
foreach $global_word_to_check ( @global_list_of_words_to_check ) {  <new_line>
    foreach $global_string_to_match ( @global_list_of_strings_to_match ) {  <new_line>
        $global_pointer_to_matching_text = index( $global_word_to_check , $global_string_to_match ) ;  <new_line>
        if ( $global_pointer_to_matching_text >= 0 ) {  <new_line>
            $global_generated_list .= $global_word_to_check . ' ' ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_generated_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_generated_list ;  <new_line>

template-function-segment-ending
----
template-function-copy-words-unique-only:
# no-space dashes-long-line  <new_line>

sub function__copy_words_unique_only( ) {  <new_line>
$global_action_name_with_underscores = 'copy_words_unique_only' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>

if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_text_list_loop = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
} else {  <new_line>
    $global_text_list_loop = '' ;  <new_line>
}  <new_line>

$global_text_list_key = '' ;  <new_line>
$global_destination_phrase = $global_operand_two ;  <new_line>
$global_text_list_key =~ s/\n/ /sg ;  <new_line>
$global_text_list_key =~ s/^ +// ;  <new_line>
$global_text_list_key =~ s/ +$// ;  <new_line>
if ( $global_text_list_key eq '' ) {  <new_line>
    @global_list_of_key_values = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_key_values = split( / +/ , $global_text_list_key ) ;  <new_line>
}  <new_line>
%global_listed_word = ( ) ;  <new_line>
foreach $global_word ( @global_list_of_key_values ) {  <new_line>
    $global_listed_word{ $global_word } = 1 ;  <new_line>
}  <new_line>
$global_text_list_loop =~ s/\n/ /sg ;  <new_line>
$global_text_list_loop =~ s/^ +// ;  <new_line>
$global_text_list_loop =~ s/ +$// ;  <new_line>
if ( $global_text_list_loop eq '' ) {  <new_line>
    @global_list_of_loop_words = ( ) ;  <new_line>
} else {  <new_line>
    @global_list_of_loop_words = split( / +/ , $global_text_list_loop ) ;  <new_line>
}  <new_line>
$global_length_of_loop_list = $#global_list_of_loop_words + 1 ;  <new_line>
%global_occurrence_count_for_word = ( ) ;  <new_line>
$global_number_of_unique_words = 0 ;  <new_line>
@global_unique_word_at_position = ( ) ;  <new_line>
$global_unique_word_at_position[ 0 ] = '' ;  <new_line>
$global_text_list_of_unique_word_pointers = '' ;  <new_line>
$global_result_word_list = '' ;  <new_line>
if ( $global_length_of_loop_list > 0 ) {  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_length_of_loop_list ; $global_pointer ++ ) {  <new_line>
        $global_word = $global_list_of_loop_words[ $global_pointer - 1 ] ;  <new_line>
        $global_occurrence_count_for_word{ $global_word } ++ ;  <new_line>
        if ( not( exists( $global_listed_word{ $global_word } ) ) ) {  <new_line>
            if ( $global_occurrence_count_for_word{ $global_word } == 1 ) {  <new_line>
                $global_result_word_list .= $global_word . ' ' ;  <new_line>
                $global_number_of_unique_words ++ ;  <new_line>
                $global_unique_word_at_position[ $global_number_of_unique_words ] = $global_word ;  <new_line>
                $global_text_list_of_unique_word_pointers .= $global_pointer . ' ' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_text_list_of_unique_word_pointers =~ s/ +$// ;  <new_line>
$global_result_word_list =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_destination_phrase } = $global_result_word_list ;  <new_line>
$global_text_list_of_unique_word_counts = '' ;  <new_line>
for ( $global_pointer = 1 ; $global_pointer <= $global_number_of_unique_words ; $global_pointer ++ ) {  <new_line>
    if ( $global_pointer > 1 ) {  <new_line>
        $global_text_list_of_unique_word_counts .= ' ' ;  <new_line>
    }  <new_line>
    $global_text_list_of_unique_word_counts .= sprintf( "%d" , $global_occurrence_count_for_word{ $global_unique_word_at_position[ $global_pointer ] } ) ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>unique<character_hyphen>word<character_hyphen>counts' } = $global_text_list_of_unique_word_counts ;  <new_line>
$global_dashrep_replacement{ 'list<character_hyphen>of<character_hyphen>pointers<character_hyphen>to<character_hyphen>unique<character_hyphen>words' } = $global_text_list_of_unique_word_pointers ;  <new_line>

template-function-segment-ending
----
template-function-copy-zero-pad-left-to-length:
# no-space dashes-long-line  <new_line>

sub function__copy_zero_pad_left_to_length( ) {  <new_line>
$global_action_name_with_underscores = 'copy_zero_pad_left_to_length' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-positive-integer

$global_action_result = ' ' ;  <new_line>
$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>
$global_count_number = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
$global_counter = $global_count_number - length( $global_source_text ) ;  <new_line>
$global_text_to_insert = '' ;  <new_line>
while ( ( $global_counter > 0 ) && ( $global_counter < 99 ) ) {  <new_line>
    $global_text_to_insert .= '0' ;  <new_line>
    $global_counter -- ;  <new_line>
}  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_text_to_insert . $global_source_text ;
return '' ;  <new_line>

template-function-segment-ending
----
template-function-create-empty-sub-folder:
# no-space dashes-long-line  <new_line>

sub function__create_empty_sub_folder( ) {  <new_line>
$global_action_name_with_underscores = 'create-empty-sub-folder' ; <new_line>

template-return-if-no-permission-to-delete-overwrite-files

$global_action_result = '' ;  <new_line>
$global_target_path_prefix = $global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' } ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__create_empty_sub_folder__invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( $global_target_path_prefix =~ /([\/\\])/ ) {  <new_line>
    $global_slash_or_backslash_for_path = $1 ;  <new_line>
} else {  <new_line>
    $global_slash_or_backslash_for_path = '/' ;  <new_line>
}  <new_line>
$global_target_sub_folder = $global_target_path_prefix . $global_operand_one . $global_slash_or_backslash_for_path ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path( $global_target_sub_folder ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__create_empty_sub_folder__invalid_full_path' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( <character_hyphen>d $global_target_sub_folder ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__create_empty_sub_folder__case_sub_folder_already_exists' ;  <new_line>
} else {  <new_line>
    umask( 0077 ) ;  <new_line>
    if ( mkdir( $global_target_sub_folder ) ) {  <new_line>
    } else {  <new_line>
        $global_action_result = 'dashrep_compiled_runtime_error__create_empty_sub_folder__case_creating_sub_folder_not_successful' ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-decode-from-cgi-parameter:
# no-space dashes-long-line  <new_line>

sub function__decode_from_cgi_parameter( ) {  <new_line>
$global_action_name_with_underscores = 'decode_from_cgi_parameter' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/\+/ /sg ;  <new_line>
$global_remaining_text = $global_text_being_edited ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
while ( $global_remaining_text =~ /^(.*?)\%([0<character_hyphen>9a hyphen-here fA hyphen-here F][0<character_hyphen>9a hyphen-here fA hyphen-here F])(.*)$/s ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_code_to_decode = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= chr( hex( $global_character_code_to_decode ) ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_accumulated_text =~ s/\+/ /sg ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_accumulated_text ;  <new_line>

template-function-segment-ending
----
template-function-delete-file:
# no-space dashes-long-line  <new_line>

sub function__delete_file( ) {  <new_line>
$global_action_name_with_underscores = 'delete_file' ; <new_line>
template-return-if-no-permission-to-delete-overwrite-files
template-check-operand-one-is-file-name

$global_target_file_name = $global_operand_one ;  <new_line>
$global_action_result = '' ;  <new_line>
$global_target_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__delete_file__case_invalid_path_prefix ' . $global_target_path_prefix ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_target_file_name ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__delete_file__case_invalid_file_name ' . $global_target_file_name ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_target_file_name ;  <new_line>

unlink $global_target_file_full_path ;  <new_line>

$global_action_result = 'trace_diagnostic__deleted_file ' . $global_target_file_full_path ;  <new_line>

template-function-segment-ending
----
template-function-delete-listed-phrases:
# no-space dashes-long-line  <new_line>

sub function__delete_listed_phrases( ) {  <new_line>
$global_action_name_with_underscores = 'delete_listed_phrases' ; <new_line>

template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
if ( not ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
@global_list_of_phrase_names = split( / +/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
foreach $global_phrase_name_to_clear ( @global_list_of_phrase_names ) {  <new_line>
    if ( exists( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ) {  <new_line>
        delete( $global_dashrep_replacement{ $global_phrase_name_to_clear } ) ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-encode-as-cgi-parameter:
# no-space dashes-long-line  <new_line>

sub function__encode_as_cgi_parameter( ) {  <new_line>
$global_action_name_with_underscores = 'encode_as_cgi_parameter' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_text_being_edited =~ s/\n/ /sg ;  <new_line>
$global_text_being_edited =~ s/ /\+/g ;  <new_line>
$global_remaining_text = $global_text_being_edited ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
while ( $global_remaining_text =~ /^(.*?)([^a hyphen-here zA hyphen-here Z0<character_hyphen>9])(.*)$/s ) {  <new_line>
    $global_accumulated_text .= $1 ;  <new_line>
    $global_character_to_replace = $2 ;  <new_line>
    $global_remaining_text = $3 ;  <new_line>
    $global_accumulated_text .= '%' . sprintf( "%02x" , ord( $global_character_to_replace ) ) ;  <new_line>
}  <new_line>
$global_accumulated_text .= $global_remaining_text ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_accumulated_text ;  <new_line>

template-function-segment-ending
----
template-function-find-line-in-file-that-begins-with-text:
# no-space dashes-long-line  <new_line>

sub function__find_line_in_file_that_begins_with_text( ) {  <new_line>
$global_action_name_with_underscores = 'find_line_in_file_that_begins_with_text' ; <new_line>
template-check-operand-two-is-phrase-not-empty
template-check-operand-three-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_list_of_storage_names = "" ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_length_of_string = length( $global_string_to_find ) ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_string ) ;  <new_line>
    if ( $global_possible_match eq $global_string_to_find ) {  <new_line>
        $global_dashrep_replacement{ $global_operand_three } = $global_input_line ;  <new_line>
        last ;  <new_line>
    }  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-find-lines-in-file-that-begin-with-any-listed-word:
# no-space dashes-long-line  <new_line>

sub function__find_lines_in_file_that_begin_with_any_listed_word( ) {  <new_line>
$global_action_name_with_underscores = 'find_lines_in_file_that_begin_with_any_listed_word' ; <new_line>
template-check-operand-two-is-phrase-not-empty
template-check-operand-three-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_list_of_storage_names = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$//s ;  <new_line>
if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
    @global_list_of_words = split( /[ \n\r]+/ , $global_list_of_words_as_text ) ;  <new_line>
} else {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
}  <new_line>
foreach $global_word ( @global_list_of_words ) {  <new_line>
    $global_matching_text{ $global_word } = 'match' ;  <new_line>
}  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_length_of_first_word = index( $global_input_line , ' ' ) ;  <new_line>
    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_first_word ) ;  <new_line>
    if ( ( exists( $global_matching_text{ $global_possible_match } ) ) && ( $global_matching_text{ $global_possible_match } eq 'match' ) ) {  <new_line>
        $global_storage_name = 'dashrep hyphen-here storage<character_hyphen>' . sprintf( "%d" , $global_storage_number ) ;  <new_line>
        $global_storage_number ++ ;  <new_line>
        $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
        $global_list_of_storage_names .= $global_storage_name . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_list_of_storage_names =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_list_of_storage_names ;  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-find-lines-in-file-that-begin-with-any-two-words-listed:
# no-space dashes-long-line  <new_line>

sub function__find_lines_in_file_that_begin_with_any_two_words_listed( ) {  <new_line>
$global_action_name_with_underscores = 'find_lines_in_file_that_begin_with_any_two_words_listed' ; <new_line>
template-check-operand-two-is-phrase-not-empty
template-check-operand-three-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_list_of_storage_names = '' ;  <new_line>
$global_list_of_words_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_words_as_text =~ s/^ +// ;  <new_line>
$global_list_of_words_as_text =~ s/ +$//s ;  <new_line>
if ( $global_list_of_words_as_text =~ / / ) {  <new_line>
    @global_list_of_words = split( /[ \n\r]+/ , $global_list_of_words_as_text ) ;  <new_line>
} else {  <new_line>
    @global_list_of_words = ( ) ;  <new_line>
    $global_list_of_words[ 0 ] = $global_list_of_words_as_text ;  <new_line>
}  <new_line>
foreach $global_word ( @global_list_of_words ) {  <new_line>
    $global_matching_text{ $global_word } = 'match' ;  <new_line>
}  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_length_of_first_word = index( $global_input_line , ' ' ) ;  <new_line>
    $global_possible_match = substr( $global_input_line , 0 , $global_length_of_first_word ) ;  <new_line>
    if ( ( exists( $global_matching_text{ $global_possible_match } ) ) && ( $global_matching_text{ $global_possible_match } eq 'match' ) ) {  <new_line>
        if ( $global_input_line =~ /^[^ ]+ +([^ ]+)(( )|($))/ ) {  <new_line>
            $global_second_word = $1 ;  <new_line>
            if ( ( exists( $global_matching_text{ $global_second_word } ) ) && ( $global_matching_text{ $global_second_word } eq 'match' ) ) {  <new_line>
                $global_storage_name = 'dashrep hyphen-here storage<character_hyphen>' . sprintf( "%d" , $global_storage_number ) ;  <new_line>
                $global_storage_number ++ ;  <new_line>
                if ( $global_list_of_storage_names eq '' ) {  <new_line>
                    $global_list_of_storage_names = $global_storage_name . ' ' ;  <new_line>
                } else {  <new_line>
                    $global_list_of_storage_names .= $global_storage_name . ' ' ;  <new_line>
                }  <new_line>
                $global_dashrep_replacement{ $global_storage_name } = $global_input_line ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_list_of_storage_names =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_list_of_storage_names ;  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-gather-from-tagged-file-one-entry:
# no-space dashes-long-line  <new_line>

sub function__gather_from_tagged_file_one_entry( ) {  <new_line>
$global_action_name_with_underscores = 'gather_from_tagged_file_one_entry' ; <new_line>
template-check-operand-two-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_accumulated_matching_entry_info = '' ;  <new_line>
$global_entry_begin = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here begin' } ;  <new_line>
if ( $global_entry_begin !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_begin = 'entry_begin' ;  <new_line>
}  <new_line>
$global_entry_end = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here end' } ;  <new_line>
if ( $global_entry_end !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_end = 'entry_end' ;  <new_line>
}  <new_line>
$global_entry_unique = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here unique' } ;  <new_line>
if ( $global_entry_unique !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_unique = 'url' ;  <new_line>
}  <new_line>
$global_entry_delete = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here delete' } ;  <new_line>
if ( $global_entry_delete !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_delete = 'delete_id' ;  <new_line>
}  <new_line>
$global_entry_matching_id = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here matching hyphen-here id' } ;  <new_line>
if ( $global_entry_matching_id !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_matching_id = '1' ;  <new_line>
}  <new_line>
$global_possible_matching_entry_info = '' ;  <new_line>
$global_unique_value = '' ;  <new_line>
$global_list_of_tag_values_in_sequence_encountered = '' ;  <new_line>
%global_content_for_tag = ( ) ;  <new_line>
%global_found_unique_value = ( ) ;  <new_line>
%global_exists_tag_name = ( ) ;  <new_line>
$global_line_status = 'between' ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_pointer = index( $global_input_line , "\r" ) ;  <new_line>
    if ( $global_pointer >= 0 ) {  <new_line>
        $global_input_line =~ s/[\r\n]+//gs ;  <new_line>
    }  <new_line>
    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
        $global_first_word = $1 ;  <new_line>
        if ( $global_first_word eq $global_entry_begin ) {  <new_line>
            $global_line_status = 'within' ;  <new_line>
            $global_possible_matching_entry_info = '' ;  <new_line>
        } elsif ( $global_first_word eq $global_entry_end ) {  <new_line>
            if ( $global_line_status eq 'within hyphen-here matching' ) {  <new_line>
                $global_accumulated_matching_entry_info .= $global_possible_matching_entry_info ;  <new_line>
            }  <new_line>
            $global_possible_matching_entry_info = '' ;  <new_line>
            $global_line_status = 'between' ;  <new_line>
        } elsif ( ( $global_line_status eq 'within' ) || ( $global_line_status eq 'within hyphen-here matching' ) ) {  <new_line>
            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
        }  <new_line>
    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ \t\n\r]+) *$/ ) {  <new_line>
        $global_first_word = $1 ;  <new_line>
        $global_second_word = $2 ;  <new_line>
        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                $global_line_status = 'within hyphen-here matching' ;  <new_line>
                $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
            } else {  <new_line>
                $global_line_status = 'within hyphen-here not hyphen-here matching' ;  <new_line>
                $global_possible_matching_entry_info = '' ;  <new_line>
            }  <new_line>
        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
            if ( $global_second_word eq $global_entry_matching_id ) {  <new_line>
                $global_accumulated_matching_entry_info = '' ;  <new_line>
            } else {  <new_line>
                $global_possible_matching_entry_info = '' ;  <new_line>
                $global_line_status = 'between' ;  <new_line>
            }  <new_line>
        } elsif ( ( $global_line_status eq 'within' ) || ( $global_line_status eq 'within hyphen-here matching' ) ) {  <new_line>
            $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
        }  <new_line>
    } elsif ( ( $global_line_status eq 'within' ) || ( $global_line_status eq 'within hyphen-here matching' ) ) {  <new_line>
        $global_possible_matching_entry_info .= $global_input_line . "\n" ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_two } = $global_accumulated_matching_entry_info ;  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-gather-tagged-info-from-file:
# no-space dashes-long-line  <new_line>

sub function__gather_tagged_info_from_file( ) {  <new_line>
$global_action_name_with_underscores = 'gather_tagged_info_from_file' ; <new_line>
template-check-operand-two-is-phrase-name
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>
$global_entry_begin = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here begin' } ;  <new_line>
if ( $global_entry_begin !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_begin = 'entry_begin' ;  <new_line>
}  <new_line>
$global_entry_end = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here end' } ;  <new_line>
if ( $global_entry_end !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_end = 'entry_end' ;  <new_line>
}  <new_line>
$global_entry_unique = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here unique' } ;  <new_line>
if ( $global_entry_unique !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_unique = 'url' ;  <new_line>
}  <new_line>
$global_entry_delete = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here delete' } ;  <new_line>
if ( $global_entry_delete !~ /^[^ ]+$/ ) {  <new_line>
    $global_entry_delete = 'delete_id' ;  <new_line>
}  <new_line>
$global_unique_value = '' ;  <new_line>
$global_list_of_tag_values_in_sequence_encountered = '' ;  <new_line>
%global_content_for_tag = ( ) ;  <new_line>
%global_found_unique_value = ( ) ;  <new_line>
%global_exists_tag_name = ( ) ;  <new_line>
$global_line_status = 'between' ;  <new_line>
$global_count_of_items_with_missing_unique_id = 0 ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_pointer = index( $global_input_line , "\r" ) ;  <new_line>
    if ( $global_pointer >= 0 ) {  <new_line>
        $global_input_line =~ s/[\r\n]+//gs ;  <new_line>
    }  <new_line>
    if ( $global_input_line =~ /^ *([^ ]+) *$/ ) {  <new_line>
        $global_first_word = $1 ;  <new_line>
        if ( $global_first_word eq 'multi_line_end' ) {  <new_line>
            $global_line_status = 'within' ;  <new_line>
        } elsif ( ( $global_first_word eq $global_entry_end ) || ( $global_first_word eq $global_entry_begin ) ) {  <new_line>
            if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
                foreach $global_tag_name ( keys( %global_content_for_tag ) ) {  <new_line>
                    $global_dashrep_replacement{ $global_tag_name . '<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>' . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
                }  <new_line>
            } elsif ( $global_first_word eq $global_entry_end ) {  <new_line>
                $global_count_of_items_with_missing_unique_id ++ ;  <new_line>
            }  <new_line>
            $global_unique_value = '' ;  <new_line>
            %global_content_for_tag = ( ) ;  <new_line>
            if ( $global_first_word eq $global_entry_begin ) {  <new_line>
                $global_line_status = 'within' ;  <new_line>
            } else {  <new_line>
                $global_line_status = 'between' ;  <new_line>
            }  <new_line>
        } elsif ( $global_line_status eq 'within_multiline' ) {  <new_line>
            $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . ' ' ;  <new_line>
        } else {  <new_line>
            $global_content_for_tag{ $global_first_word } = '' ;  <new_line>
        }  <new_line>
    } elsif ( $global_line_status eq 'within_multiline' ) {  <new_line>
        $global_content_for_tag{ $global_multiline_value_name } .= $global_input_line . ' ' ;  <new_line>
    } elsif ( $global_input_line =~ /^ *([^ ]+) +([^ ].*)$/ ) {  <new_line>
        $global_first_word = $1 ;  <new_line>
        $global_remainder_of_line = $2 ;  <new_line>
        if ( $global_first_word eq $global_entry_unique ) {  <new_line>
            $global_unique_value = $global_remainder_of_line ;  <new_line>
            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
            if ( not( exists( $global_found_unique_value{ $global_unique_value } ) ) ) {  <new_line>
                $global_found_unique_value{ $global_unique_value } = 'found' ;  <new_line>
            }  <new_line>
        } elsif ( $global_first_word eq $global_entry_delete ) {  <new_line>
            $global_unique_value = $global_remainder_of_line ;  <new_line>
            $global_unique_value =~ s/[ \n\r]+/_/g ;  <new_line>
            $global_found_unique_value{ $global_unique_value } = 'delete' ;  <new_line>
        } elsif ( $global_remainder_of_line =~ /^ *multi_line_begin/ ) {  <new_line>
            $global_line_status = 'within_multiline' ;  <new_line>
            $global_multiline_value_name = $global_first_word ;  <new_line>
            $global_content_for_tag{ $global_multiline_value_name } = '' ;  <new_line>
        } else {  <new_line>
            $global_content_for_tag{ $global_first_word } = $global_remainder_of_line ;  <new_line>
            if ( not( exists( $global_exists_tag_name{ $global_first_word } ) ) ) {  <new_line>
                $global_exists_tag_name{ $global_first_word } = 'yes' ;  <new_line>
                if ( $global_list_of_tag_values_in_sequence_encountered eq '' ) {  <new_line>
                    $global_list_of_tag_values_in_sequence_encountered = $global_entry_unique . ' ' ;  <new_line>
                } else {  <new_line>
                    $global_list_of_tag_values_in_sequence_encountered .= ' ' ;  <new_line>
                }  <new_line>
                $global_list_of_tag_values_in_sequence_encountered .= $global_first_word ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    if ( $global_unique_value =~ /^[^ ]+$/ ) {  <new_line>
        foreach $global_tag_name ( keys( %global_content_for_tag ) ) {  <new_line>
            $global_dashrep_replacement{ $global_tag_name . '<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>' . $global_unique_value } = $global_content_for_tag{ $global_tag_name } ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_list_of_unique_values = '' ;  <new_line>
    foreach $global_unique_value ( keys( %global_found_unique_value ) ) {  <new_line>
        if ( $global_found_unique_value{ $global_unique_value } ne 'delete' ) {  <new_line>
            if ( $global_list_of_unique_values ne '' ) {  <new_line>
                $global_list_of_unique_values .= ' ' ;  <new_line>
            }  <new_line>
            $global_list_of_unique_values .= $global_unique_value ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_operand_two } = $global_list_of_unique_values ;  <new_line>
    $global_list_of_tag_names = '' ;  <new_line>
    foreach $global_tag_name ( keys( %global_exists_tag_name ) ) {  <new_line>
        if ( $global_list_of_tag_names ne '' ) {  <new_line>
            $global_list_of_tag_names .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_tag_names .= $global_tag_name ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ 'dashrep hyphen-here gathered hyphen-here tag hyphen-here names' } = $global_list_of_tag_names ;  <new_line>
    $global_dashrep_replacement{ 'dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence' } = $global_list_of_tag_values_in_sequence_encountered ;  <new_line>
}  <new_line>
if ( $global_count_of_items_with_missing_unique_id > 0 ) {  <new_line>
    $global_action_result = 'dashrep_runtime_error__gather_tagged_info_from_file__case_missing_unique_values ' . $global_count_of_items_with_missing_unique_id . "\n" ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-generate-counts-from-integer-to-integer:
# no-space dashes-long-line  <new_line>
# function__generate_counts_from_integer_to_integer  <new_line>
#  <new_line>

sub function__generate_counts_from_integer_to_integer( ) {  <new_line>
$global_action_name_with_underscores = 'generate_counts_from_integer_to_integer' ; <new_line>
template-check-operand-one-is-integer
template-check-operand-two-is-integer
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>

$global_numeric_value_first = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ;  <new_line>
$global_numeric_value_second = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>

if ( $global_numeric_value_first > $global_numeric_value_second ) {  <new_line>
$global_plus_or_minus_one = -1 ;  <new_line>
$global_count_range = $global_numeric_value_first - $global_numeric_value_second + 1 ;  <new_line>
} else {  <new_line>
$global_plus_or_minus_one = 1 ;  <new_line>
$global_count_range = $global_numeric_value_second - $global_numeric_value_first + 1 ;  <new_line>
}  <new_line>

if ( $global_count_range > 500000 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end = 'dashrep_undefined_from_action_generate_counts_from_integer_to_integer_error_count_range_too_large' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end = '' ;  <new_line>

for ( $global_counter = 1 ; $global_counter <= $global_count_range ; $global_counter ++ ) {  <new_line>
$global_count_number = $global_numeric_value_first + ( $global_plus_or_minus_one * ( $global_counter - 1 ) );  <new_line>

if ( $global_counter > 1 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
}  <new_line>

if ( $global_count_number == 0 ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end .= '0' ;  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end .= sprintf( "%d" , $global_count_number ) ;  <new_line>
}  <new_line>

# end of loop  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-generate-every-ordered-pairwise-combination-of-words:
# no-space dashes-long-line  <new_line>

sub function__generate_every_ordered_pairwise_combination_of_words( ) {  <new_line>
$global_action_name_with_underscores = 'generate_every_ordered_pairwise_combination_of_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_dashrep_replacement{ $global_operand_two } = '' ;  <new_line>
$global_dashrep_replacement{ $global_operand_three } = '' ;  <new_line>
$global_separator = '' ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_count_list = $#global_input_list + 1 ;  <new_line>
if ( $global_count_list > 0 ) {  <new_line>
    for ( $global_counter_one = 1 ; $global_counter_one <= $global_count_list ; $global_counter_one ++ ) {  <new_line>
        for ( $global_counter_two = $global_counter_one + 1 ; $global_counter_two <= $global_count_list ; $global_counter_two ++ ) {  <new_line>
            $global_dashrep_replacement{ $global_operand_two } .= $global_separator . $global_input_list[ $global_counter_one - 1 ] ;  <new_line>
            $global_dashrep_replacement{ $global_operand_three } .= $global_separator . $global_input_list[ $global_counter_two - 1 ] ;  <new_line>
            $global_separator = ' ' ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-generate-every-pairwise-combination-of-words:
# no-space dashes-long-line  <new_line>

sub function__generate_every_pairwise_combination_of_words( ) {  <new_line>
$global_action_name_with_underscores = 'generate_every_pairwise_combination_of_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name
template-check-operand-four-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_input_list_one_phrase_name = $global_operand_one ;  <new_line>
$global_input_list_two_phrase_name = $global_operand_two ;  <new_line>
$global_output_list_one_phrase_name = $global_operand_three ;  <new_line>
$global_output_list_two_phrase_name = $global_operand_four ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_input_list_one_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list_one = split( / +/ , $global_temp_text ) ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_input_list_two_phrase_name } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_input_list_two = split( / +/ , $global_temp_text ) ;  <new_line>
$global_count_list_one = $#global_input_list_one + 1 ;  <new_line>
$global_count_list_two = $#global_input_list_two + 1 ;  <new_line>
$global_dashrep_replacement{ $global_output_list_one_phrase_name } = "" ;  <new_line>
$global_dashrep_replacement{ $global_output_list_two_phrase_name } = "" ;  <new_line>
if ( ( $global_count_list_one < 1 ) || ( $global_count_list_two < 1 ) ) {  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_separator_one = " " ;  <new_line>
$global_separator_two = " " ;  <new_line>
$global_ending_first_count = $global_count_list_one ;  <new_line>
$global_starting_second_count = 1 ;  <new_line>
for ( $global_counter_one = 1 ; $global_counter_one <= $global_ending_first_count ; $global_counter_one ++ ) {  <new_line>
    $global_value_one = $global_input_list_one[ $global_counter_one <character_hyphen> 1 ] ;  <new_line>
    if ( $global_ending_first_count != $global_count_list_one ) {  <new_line>
        $global_starting_second_count = $global_counter_one + 1 ;  <new_line>
    }  <new_line>
    for ( $global_counter_two = $global_starting_second_count ; $global_counter_two <= $global_count_list_two ; $global_counter_two ++ ) {  <new_line>
        $global_value_two = $global_input_list_two[ $global_counter_two <character_hyphen> 1 ] ;  <new_line>
        if ( ( $global_counter_one == $global_ending_first_count ) && ( $global_counter_two == $global_count_list_two ) ) {  <new_line>
            $global_separator_one = "" ;  <new_line>
            $global_separator_two = "" ;  <new_line>
        }  <new_line>
        $global_dashrep_replacement{ $global_output_list_one_phrase_name } .= $global_value_one . $global_separator_one ;  <new_line>
        $global_dashrep_replacement{ $global_output_list_two_phrase_name } .= $global_value_two . $global_separator_two ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-generate-list-of-all-dashrep-phrases:
# no-space dashes-long-line  <new_line>

sub function__generate_list_of_all_dashrep_phrases( ) {  <new_line>
$global_action_name_with_underscores = 'generate_list_of_all_dashrep_phrases' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
@global_list_of_phrases = keys( %global_dashrep_replacement ) ;  <new_line>
@global_sequence_of_phrases = sort( @global_list_of_phrases ) ;  <new_line>
$global_counter = 0 ;  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end = '' ;  <new_line>
foreach $global_phrase_name ( @global_sequence_of_phrases ) {  <new_line>
    if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /^[^ ]+$/ ) && ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) && ( $global_phrase_name ne 'four<character_hyphen>hyphens' ) ) {  <new_line>
        if ( $global_counter > 0 ) {  <new_line>
            code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
        }  <new_line>
        code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end .= $global_phrase_name ;  <new_line>
        $global_counter ++ ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-generate-list-of-files-in-current-read-directory:
# no-space dashes-long-line  <new_line>

sub function__generate_list_of_files_in_current_read_directory( ) {  <new_line>
$global_action_name_with_underscores = 'generate_list_of_files_in_current_read_directory' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_path_prefix = $global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' } ;  <new_line>
if ( ( $global_source_path_prefix eq '' ) || ( $global_source_path_prefix !~ /[\\\/]$/ ) ) {  <new_line>

    $global_source_path_prefix = './' ;  <new_line>

combee ****
todo: allow backslash as needed for windows OS
$global_source_path_prefix = "\.\\" ;  <new_line>
**** comenn

}  <new_line>
$global_list_of_file_names = '' ;  <new_line>
if ( opendir( READDIR , $global_source_path_prefix ) ) {  <new_line>
    while ( defined( $global_file_name = readdir( READDIR ) ) ) {  <new_line>
        if ( $global_file_name !~ /^\./ ) {  <new_line>
            $global_source_file_full_path = $global_source_path_prefix . $global_file_name ;  <new_line>
            if ( <character_hyphen>f $global_source_file_full_path ) {  <new_line>
                $global_list_of_file_names .= $global_file_name . ' ' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_list_of_file_names =~ s / +$// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = $global_list_of_file_names ;  <new_line>
    closedir( READDIR ) ;  <new_line>
}  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-generate-list-of-folders-in-current-read-directory:
# no-space dashes-long-line  <new_line>

sub function__generate_list_of_folders_in_current_read_directory( ) {  <new_line>
$global_action_name_with_underscores = 'generate_list_of_folders_in_current_read_directory' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_path_prefix = $global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' } ;  <new_line>
if ( ( $global_source_path_prefix eq '' ) || ( $global_source_path_prefix !~ /[\\\/]$/ ) ) {  <new_line>

    $global_source_path_prefix = './' ;  <new_line>

combee ****
    $global_source_path_prefix = "\.\\" ;  <new_line>
**** comenn

}  <new_line>
$global_list_of_file_names = '' ;  <new_line>
if ( opendir( READDIR , $global_source_path_prefix ) ) {  <new_line>
    while ( defined( $global_file_name = readdir( READDIR ) ) ) {  <new_line>
        if ( $global_file_name !~ /^\./ ) {  <new_line>
            $global_source_file_full_path = $global_source_path_prefix . $global_file_name ;  <new_line>
            if ( <character_hyphen>d $global_source_file_full_path ) {  <new_line>
                $global_list_of_file_names .= $global_file_name . ' ' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_list_of_file_names =~ s / +$// ;  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = $global_list_of_file_names ;  <new_line>
    closedir( READDIR ) ;  <new_line>
}  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-generate-phrase-usage-counts:
# no-space dashes-long-line  <new_line>

sub function__generate_phrase_usage_counts( ) {  <new_line>
$global_action_name_with_underscores = 'generate_phrase_usage_counts' ; <new_line>
template-check-operand-one-is-phrase-name


$global_result_text = '' ;  <new_line>


# do sorting subroutine with 0000000175_phrase_name where 175 is usage count  <new_line>
# edits involve code-compiled-funtion-part-3  <new_line>



# for ( $global_phrase_number = 1 ; $global_phrase_number <= $global_number_of_unique_phrases ; $global_phrase_number ++ ) {  <new_line>
# $global_phrase_usage_count_for_phrase_number[ $global_phrase_number ] ++ ;  <new_line>
# $global_phrase_name = $global_phrase_name_for_phrase_number[ $global_phrase_number ] ;  <new_line>


##foreach $global_phrase_name ( keys( %global_replacement_count_for_item_name ) ) {  <new_line>
##    $global_replacement_count = $global_replacement_count_for_item_name{ $global_phrase_name } ;  <new_line>


# edited 2017may25  <new_line>
#    if ( ( exists( $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } ) ) && ( $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } ne '' ) ) {  <new_line>


#    {  <new_line>
#        $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } .= "\n" ;  <new_line>
#    }  <new_line>
#    $global_endless_loop_replacements_with_count{ sprintf( "%08d" , $global_replacement_count ) } .= $global_phrase_name ;  <new_line>
#}  <new_line>

foreach $global_replacement_count_text ( reverse( sort( keys( %global_endless_loop_replacements_with_count ) ) ) ) {  <new_line>
    @global_list_of_phrase_names = sort( split( /\n/ , $global_endless_loop_replacements_with_count{ $global_replacement_count_text } ) ) ;  <new_line>
    foreach $global_phrase_name ( @global_list_of_phrase_names ) {  <new_line>
        $global_result_text .= $global_replacement_count_text . ' ' . $global_phrase_name  . "\n" ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_one } = $global_result_text ;  <new_line>

template-function-segment-ending
----
template-function-generate-positions-of-delimiter:
# no-space dashes-long-line  <new_line>

sub function__generate_positions_of_delimiter( ) {  <new_line>
$global_action_name_with_underscores = 'generate_positions_of_delimiter' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_search_starting_position = 0 ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( $global_phrase_length > 0 ) {  <new_line>
    $global_local_endless_loop_counter = 0 ;  <new_line>
    $global_local_endless_loop_counter_maximum = 10000 ;  <new_line>
    $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
    while ( ( $global_position > -1 ) && ( $global_local_endless_loop_counter <= $global_local_endless_loop_counter_maximum ) ) {  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= sprintf( "%d" , ( $global_position + 1 ) ) ;  <new_line>
        $global_search_starting_position = $global_position + 1 ;  <new_line>
        $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
        $global_local_endless_loop_counter ++ ;  <new_line>
    }  <new_line>
    $global_dashrep_replacement{ $global_operand_three } = $global_list_of_positions ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-generate-positions-of-first-matching-delimiter-after-listed-positions:
# no-space dashes-long-line  <new_line>

sub function__generate_positions_of_first_matching_delimiter_after_listed_positions( ) {  <new_line>
$global_action_name_with_underscores = 'generate_positions_of_first_matching_delimiter_after_listed_positions' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name
template-check-operand-four-is-phrase-name

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {
    $global_action_result = 'dashrep_compiled_runtime_error__generate_positions_of_first_matching_delimiter_after_listed_positions__case_not_phrase_name ' . $global_operand_one . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_two ) == $global_no ) {
    $global_action_result = 'dashrep_compiled_runtime_error__generate_positions_of_first_matching_delimiter_after_listed_positions__case_not_phrase_name ' . $global_operand_two . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_three ) == $global_no ) {
    $global_action_result = 'dashrep_compiled_runtime_error__generate_positions_of_first_matching_delimiter_after_listed_positions__case_not_phrase_name ' . $global_operand_three . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_four ) == $global_no ) {
    $global_action_result = 'dashrep_compiled_runtime_error__generate_positions_of_first_matching_delimiter_after_listed_positions__case_not_phrase_name ' . $global_operand_four . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( ( $global_phrase_length > 0 ) && ( exists( $global_dashrep_replacement{ $global_operand_three } ) ) ) {  <new_line>
    $global_text_list_of_start_matching_positions = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/\n/ /sg ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/^ +// ;  <new_line>
    $global_text_list_of_start_matching_positions =~ s/ +$// ;  <new_line>
    if ( $global_text_list_of_start_matching_positions =~ /[0<character_hyphen>9 ]+/ ) {  <new_line>
        @global_list_of_start_matching_positions = split( / +/ , $global_text_list_of_start_matching_positions ) ;  <new_line>
    } else {  <new_line>
        @global_list_of_start_matching_positions = ( ) ;  <new_line>
    }  <new_line>
    foreach $global_search_starting_position ( @global_list_of_start_matching_positions ) {  <new_line>
        $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) ;  <new_line>
        if ( $global_position < 0 ) {  <new_line>
            $global_position = -1 ;  <new_line>
        }  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= sprintf( "%d" , ( $global_position + 1 ) ) ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_four } = $global_list_of_positions ;  <new_line>

template-function-segment-ending
----
template-function-generate-positions-of-listed-words:
# no-space dashes-long-line  <new_line>

sub function__generate_positions_of_listed_words( ) {  <new_line>
$global_action_name_with_underscores = 'generate_positions_of_listed_words' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_words_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_positions = '' ;  <new_line>
$global_words_to_find =~ s/\n/ /sg ;  <new_line>
$global_words_to_find =~ s/^ +// ;  <new_line>
$global_words_to_find =~ s/ +$// ;  <new_line>
if ( $global_words_to_find =~ / / ) {  <new_line>
    @global_list_of_text_items_to_find = split( / +/ , $global_words_to_find ) ;  <new_line>
    $global_number_of_items_to_find = $#global_list_of_text_items_to_find + 1 ;  <new_line>
} elsif ( $global_words_to_find =~ /^[^ ]+$/ ) {  <new_line>
    @global_list_of_text_items_to_find = ( ) ;  <new_line>
    $global_list_of_text_items_to_find[ 0 ] = $global_words_to_find ;  <new_line>
    $global_number_of_items_to_find = 1 ;  <new_line>
} else {  <new_line>
    @global_list_of_text_items_to_find = ( ) ;  <new_line>
    $global_number_of_items_to_find = 0 ;  <new_line>
}  <new_line>
%global_text_to_find_at_position = ( ) ;  <new_line>
if ( $global_number_of_items_to_find > 0 ) {  <new_line>
    for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items_to_find ; $global_item_number ++ ) {  <new_line>
        $global_text_to_find = $global_list_of_text_items_to_find[ $global_item_number - 1 ] ;  <new_line>
        $global_search_starting_position = 0 ;  <new_line>
        $global_local_endless_loop_counter = 0 ;  <new_line>
        $global_local_endless_loop_counter_maximum = 10000 ;  <new_line>
        $global_position_of_text_found = index( $global_string_to_search , $global_text_to_find , $global_search_starting_position ) ;  <new_line>
        while ( ( $global_position_of_text_found > -1 ) && ( $global_local_endless_loop_counter <= $global_local_endless_loop_counter_maximum ) ) {  <new_line>
            $global_position_as_string = sprintf( "%05d" , $global_position_of_text_found ) ;  <new_line>
            if ( exists( $global_text_to_find_at_position{ $global_position_as_string } ) ) {  <new_line>
                if ( length( $global_text_to_find ) > length( $global_text_to_find_at_position{ $global_position_as_string } ) ) {  <new_line>
                    $global_text_to_find_at_position{ $global_position_as_string } = $global_text_to_find ;  <new_line>
                    $global_item_number_found_at_position{ $global_position_as_string } = $global_item_number ;  <new_line>
                }  <new_line>
            } else {  <new_line>
                $global_text_to_find_at_position{ $global_position_as_string } = $global_text_to_find ;  <new_line>
                $global_item_number_found_at_position{ $global_position_as_string } = $global_item_number ;  <new_line>
            }  <new_line>
            $global_search_starting_position = $global_position_of_text_found + 1 ;  <new_line>
            $global_position_of_text_found = index( $global_string_to_search , $global_text_to_find , $global_search_starting_position ) ;  <new_line>
            $global_local_endless_loop_counter ++ ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_position_end = -1 ;  <new_line>
foreach $global_position_of_text_found ( sort( keys( %global_text_to_find_at_position ) ) ) {  <new_line>
    if ( ( $global_position_of_text_found + 1 ) >= $global_position_end ) {  <new_line>
        if ( $global_list_of_positions ne '' ) {  <new_line>
            $global_list_of_positions .= ' ' ;  <new_line>
        }  <new_line>
        $global_list_of_positions .= $global_position_of_text_found + 1 ;  <new_line>
        $global_position_end = ( $global_position_of_text_found + length( $global_list_of_text_items_to_find[ $global_item_number_found_at_position{ $global_position_of_text_found } - 1 ] ) ) ;  <new_line>
        $global_list_of_positions .= ' ' . $global_position_end  ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } = $global_list_of_positions ;  <new_line>

template-function-segment-ending
----
template-function-get-cgi-information:
# no-space dashes-long-line  <new_line>
# function__get_cgi_information  <new_line>
#  <new_line>

combee ****
#  Input is standard input or standard environmental values  <new_line>
#  Output are phrases that have names that begin with the text "input-" and otherwise are named using the cgi name  <new_line>
<new_line>
**** comenn

sub function__get_cgi_information( ) {  <new_line>

$global_action_result = '' ;  <new_line>
$global_raw_input = '' ;  <new_line>
$global_line_count = 0 ;  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } = '' ;  <new_line>

if ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'GET' ) ) {  <new_line>

if ( ( exists( $ENV{ 'CONTENT_LENGTH' } ) ) && ( $ENV{ 'CONTENT_LENGTH' } > $global_cgi_string_length_limit ) ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'QUERY_STRING' } ) ) {  <new_line>
$global_raw_input = $ENV{ 'QUERY_STRING' } ;  <new_line>
}  <new_line>

} elsif ( ( exists( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) && ( $dashrep_get_replacement{ 'input-filename-for-cgi-information' } =~ /^[^ ]+\.[^ ]+$/ ) && ( open( INFILE , $dashrep_get_replacement{ 'input-filename-for-cgi-information' } ) ) ) {  <new_line>

$global_yes_or_no_file_opened_for_reading = $global_yes ;  <new_line>

while( $global_input_line = <INFILE> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

# end of while loop  <new_line>
}  <new_line>

$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

} elsif ( ( exists( $ENV{ 'REQUEST_METHOD' } ) ) && ( $ENV{ 'REQUEST_METHOD' } eq 'POST' ) ) {  <new_line>

while( $global_input_line = <STDIN> ) {  <new_line>
chomp( $global_input_line ) ;  <new_line>

if ( $global_line_count > 0 ) {  <new_line>
$global_raw_input .= ' ' ;  <new_line>
}  <new_line>

$global_raw_input .= $global_input_line ;  <new_line>
$global_line_count ++ ;  <new_line>

if ( $global_line_count > $global_cgi_line_length_limit ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-error-cgi-input-too-long' } = 'yes' ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] .= ' dashrep_error_cgi_input_too_long' ;  <new_line>
return ;  <new_line>
}  <new_line>

# end of while loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_dashrep_replacement{ 'input-raw-cgi-string' } = $global_raw_input ;  <new_line>

if ( $global_raw_input =~ /^(([^ <>]+)=([^ <>]*)(&([^ <>]+)=([^ <>]*))*) *$/ ) {  <new_line>
$global_raw_input = $1 ;  <new_line>
$global_raw_input =~ tr/+/ / ;  <new_line>
@global_name_value_pairs = split( /&/, $global_raw_input ) ;  <new_line>

foreach $global_name_value ( @global_name_value_pairs ) {  <new_line>
( $global_name, $global_value ) = split( /=/, $global_name_value, 2 ) ;  <new_line>

if ( not( defined( $global_value ) ) ) {  <new_line>
$global_value = '' ;  <new_line>
}  <new_line>

$global_name  =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_name  =~ s/[<>\/\\]+/_/g ;  <new_line>

if ( $global_name eq 'texttoimport' ) {  <new_line>
#               Special preservation of tabs, line breaks, etc. for imported text:  <new_line>
$global_value =~ s/%0D//ig ;  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
} else {  <new_line>
$global_value =~ s/%([0-9A-F][0-9A-F])/chr (hex ($1))/ieg ;  <new_line>
$global_value =~ s/[<>]+/_/gm ;  <new_line>
$global_value =~ s/\n/<eol\/>/gm ;  <new_line>
}  <new_line>

$global_name = &function_parameterized__remove_leading_trailing_spaces( $global_name ) ;  <new_line>
$global_value = &function_parameterized__remove_leading_trailing_spaces( $global_value ) ;  <new_line>

if ( $global_name ne '' ) {  <new_line>
#  Prepend "input-" to the phrase name  <new_line>
$global_dashrep_replacement{ 'input-' . $global_name } = $global_value ;  <new_line>

if ( $dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } ne '' ) {  <new_line>
$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= ' ' ;  <new_line>
}  <new_line>

$dashrep_get_replacement{ 'dashrep-list-of-input-cgi-phrase-names' } .= 'input-' . $global_name ;  <new_line>
}  <new_line>

# end of foreach loop  <new_line>
}  <new_line>

# end of if branch  <new_line>
}  <new_line>

$global_raw_input = '' ;  <new_line>

if ( exists( $ENV{ 'REMOTE_ADDR' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-ip-address' } = $ENV{ 'REMOTE_ADDR' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'REMOTE_PORT' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-port-number' } = $ENV{ 'REMOTE_PORT' } ;  <new_line>
}  <new_line>

if ( exists( $ENV{ 'HTTP_COOKIE' } ) ) {  <new_line>
$global_dashrep_replacement{ 'input-cookie-contents' } = $ENV{ 'HTTP_COOKIE' } ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-characters-from-position-to-position:
# no-space dashes-long-line  <new_line>

sub function__get_characters_from_position_to_position( ) {  <new_line>
$global_action_name_with_underscores = 'get_characters_from_position_to_position' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-positive-integer
template-check-operand-three-is-positive-integer

$global_action_result = '' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_string_in_phrase = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_phrase_length = length( $global_string_in_phrase ) ;  <new_line>
    $global_starting_character_position = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
    if ( $global_starting_character_position > $global_phrase_length ) {  <new_line>
        $global_starting_character_position = $global_phrase_length ;  <new_line>
    } elsif ( $global_starting_character_position < 0 ) {  <new_line>
        $global_starting_character_position = $global_phrase_length - $global_starting_character_position + 1 ;  <new_line>
    }  <new_line>
    $global_ending_character_position = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_three ) ;  <new_line>
    if ( ( $global_ending_character_position > $global_phrase_length ) || ( $global_ending_character_position == 0 ) ) {  <new_line>
        $global_ending_character_position = $global_phrase_length ;  <new_line>
    } elsif ( $global_ending_character_position < 0 ) {  <new_line>
        $global_ending_character_position = $global_phrase_length - $global_ending_character_position + 1 ;  <new_line>
    }  <new_line>
    $global_number_of_characters_to_get = $global_ending_character_position - $global_starting_character_position + 1 ;  <new_line>
    if ( $global_number_of_characters_to_get < 1 ) {  <new_line>
        $global_number_of_characters_to_get = 1 ;  <new_line>
    }  <new_line>
    $global_action_result = substr( $global_string_in_phrase , ( $global_starting_character_position - 1 ) , $global_number_of_characters_to_get ) ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-get-count-of-characters:
# no-space dashes-long-line  <new_line>

sub function__get_count_of_characters( ) {  <new_line>
$global_action_name_with_underscores = 'get_count_of_characters' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '0' ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_action_result = length( $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
    if ( $global_action_result < 1 ) {  <new_line>
        $global_action_result = '0' ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-get-count-of-words:
# no-space dashes-long-line  <new_line>
# function__get_count_of_words  <new_line>
#  <new_line>

sub function__get_count_of_words( ) {  <new_line>
$global_action_name_with_underscores = 'get_count_of_words' ; <new_line>
template-check-operand-one-is-phrase-name

$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
&function__point_to_words( ) ;  <new_line>
$global_action_result = &function_parameterized__normalize_calculated_value( $global_number_of_words . '' ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-definitions-from-file:
# no-space dashes-long-line  <new_line>

sub function__get_definitions_from_file( ) {  <new_line>
$global_action_name_with_underscores = 'get_definitions_from_file' ; <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
template-open-file-for-reading

$global_action_result = '' ;  <new_line>

# todo: fix this code ...  <new_line>

$global_source_definitions = '' ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_input_line =~ s/[\n\r\f\t]+/ /g ;  <new_line>
    if ( ( defined( $global_input_line ) ) && ( $global_input_line =~ /[^ ]/ ) ) {  <new_line>
        $global_source_definitions .= $global_input_line . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-get-definitions-from-phrase:
# no-space dashes-long-line  <new_line>

sub function__get_definitions_from_phrase( ) {  <new_line>
$global_action_name_with_underscores = 'get_definitions_from_phrase' ; <new_line>

$global_action_result = 'todo__not_yet_written' ;  <new_line>

template-function-segment-ending
----
template-function-get-position-of-matching-text:
# no-space dashes-long-line  <new_line>

sub function__get_position_of_matching_text( ) {  <new_line>
$global_action_name_with_underscores = 'get_position_of_matching_text' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_string_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_string_to_search = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_search_starting_position = 0 ;  <new_line>
$global_action_result = '0' ;  <new_line>
$global_phrase_length = length( $global_string_to_search ) + 1 ;  <new_line>
if ( $global_phrase_length > 0 ) {  <new_line>
    $global_position = index( $global_string_to_search , $global_string_to_find , $global_search_starting_position ) + 1 ;  <new_line>
    if ( $global_position > 0 ) {  <new_line>
        $global_action_result = sprintf( "%d" , $global_position ) ;  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-get-position-of-word:
# no-space dashes-long-line  <new_line>

sub function__get_position_of_word( ) {  <new_line>
$global_action_name_with_underscores = 'get_position_of_word' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = ' ' ;  <new_line>
$global_word_to_find = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_list_length = $#global_list + 1 ;  <new_line>
$global_action_result = '0' ;  <new_line>
if ( $global_list_length >= 1 ) {  <new_line>
    $global_last_pointer = 0 ;  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_list_length ; $global_pointer ++ ) {  <new_line>
        if ( $global_list[ $global_pointer - 1 ] eq $global_word_to_find ) {  <new_line>
            $global_action_result = sprintf( "%d" , $global_pointer ) ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-get-url-resource:
# no-space dashes-long-line  <new_line>
# function__get_url_resource  <new_line>
#  <new_line>

combee ****
#  Inputs are the Dashrep phrases "url-source-for-single-resource-request" and "filename-target-for-single-resource-request"  <new_line>
#  Output is the file specified by the (above) filename and the phrase "dashrep-path-prefix-for-file-writing", plus messages from the CURL command are put into phrase "trace-results-from-curl" <new_line>
<new_line>
#  The -k switch reqests ignoring any  <new_line>
#  https certificate errors (which are not important  <new_line>
#  because the downloaded resources are public).  <new_line>
#  <new_line>
#  The -s switch requests silent mode, which turns  <new_line>
#  off both errors and progress info.  <new_line>
#  <new_line>
#  The -S switch requests that errors be shown.  <new_line>
**** comenn

sub function__get_url_resource( ) {  <new_line>

# use local variables for command-related variables for added security  <new_line>
my $command_string_without_pipe ;  <new_line>
my $process_id ;  <new_line>

template-return-if-no-permission-to-delete-overwrite-files

if ( &function_parameterized__yes_or_no_valid_url( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__get_url_resource__invalid_url ' . $global_operand_one . ' ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_operand_two ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__get_url_resource__invalid_file_name ' . $global_operand_two . ' ' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_path_prefix = $global_dashrep_replacement{ 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' } ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__get_url_resource__invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_operand_two ;  <new_line>

# todo: pipe error output to ignored file because it shows progress indicator info; or, use flag to ignore progress indicator  <new_line>

$command_string_without_pipe = 'curl -k -s -S -o ' . $global_target_file_full_path . ' ' . $global_operand_one ;  <new_line>

if ( not( $process_id = open( CURLCMD , $command_string_without_pipe . "|" ) ) ) {  <new_line>
    $global_accumulated_text = 'cannot_run_curl_command ' . $command_string_without_pipe ;  <new_line>
} else {  <new_line>
    $global_accumulated_text = 'starting_curl_command ' . $command_string_without_pipe ;  <new_line>
    while( $global_input_line = <CURLCMD> ) {  <new_line>
        $global_accumulated_text .= ' ' . $global_input_line ;  <new_line>
    }  <new_line>
    $global_accumulated_text .= ' ending_curl_command' ;  <new_line>
    if ( not( close( CURLCMD ) ) ) {  <new_line>
        $global_accumulated_text .= ' cannot_close_handle_that_runs_curl_command' ;  <new_line>
    }  <new_line>
    chmod( 0600 , $global_target_file_full_path ) ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ 'trace-results-from-curl' } = $global_accumulated_text ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-get-word-at-position:
# no-space dashes-long-line  <new_line>
# function__get_word_at_position  <new_line>
#  <new_line>

sub function__get_word_at_position( ) {  <new_line>
$global_action_name_with_underscores = 'get_word_at_position' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-positive-integer

$global_action_result = '' ;  <new_line>

$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
$global_word_pointer_text = $global_operand_two ;  <new_line>

$global_default_text = '' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_word_pointer_numeric = &function_parameterized__convert_numeric_text_into_numeric_value( $global_word_pointer_text ) ;  <new_line>

if ( $global_number_of_words < $global_word_pointer_numeric ) {  <new_line>
$global_word_pointer_numeric = $global_number_of_words ;  <new_line>
}  <new_line>

$global_action_result = runtime-code-word-within-source-text ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-insert-codeview-tags:
# no-space dashes-long-line  <new_line>

sub function__insert_codeview_tags( ) {  <new_line>
$global_action_name_with_underscores = 'insert_codeview_tags' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
if ( not( exists( $global_action_name_exists{ 'no<character_hyphen>space' } ) ) || ( $global_action_name_exists{ 'no<character_hyphen>space' } ne 'yes' ) ) {  <new_line>
    @global_list_of_action_names = split( / / , $global_dashrep_text_list_of_phrase_names ) ;  <new_line>
    foreach $global_action_name ( @global_list_of_action_names ) {  <new_line>
        $global_action_name_exists{ $global_action_name } = 'yes' ;  <new_line>
    }  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    $global_string_in_phrase = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
    $global_string_in_phrase =~ s/\n/<dashrep_codeview_newline>/sg ;  <new_line>
    $global_string_in_phrase =~ s/=/<dashrep_codeview_equal_sign>/sg ;  <new_line>
    $global_parameter_level = 1 ;  <new_line>
    $global_odd_or_even_based_on_zero_or_one[ 0 ] = 'even' ;  <new_line>
    $global_odd_or_even_based_on_zero_or_one[ 1 ] = 'odd' ;  <new_line>
    $global_accumulated_text = '' ;  <new_line>
    $global_remaining_text = $global_string_in_phrase ;  <new_line>
    while ( $global_remaining_text =~ /^(.*?)((\[<character_hyphen>)|(<character_hyphen>\]))(.*)$/ ) {  <new_line>
        $global_prefix_text = $1 ;  <new_line>
        $global_parameter_begin_or_end_string = $2 ;  <new_line>
        $global_remaining_text = $5 ;  <new_line>
        $global_accumulated_text = $global_accumulated_text . $global_prefix_text ;  <new_line>
        if ( $global_parameter_begin_or_end_string eq '[<character_hyphen>' ) {  <new_line>
            if ( $global_parameter_level >= 1 ) {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_' . $global_odd_or_even_based_on_zero_or_one[ $global_parameter_level % 2 ] . '_begin>' ;  <new_line>
            } else {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_unmatched_begin>' ;  <new_line>
            }  <new_line>
            $global_parameter_level ++ ;  <new_line>
        } elsif ( $global_parameter_begin_or_end_string eq '<character_hyphen>]' ) {  <new_line>
            $global_parameter_level <character_hyphen><character_hyphen> ;  <new_line>
            if ( $global_parameter_level >= 1 ) {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_' . $global_odd_or_even_based_on_zero_or_one[ $global_parameter_level % 2 ] . '_end>' ;  <new_line>
            } else {  <new_line>
                $global_accumulated_text = $global_accumulated_text . '<dashrep_codeview_tag_param_unmatched_end>' ;  <new_line>
            }  <new_line>
        }  <new_line>
    }  <new_line>
    $global_string_in_phrase = $global_accumulated_text . $global_remaining_text ;  <new_line>
    $global_accumulated_text = '' ;  <new_line>
    $global_remaining_text = $global_string_in_phrase ;  <new_line>
    while ( $global_remaining_text =~ /^(.*?)([^ <>]+<character_hyphen>[^ <>]+)(([ <]).*)$/ ) {  <new_line>
        $global_prefix_text = $1 ;  <new_line>
        $global_phrase_name = $2 ;  <new_line>
        $global_remaining_text = $3 ;  <new_line>
        if ( exists( $global_action_name_exists{ $global_phrase_name } ) && ( $global_action_name_exists{ $global_phrase_name } eq 'yes' ) ) {  <new_line>
            $global_phrase_type = 'action' ;  <new_line>
        } elsif ( exists( $global_dashrep_replacement{ $global_phrase_name } ) && ( $global_dashrep_replacement{ $global_phrase_name } ne '' ) ) {  <new_line>
            $global_phrase_type = 'phrase_defined' ;  <new_line>
        } else {  <new_line>
            $global_phrase_type = 'phrase' ;  <new_line>
        }  <new_line>
        $global_accumulated_text = $global_accumulated_text . $global_prefix_text . '<dashrep_codeview_tag_' . $global_phrase_type . '_begin>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_middle_1>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_middle_2>' . $global_phrase_name . '<dashrep_codeview_tag_' . $global_phrase_type . '_end>' ;  <new_line>
    }  <new_line>
    $global_string_in_phrase = $global_accumulated_text . $global_remaining_text ;  <new_line>
    $global_dashrep_replacement{ $global_operand_one } = $global_string_in_phrase ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-linewise-read-from-file-and-use-handler:
# no-space dashes-long-line  <new_line>

sub function__linewise_read_from_file_and_use_handler( ) {  <new_line>

$global_action_result = '' ;  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_source_file_name ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__linewise_read_from_file_and_use_handler__case_file_name_invalid ' . $global_source_file_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__open_file_for_reading( $global_source_file_name ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__linewise_read_from_file_and_use_handler__case_cannot_open_file_for_reading ' . $global_target_phrase_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_phrase_definition_not_empty( $global_target_phrase_name ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__linewise_read_from_file_and_use_handler__case_phrase_empty ' . $global_target_phrase_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_line_count = 1 ;  <new_line>
while ( $global_input_line = <INFILE> ) {  <new_line>
    chomp( $global_input_line ) ;  <new_line>
    $global_dashrep_replacement{ "linewise hyphen-here input hyphen-here line hyphen-here from hyphen-here file" } = $global_input_line ;  <new_line>
    $global_dashrep_replacement{ "linewise hyphen-here input hyphen-here line hyphen-here count" } = $global_line_count ;  <new_line>
    $global_phrase_name_to_match = $global_target_phrase_name ;  <new_line>
    &function_branch_based_on_phrase_name( );  <new_line>
    $global_nesting_level_of_file_actions <character_hyphen><character_hyphen> ;  <new_line>
    $global_line_count ++ ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

template-function-segment-ending
----
template-function-modification-time-of-file:
# no-space dashes-long-line  <new_line>

sub function__modification_time_of_file( ) {  <new_line>
$global_action_name_with_underscores = 'modification_time_of_file' ; <new_line>
template-check-operand-one-is-file-name

$global_action_result = '0' ;  <new_line>
$global_source_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_source_path_prefix ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__modification_time_of_file__case_invalid_path_prefix ' . $global_source_path_prefix ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_source_file_name ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__modification_time_of_file__case_invalid_file_name ' . $global_source_file_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_source_file_full_path = $global_source_path_prefix . $global_source_file_name ;  <new_line>

( $global_read_time , $global_write_time ) = ( stat( $global_source_file_full_path ) )[8,9] ;  <new_line>
$global_action_result = $global_write_time ;  <new_line>

template-function-segment-ending
----
template-function-numeric-absolute:
# no-space dashes-long-line  <new_line>

sub function__numeric_absolute( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_absolute' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = '' ;  <new_line>
$global_result_value = abs( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ;  <new_line>
if ( $global_result_value == 0 ) {  <new_line>
    $global_action_result = '0' ;  <new_line>
} else {  <new_line>
    $global_action_result = sprintf( "%d" , $global_result_value ) ;  <new_line>
}  <new_line>
if ( $global_action_result =~ /^(<character_hyphen>?[0<character_hyphen>9]+)\.0*$/ ) {  <new_line>
    $global_action_result = $1 ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-numeric-add:
# no-space dashes-long-line  <new_line>
# function__numeric_add  <new_line>
#  <new_line>

sub function__numeric_add( ) {  <new_line>
$global_action_result = '0' ;  <new_line>
$global_default_text = '0' ;  <new_line>

combee ****
#  Input is $global_source_text  <new_line>
**** comenn
# todo: activate
# $global_source_text = $global_concatenated_all_operands ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 0 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value + &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
$global_action_result = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-cosine:
# no-space dashes-long-line  <new_line>

sub function__numeric_cosine( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_cosine' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( cos( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-decrement:
# no-space dashes-long-line  <new_line>

sub function__numeric_decrement( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_decrement' ; <new_line>

template-check-operand-one-is-phrase-name

$global_action_result = ' ' ;  <new_line>

template-get-phrase-contents-from-operand-one-and-check-contains-integer

code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( $global_phrase_contents ) - 1 ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-divide-by:
# no-space dashes-long-line  <new_line>

sub function__numeric_divide_by( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_divide_by' ; <new_line>
template-check-operand-one-is-real-number
template-check-operand-two-is-real-number

$global_action_result = '' ;  <new_line>
$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) / &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-equal-greater-less-compare:
# no-space dashes-long-line  <new_line>

sub function__numeric_equal_greater_less_compare( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_equal_greater_less_compare' ; <new_line>
template-check-operand-one-is-real-number
template-check-operand-two-is-real-number

$global_action_result = '' ;  <new_line>
$global_first_object_of_action = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ;  <new_line>
$global_second_object_of_action = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
if ( $global_first_object_of_action == $global_second_object_of_action ) {  <new_line>
    $global_action_result = 'equal' ;  <new_line>
} elsif ( $global_first_object_of_action > $global_second_object_of_action ) {  <new_line>
    $global_action_result = 'greater' ;  <new_line>
} else {  <new_line>
    $global_action_result = 'less' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-numeric-increment:
# no-space dashes-long-line  <new_line>

sub function__numeric_increment( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_increment' ; <new_line>

template-check-operand-one-is-phrase-name

$global_action_result = ' ' ;  <new_line>

template-get-phrase-contents-from-operand-one-and-check-contains-integer

code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end = &function_parameterized__convert_numeric_value_into_numeric_text( 1 + &function_parameterized__convert_numeric_text_into_numeric_value( $global_phrase_contents ) ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-integer:
# no-space dashes-long-line  <new_line>

sub function__numeric_integer( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_integer' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = '' ;  <new_line>
$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( int( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-logarithm-base-10:
# no-space dashes-long-line  <new_line>

sub function__numeric_logarithm_base_10( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_logarithm_base_10' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = '' ;  <new_line>
$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( log( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) / log( 10.0 ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-logarithm-base-e:
# no-space dashes-long-line  <new_line>

sub function__numeric_logarithm_base_e( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_logarithm_base_e' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = '' ;  <new_line>
$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( log( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-maximum:
# no-space dashes-long-line  <new_line>
# function__numeric_maximum  <new_line>
#  <new_line>

combee ****
#  Input is $global_source_text  <new_line>
#  Output is $global_action_result  <new_line>
<new_line>
**** comenn

sub function__numeric_maximum( ) {  <new_line>
$global_action_result = '0' ;  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = -999999999999 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ) > $global_calculated_value ) {  <new_line>
$global_calculated_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_action_result = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-minimum:
# no-space dashes-long-line  <new_line>
# function__numeric_minimum  <new_line>
#  <new_line>

combee ****
#  Input is $global_source_text  <new_line>
#  Output is $global_action_result  <new_line>
<new_line>
**** comenn

sub function__numeric_minimum( ) {  <new_line>
$global_action_result = '0' ;  <new_line>
$global_default_text = '0' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 999999999999 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
if ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) < $global_calculated_value ) {  <new_line>
$global_calculated_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
}  <new_line>
$global_action_result = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-minus:
# no-space dashes-long-line  <new_line>

sub function__numeric_minus( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_minus' ; <new_line>
template-check-operand-one-is-real-number
template-check-operand-two-is-real-number

$global_action_result = '' ;  <new_line>
$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) - &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-multiply:
# no-space dashes-long-line  <new_line>
# function__numeric_multiply  <new_line>
#  <new_line>

combee ****
#  Input is $global_source_text  <new_line>
#  Output is $global_action_result  <new_line>
<new_line>
**** comenn

sub function__numeric_multiply( ) {  <new_line>
$global_action_result = '1' ;  <new_line>
$global_default_text = '1' ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_calculated_value = 1 ;  <new_line>
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_current_word = runtime-code-word-within-source-text ;  <new_line>
if ( $global_yes == &function_parameterized__yes_or_no_real_number( $global_current_word ) ) {  <new_line>
$global_calculated_value = $global_calculated_value * &function_parameterized__convert_numeric_text_into_numeric_value( $global_current_word ) ;  <new_line>
}  <new_line>
}  <new_line>
$global_action_result = &function_parameterized__normalize_calculated_value( $global_calculated_value ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-numeric-odd-or-even:
# no-space dashes-long-line  <new_line>

sub function__numeric_odd_or_even( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_odd_or_even' ; <new_line>
template-check-operand-one-is-real-number

$global_numeric_value_first = int( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ;  <new_line>
$global_numeric_value_second = $global_numeric_value_first - ( 2 * int( $global_numeric_value_first / 2 ) ) ;  <new_line>
if ( $global_numeric_value_second == 0 ) {  <new_line>
$global_action_result = "even" ;  <new_line>
} else {  <new_line>
$global_action_result = "odd" ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-numeric-sine:
# no-space dashes-long-line  <new_line>

sub function__numeric_sine( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_sine' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = &function_parameterized__convert_numeric_value_into_numeric_text( sin( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) ) ) ;  <new_line>

template-function-segment-ending
----
template-function-numeric-two-dimensional-sort-into-columns-and-rows:
# no-space dashes-long-line  <new_line>

sub function__numeric_two_dimensional_sort_into_columns_and_rows( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_two_dimensional_sort_into_columns_and_rows' ; <new_line>
template-check-operand-one-is-positive-integer
template-check-operand-two-contains-real-numbers
template-check-operand-three-contains-real-numbers

$global_action_result = '' ;  <new_line>
$global_number_of_columns = $global_operand_one ;  <new_line>
$global_text_for_right_direction_values = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_text_for_up_direction_values = $global_dashrep_replacement{ $global_operand_three } ;  <new_line>
$global_text_for_up_direction_values =~ s/\n/ /s ;  <new_line>
$global_text_for_up_direction_values =~ s/^ +// ;  <new_line>
$global_text_for_up_direction_values =~ s/ +$// ;  <new_line>
$global_text_for_right_direction_values =~ s/\n/ /s ;  <new_line>
$global_text_for_right_direction_values =~ s/^ +// ;  <new_line>
$global_text_for_right_direction_values =~ s/ +$// ;  <new_line>
@global_up_direction_text_for_item_number = split( / +/ , $global_text_for_up_direction_values ) ;  <new_line>
unshift( @global_up_direction_text_for_item_number , 0 ) ;  <new_line>
@global_right_direction_text_for_item_number = split( / +/ , $global_text_for_right_direction_values ) ;  <new_line>
unshift( @global_right_direction_text_for_item_number , 0 ) ;  <new_line>
if ( $#global_up_direction_text_for_item_number != $#global_right_direction_text_for_item_number ) {  <new_line>
    $global_action_result = 'runtime_error_two_dimensional_sort_lists_not_same_length' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_number_of_items = $#global_up_direction_text_for_item_number ;  <new_line>
if ( $global_number_of_items == 0 ) {  <new_line>
    $global_action_result = 'runtime_error_two_dimensional_sort_lists_are_empty' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_up_direction_value_for_item_number[ $global_item_number ] = &function_parameterized__convert_numeric_text_into_numeric_value( $global_up_direction_text_for_item_number[ $global_item_number ] ) ;  <new_line>
    $global_right_direction_value_for_item_number[ $global_item_number ] = &function_parameterized__convert_numeric_text_into_numeric_value( $global_right_direction_text_for_item_number[ $global_item_number ] ) ;  <new_line>
}  <new_line>
$global_number_of_items_in_bottom_row = $global_number_of_columns ;  <new_line>
$global_number_of_full_rows = int( $global_number_of_items / $global_number_of_columns ) ;  <new_line>
$global_number_of_rows = $global_number_of_full_rows ;  <new_line>
if ( ( $global_number_of_full_rows * $global_number_of_columns ) < $global_number_of_items ) {  <new_line>
    $global_number_of_rows ++ ;  <new_line>
    $global_number_of_items_in_bottom_row = $global_number_of_items - ( $global_number_of_full_rows * $global_number_of_columns ) ;  <new_line>
}  <new_line>
@global_list_of_remaining_item_numbers = ( ) ;  <new_line>
$global_up_direction_minimum_value = 999999 ;  <new_line>
$global_up_direction_maximum_value = <character_hyphen>999999 ;  <new_line>
$global_right_direction_minimum_value = 999999 ;  <new_line>
$global_right_direction_maximum_value = <character_hyphen>999999 ;  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_zero_if_not_remaining_item_number[ $global_item_number ] = $global_item_number ;  <new_line>
    if ( $global_up_direction_value_for_item_number[ $global_item_number ] < $global_up_direction_minimum_value ) {  <new_line>
        $global_up_direction_minimum_value = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_up_direction_value_for_item_number[ $global_item_number ] > $global_up_direction_maximum_value ) {  <new_line>
        $global_up_direction_maximum_value = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_right_direction_value_for_item_number[ $global_item_number ] < $global_right_direction_minimum_value ) {  <new_line>
        $global_right_direction_minimum_value = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    if ( $global_right_direction_value_for_item_number[ $global_item_number ] > $global_right_direction_maximum_value ) {  <new_line>
        $global_right_direction_maximum_value = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    }  <new_line>
    push( @global_list_of_remaining_item_numbers , $global_item_number ) ;  <new_line>
}  <new_line>
$global_range_of_up_direction_values = $global_up_direction_maximum_value - $global_up_direction_minimum_value ;  <new_line>
$global_range_of_right_direction_values = $global_right_direction_maximum_value - $global_right_direction_minimum_value ;  <new_line>
if ( $global_range_of_up_direction_values > 0.0001 ) {  <new_line>
    $global_multiplier_for_up_direction_values = $global_number_of_rows * 100.00 / $global_range_of_up_direction_values ;  <new_line>
} else {  <new_line>
    $global_multiplier_for_up_direction_values = $global_number_of_rows * 1.0 ;  <new_line>
    $global_up_direction_minimum_value = $global_up_direction_minimum_value - 1.0 ;  <new_line>
}  <new_line>
if ( $global_range_of_right_direction_values > 0.0001 ) {  <new_line>
    $global_multiplier_for_right_direction_values = $global_number_of_columns * 100.00 / $global_range_of_right_direction_values ;  <new_line>
} else {  <new_line>
    $global_multiplier_for_right_direction_values = $global_number_of_columns * 1.0 ;  <new_line>
    $global_right_direction_minimum_value = $global_right_direction_minimum_value - 1.0 ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_up_direction_value_for_item_number[ $global_item_number ] = ( $global_up_direction_value_for_item_number[ $global_item_number ] - $global_up_direction_minimum_value ) * $global_multiplier_for_up_direction_values ;  <new_line>
    $global_right_direction_value_for_item_number[ $global_item_number ] = ( $global_right_direction_value_for_item_number[ $global_item_number ] - $global_right_direction_minimum_value ) * $global_multiplier_for_right_direction_values ;  <new_line>
}  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_right_and_up_direction_value_for_item_number[ $global_item_number ] = $global_right_direction_value_for_item_number[ $global_item_number ] + $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
    $global_left_and_up_direction_value_for_item_number[ $global_item_number ] = - $global_right_direction_value_for_item_number[ $global_item_number ] + $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
}  <new_line>
$global_top_row_number = 1 ;  <new_line>
$global_bottom_row_number = $global_number_of_rows ;  <new_line>
$global_fill_direction_top_left = 1 ;  <new_line>
$global_fill_direction_bottom_right = 2 ;  <new_line>
$global_fill_direction_bottom_left = 3 ;  <new_line>
$global_fill_direction_top_right = 4 ;  <new_line>
$global_need_maximum = 1 ;  <new_line>
$global_need_minimum = 2 ;  <new_line>
$global_value_direction_right_and_up = 1 ;  <new_line>
$global_value_direction_left_and_up = 2 ;  <new_line>
$global_value_direction_up = 3 ;  <new_line>
$global_value_direction_right = 4 ;  <new_line>
$global_top_left_open_column = 1 ;  <new_line>
$global_top_right_open_column = $global_number_of_columns ;  <new_line>
$global_bottom_left_open_column = 1 ;  <new_line>
$global_bottom_right_open_column = $global_number_of_items_in_bottom_row ;  <new_line>
$global_number_of_items_remaining = $global_number_of_items ;  <new_line>
while ( $global_number_of_items_remaining > 0 ) {  <new_line>
    for ( $global_fill_direction = $global_fill_direction_top_left ; $global_fill_direction <= $global_fill_direction_top_right ; $global_fill_direction ++ ) {  <new_line>
        if ( $global_fill_direction == $global_fill_direction_top_left ) {  <new_line>
            $global_target_row_number = $global_top_row_number ;  <new_line>
            $global_target_column_number = $global_top_left_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right ;  <new_line>
            } elsif ( $global_top_left_open_column < $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_top_left_open_column == $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_right ) {  <new_line>
            $global_target_row_number = $global_bottom_row_number ;  <new_line>
            $global_target_column_number = $global_bottom_right_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right ;  <new_line>
            } elsif ( ( $global_bottom_row_number == $global_number_of_rows ) && ( $global_bottom_right_open_column > $global_number_of_items_in_bottom_row ) ) {  <new_line>
                $global_bottom_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
                next ;  <new_line>
            } elsif ( $global_bottom_left_open_column < $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column == $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_left ) {  <new_line>
            $global_target_row_number = $global_bottom_row_number ;  <new_line>
            $global_target_column_number = $global_bottom_left_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                next ;  <new_line>
            } elsif ( ( $global_bottom_row_number == $global_number_of_rows ) && ( $global_bottom_left_open_column > $global_number_of_items_in_bottom_row ) ) {  <new_line>
                $global_bottom_row_number <character_hyphen><character_hyphen> ;  <new_line>
                $global_bottom_left_open_column = 1 ;  <new_line>
                $global_bottom_right_open_column = $global_number_of_columns ;  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column < $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_right_and_up ;  <new_line>
            } elsif ( $global_bottom_left_open_column == $global_bottom_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_minimum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_top_right ) {  <new_line>
            $global_target_row_number = $global_top_row_number ;  <new_line>
            $global_target_column_number = $global_top_right_open_column ;  <new_line>
            if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
                next ;  <new_line>
            } elsif ( $global_top_left_open_column < $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_left_and_up ;  <new_line>
            } elsif ( $global_top_left_open_column == $global_top_right_open_column ) {  <new_line>
                $global_need_maximum_or_minimum = $global_need_maximum ;  <new_line>
                $global_use_value_direction = $global_value_direction_up ;  <new_line>
            } else {  <new_line>
                next ;  <new_line>
            }  <new_line>
        }  <new_line>
        if ( $global_need_maximum_or_minimum == $global_need_maximum ) {  <new_line>
            $global_max_or_min_value = <character_hyphen>999999 ;  <new_line>
        } else {  <new_line>
            $global_max_or_min_value = 999999 ;  <new_line>
        }  <new_line>
        $global_item_number_at_min_or_max = 0 ;  <new_line>
        foreach ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
            if ( $global_zero_if_not_remaining_item_number[ $global_item_number ] >= 1 ) {  <new_line>
                if ( $global_use_value_direction == $global_value_direction_right_and_up ) {  <new_line>
                    $global_next_value_to_compare = $global_right_and_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_left_and_up ) {  <new_line>
                    $global_next_value_to_compare = $global_left_and_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_up ) {  <new_line>
                    $global_next_value_to_compare = $global_up_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } elsif ( $global_use_value_direction == $global_value_direction_right ) {  <new_line>
                    $global_next_value_to_compare = $global_right_direction_value_for_item_number[ $global_item_number ] ;  <new_line>
                } else {  <new_line>
                    next ;  <new_line>
                }  <new_line>
                if ( $global_need_maximum_or_minimum == $global_need_maximum ) {  <new_line>
                    if ( $global_next_value_to_compare > $global_max_or_min_value ) {  <new_line>
                        $global_max_or_min_value = $global_next_value_to_compare ;  <new_line>
                        $global_item_number_at_min_or_max = $global_item_number ;  <new_line>
                    }  <new_line>
                } else {  <new_line>
                    if ( $global_next_value_to_compare < $global_max_or_min_value ) {  <new_line>
                        $global_max_or_min_value = $global_next_value_to_compare ;  <new_line>
                        $global_item_number_at_min_or_max = $global_item_number ;  <new_line>
                    }  <new_line>
                }  <new_line>
            }  <new_line>
        }  <new_line>
        $global_column_position_for_item_number[ $global_item_number_at_min_or_max ] = $global_target_column_number ;  <new_line>
        $global_row_position_for_item_number[ $global_item_number_at_min_or_max ] = $global_target_row_number ;  <new_line>
#                   Do NOT change (or remove) next line, else endless loop is likely:  <new_line>
        $global_number_of_items_remaining <character_hyphen><character_hyphen> ;  <new_line>
        if ( $global_number_of_items_remaining < 1 ) {  <new_line>
            last ;  <new_line>
        }  <new_line>
        if ( $global_fill_direction == $global_fill_direction_top_left ) {  <new_line>
            $global_top_left_open_column ++ ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_right ) {  <new_line>
            $global_bottom_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_bottom_left ) {  <new_line>
            $global_bottom_left_open_column ++ ;  <new_line>
        } elsif ( $global_fill_direction == $global_fill_direction_top_right ) {  <new_line>
            $global_top_right_open_column <character_hyphen><character_hyphen> ;  <new_line>
        }  <new_line>
        $global_zero_if_not_remaining_item_number[ $global_item_number_at_min_or_max ] = 0 ;  <new_line>
    }  <new_line>
    if ( $global_number_of_items_remaining < 1 ) {  <new_line>
        last ;  <new_line>
    }  <new_line>
    if ( $global_top_left_open_column > $global_top_right_open_column ) {  <new_line>
        $global_top_row_number ++ ;  <new_line>
        $global_top_left_open_column = 1 ;  <new_line>
        $global_top_right_open_column = $global_number_of_columns ;  <new_line>
    }  <new_line>
    if ( $global_bottom_left_open_column > $global_bottom_right_open_column ) {  <new_line>
        $global_bottom_row_number <character_hyphen><character_hyphen> ;  <new_line>
        $global_bottom_left_open_column = 1 ;  <new_line>
        $global_bottom_right_open_column = $global_number_of_columns ;  <new_line>
    }  <new_line>
    if ( $global_top_row_number == $global_bottom_row_number ) {  <new_line>
        if ( $global_top_left_open_column > $global_bottom_left_open_column ) {  <new_line>
            $global_bottom_left_open_column = $global_top_left_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_left_open_column < $global_bottom_left_open_column ) {  <new_line>
            $global_top_left_open_column = $global_bottom_left_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_right_open_column > $global_bottom_right_open_column ) {  <new_line>
            $global_top_right_open_column = $global_bottom_right_open_column ;  <new_line>
        }  <new_line>
        if ( $global_top_right_open_column < $global_bottom_right_open_column ) {  <new_line>
            $global_bottom_right_open_column = $global_top_right_open_column ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>
$global_final_result = '' ;  <new_line>
for ( $global_item_number = 1 ; $global_item_number <= $global_number_of_items ; $global_item_number ++ ) {  <new_line>
    $global_row_number = $global_row_position_for_item_number[ $global_item_number ] ;  <new_line>
    $global_column_number = $global_column_position_for_item_number[ $global_item_number ] ;  <new_line>
    $global_final_result .= 'row<character_hyphen>' . $global_row_number . '<character_hyphen>column<character_hyphen>' . $global_column_number . ' ' ;  <new_line>
    $global_item_number_at_row_column{ $global_row_number . '' . $global_column_number } = $global_item_number ;  <new_line>
}  <new_line>
$global_final_result =~ s/ +$// ;  <new_line>
$global_dashrep_replacement{ $global_operand_four } = $global_final_result ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vector-absolutes:
# no-space dashes-long-line  <new_line>

sub function__numeric_vector_absolutes( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vector_absolutes' ; <new_line>
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_two ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = abs( &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_operand } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vector-add-number:
# no-space dashes-long-line  <new_line>

sub function__numeric_vector_add_number( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vector_add_number' ; <new_line>
template-check-operand-one-is-phrase-not-empty
template-check-operand-two-is-real-number
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_single_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] + &function_parameterized__convert_numeric_text_into_numeric_value( $global_single_value ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vector-integers:
# no-space dashes-long-line  <new_line>

sub function__numeric_vector_integers( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vector_integers' ; <new_line>
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_two ;  <new_line>
if ( $global_dashrep_replacement{ $global_operand_one } !~ /^[ \<character_hyphen>0<character_hyphen>9\.]+$/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__numeric_vector_integers' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = int( &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] )) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_target_operand } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vector-multiply-by-number:
# no-space dashes-long-line  <new_line>

sub function__numeric_vector_multiply_by_number( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vector_multiply_by_number' ; <new_line>
template-check-operand-one-is-phrase-not-empty
template-check-operand-two-is-real-number
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_single_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_two ) ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = $global_list_of_x_values[ $global_pair_pointer ] * $global_single_value ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vectors-add:
# no-space dashes-long-line  <new_line>

sub function__numeric_vectors_add( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vectors_add' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) + &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vectors-divide-by:
# no-space dashes-long-line  <new_line>

sub function__numeric_vectors_divide_by( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vectors_divide_by' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    if ( abs( $global_list_of_y_values[ $global_pair_pointer ] ) < 0.000001 ) {  <new_line>
        $global_numeric_value = 1000000 ;  <new_line>
    } else {  <new_line>
        $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) / &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    }  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vectors-from-delta-values-calculate-distances:
# no-space dashes-long-line  <new_line>

sub function__numeric_vectors_from_delta_values_calculate_distances( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vectors_from_delta_values_calculate_distances' ; <new_line>
template-check-operand-one-is-phrase-not-empty
template-check-operand-two-is-phrase-not-empty
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
if ( $global_dashrep_replacement{ $global_operand_one } !~ /^[ \<character_hyphen>0<character_hyphen>9\.]+$/ ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__numeric_vectors_from_delta_values_calculate_distances' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value =  int( sqrt( ( $global_list_of_x_values[ $global_pair_pointer ] ** 2 ) + ( $global_list_of_y_values[ $global_pair_pointer ] ** 2 ) ) + 0.5 ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-vectors-multiply:
# no-space dashes-long-line  <new_line>

sub function__numeric_vectors_multiply( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_vectors_multiply' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name
template-check-operand-three-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_single_value = 0 ;  <new_line>
$global_target_operand = $global_operand_three ;  <new_line>
$global_list_of_x_values_as_text = $global_dashrep_replacement{ $global_operand_one } ;  <new_line>
$global_list_of_x_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_x_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_x_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_x_values = split( / +/ , $global_list_of_x_values_as_text ) ;  <new_line>
$global_dashrep_replacement{ $global_target_operand } = '' ;  <new_line>
$global_list_of_y_values_as_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_list_of_y_values_as_text =~ s/\n/ /s ;  <new_line>
$global_list_of_y_values_as_text =~ s/^ +// ;  <new_line>
$global_list_of_y_values_as_text =~ s/ +$// ;  <new_line>
@global_list_of_y_values = split( / +/ , $global_list_of_y_values_as_text ) ;  <new_line>
for( $global_pair_pointer = 0 ; $global_pair_pointer <= $#global_list_of_x_values ; $global_pair_pointer ++ ) {  <new_line>
    $global_numeric_value = &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_x_values[ $global_pair_pointer ] ) * &function_parameterized__convert_numeric_text_into_numeric_value( $global_list_of_y_values[ $global_pair_pointer ] ) ;  <new_line>
    if ( $global_numeric_value == 0 ) {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= '0 ' ;  <new_line>
    } else {  <new_line>
        $global_dashrep_replacement{ $global_target_operand } .= sprintf( "%d" , $global_numeric_value ) . ' ' ;  <new_line>
    }  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_operand_three } =~ s/ +$// ;  <new_line>

template-function-segment-ending
----
template-function-numeric-y-map-tile-number-based-on-latitude:
# no-space dashes-long-line  <new_line>

sub function__numeric_y_map_tile_number_based_on_latitude( ) {  <new_line>
$global_action_name_with_underscores = 'numeric_y_map_tile_number_based_on_latitude' ; <new_line>
template-check-operand-one-is-real-number

$global_action_result = '' ;  <new_line>
if ( ( $global_operand_one > 85.0 ) || ( $global_operand_one < <character_hyphen>85.0 ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__numeric_y_map_tile_number_based_on_latitude' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
if ( ( exists( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } ) ) && ( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } =~ /^[0<character_hyphen>9]+$/ ) ) {  <new_line>
    $global_map_tile_zoom = &function_parameterized__convert_numeric_text_into_numeric_value( $global_dashrep_replacement{ 'numeric<character_hyphen>map<character_hyphen>tile<character_hyphen>zoom' } ) ;  <new_line>
} else {  <new_line>
    $global_map_tile_zoom = 16 ;  <new_line>
}  <new_line>
$global_map_tile_n = 2 ** $global_map_tile_zoom ;  <new_line>
$global_pi = 4.0 * atan2( 1.0 , 1.0 ) ;  <new_line>
$global_dashrep_replacement{ 'numeric<character_hyphen>pi' } = sprintf( "%f" , $global_pi ) ;  <new_line>
$global_angle_in_radians = ( $global_operand_one + 0.0 ) * $global_pi / 180.0 ;  <new_line>
$global_sine_of_angle = sin( $global_angle_in_radians ) ;  <new_line>
$global_cosine_of_angle = cos( $global_angle_in_radians ) ;  <new_line>
$global_result_value = $global_map_tile_n * ( 1.0 - ( log( ( $global_sine_of_angle / $global_cosine_of_angle ) + ( 1 / $global_cosine_of_angle ) ) / $global_pi ) ) / 2.0 ;  <new_line>
if ( $global_result_value == 0 ) {  <new_line>
    $global_action_result = '0' ;  <new_line>
} else {  <new_line>
    $global_action_result = sprintf( "%f" , $global_result_value ) ;  <new_line>
}  <new_line>
if ( $global_action_result =~ /^(<character_hyphen>?[0<character_hyphen>9]+)\.0*$/ ) {  <new_line>
    $global_action_result = $1 ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-convert-numeric-text-into-numeric-value:
# no-space dashes-long-line  <new_line>
# function_parameterized__convert_numeric_text_into_numeric_value  <new_line>
<new_line>

sub function_parameterized__convert_numeric_text_into_numeric_value( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^ *([\+|\ hyphen-here ]?[0-9]+(\.[0-9]*)?) *$/ ) {  <new_line>
return $1 + 0 ;  <new_line>
} else {  <new_line>
return 0 ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-convert-numeric-value-into-numeric-text:
# no-space dashes-long-line  <new_line>
# function_parameterized__convert_numeric_value_into_numeric_text  <new_line>
<new_line>

sub function_parameterized__convert_numeric_value_into_numeric_text( ) {  <new_line>
my $local_numeric ;  <new_line>
$local_numeric = $_[ 0 ] ;  <new_line>

return $local_numeric . '' ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-get-list-of-words:
# no-space dashes-long-line  <new_line>
# function_parameterized__get_list_of_words  <new_line>
<new_line>

sub function_parameterized__get_list_of_words( ) {  <new_line>
my $local_text ;  <new_line>
my @global_list_of_operands ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text !~ /[^ ]/ ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( $local_text =~ /[\n\r\t]/ ) {  <new_line>
$local_text =~ s/[\n\r\t]/ /sg ;  <new_line>
}  <new_line>
if ( $local_text =~ /^ / ) {  <new_line>
$local_text =~ s/^ +// ;  <new_line>
}  <new_line>
if ( $local_text =~ / $/ ) {  <new_line>
$local_text =~ s/ +$// ;  <new_line>
}  <new_line>

@global_list_of_operands = split( / +/ , $local_text ) ;  <new_line>
return @global_list_of_operands ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-normalize-calculated-value:
# no-space dashes-long-line  <new_line>
# function_parameterized__normalize_calculated_value  <new_line>
<new_line>

sub function_parameterized__normalize_calculated_value( ) {  <new_line>
$global_calculated_value = $_[ 0 ] ;  <new_line>

if ( $global_calculated_value == 0 ) {  <new_line>
$global_normalized_calculated_value = '0' ;  <new_line>
} else {  <new_line>
$global_normalized_calculated_value = sprintf( "%f" , $global_calculated_value ) ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+\.[0-9]*[1-9])0+$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

if ( $global_normalized_calculated_value =~ /^(\-?[0-9]+)\.0*$/ ) {  <new_line>
$global_normalized_calculated_value = $1 ;  <new_line>
}  <new_line>

return $global_normalized_calculated_value ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-open-file-for-appending:
# no-space dashes-long-line  <new_line>
# function_parameterized__open_file_for_appending  <new_line>
<new_line>

sub function_parameterized__open_file_for_appending( ) {  <new_line>
my $local_file_name ;  <new_line>
$local_file_name = $_[ 0 ] ;  <new_line>

$global_action_result = 'trace_diagnostic__parameterized_open_file_for_appending__case_begin ' . $local_file_name . "\n" ;  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $local_file_name ) == $global_no ) {  <new_line>
$global_runtime_error_type = 'file_name_invalid_parameterized' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ) == $global_no ) {  <new_line>
$global_runtime_error_type = 'path_for_appending_invalid' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

$global_target_file_full_path = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end . $local_file_name ;  <new_line>

if ( open( INFILE_TEMP , '<' . $global_target_file_full_path ) ) {  <new_line>
close( INFILE_TEMP ) ;  <new_line>

} else {  <new_line>

if ( open( OUTFILE , '>>' . $global_target_file_full_path  ) ) {  <new_line>

$global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
print OUTFILE '' ;  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

}  <new_line>

}  <new_line>

if ( open( OUTFILE , '>>' . $global_target_file_full_path  ) ) {  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

$global_target_file_full_path = '' ;  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>
return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-open-file-for-reading:
# no-space dashes-long-line  <new_line>
# function_parameterized__open_file_for_reading  <new_line>
<new_line>

sub function_parameterized__open_file_for_reading( ) {  <new_line>
my $local_file_name ;  <new_line>
$local_file_name = $_[ 0 ] ;  <new_line>

# todo: avoid recursive loop; track when open file and don't allow open file if another is already open  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $local_file_name ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized__open_file_for_reading__case_file_name_for_reading_invalid ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized__open_file_for_reading__case_path_for_reading_invalid ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

$global_source_file_full_path = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end . $local_file_name ;  <new_line>

if ( open( INFILE , '<' . $global_source_file_full_path ) ) {  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

$global_action_result = 'dashrep_compiled_runtime_error__parameterized_open_file_for_reading__case_file_missing ' . $global_source_file_full_path ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-open-file-for-writing-new-file:
# no-space dashes-long-line  <new_line>
# function_parameterized__open_file_for_writing_new_file  <new_line>
<new_line>

sub function_parameterized__open_file_for_writing_new_file( ) {  <new_line>
my $local_file_name ;  <new_line>
$local_file_name = $_[ 0 ] ;  <new_line>

$global_action_result = 'trace_diagnostic__parameterized_open_file_for_writing_new_file__case_begin ' . $local_file_name . "\n" ;  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $local_file_name ) == $global_no ) {  <new_line>
$global_runtime_error_type = 'file_name_for_new_file_invalid' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ) == $global_no ) {  <new_line>
$global_runtime_error_type = 'path_for_writing_invalid' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

$global_target_file_full_path = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end . $local_file_name ;  <new_line>

if ( open( OUTFILE , '>' . $global_target_file_full_path ) ) {  <new_line>
close ( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

}  <new_line>

if ( open( OUTFILE , '>' . $global_target_file_full_path  ) ) {  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

$global_target_file_full_path = '' ;  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>
return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-remove-leading-trailing-spaces:
# no-space dashes-long-line  <new_line>
# function_parameterized__remove_leading_trailing_spaces  <new_line>
<new_line>

sub function_parameterized__remove_leading_trailing_spaces( ) {  <new_line>
$global_temporary_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $global_temporary_text ) ;  <new_line>
$global_character_pointer_begin = $global_length_of_text + 1 ;  <new_line>
$global_character_pointer_end = -1 ;  <new_line>

for ( $global_character_pointer = 1 ; $global_character_pointer <= $global_length_of_text ; $global_character_pointer ++ ) {  <new_line>
if ( substr( $global_temporary_text , $global_character_pointer - 1 , 1 ) ne ' ' ) {  <new_line>
$global_character_pointer_begin = $global_character_pointer ;  <new_line>
last ;  <new_line>
}  <new_line>
}  <new_line>

for ( $global_character_pointer = $global_length_of_text ; $global_character_pointer >= 1 ; $global_character_pointer -- ) {  <new_line>
if ( substr( $global_temporary_text , $global_character_pointer - 1 , 1 ) ne ' ' ) {  <new_line>
$global_character_pointer_end = $global_character_pointer ;  <new_line>
last ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_character_pointer_begin <= $global_character_pointer_end ) {
return substr( $global_temporary_text , $global_character_pointer_begin - 1 , $global_character_pointer_end - $global_character_pointer_begin + 1 ) ;  <new_line>
} else {  <new_line>
return '' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_empty( ) {  <new_line>

if ( $_[ 0 ] =~ /[^ ]/ ) {  <new_line>
return $global_no ;  <new_line>
} else {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-file-is-open-for-appending:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_file_is_open_for_appending  <new_line>
<new_line>

sub function_parameterized__yes_or_no_file_is_open_for_appending( ) {  <new_line>
my $local_file_name ;  <new_line>
$local_file_name = $_[ 0 ] ;  <new_line>

$global_action_result = 'trace_diagnostic__parameterized_yes_or_no_file_is_open_for_appending__case_begin ' . $local_file_name . "\n" ;  <new_line>

$global_output_filename = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end . $local_file_name ;  <new_line>

if ( index( $global_output_filename , ' ' ) >= 0 ) {  <new_line>
$global_runtime_error_type = 'file_name_invalid_contains_space' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

# todo: check if file exists, if not, then create empty file, then write protect it (while empty), then continue below  <new_line>

if ( open( OUTFILE , '>>' . $global_output_filename ) ) {  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

$global_output_filename = '' ;  <new_line>
return $global_no ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-file-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_file_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_file_name( ) {  <new_line>
my $local_file_name ;  <new_line>
$local_file_name = $_[ 0 ] ;  <new_line>

if ( index( $local_file_name , ' ' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_space ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '.' ) < 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_period_is_missing ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

$global_length_of_text = length( $local_file_name ) ;  <new_line>
if ( $global_length_of_text < 3 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_too_short ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '/' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_slash ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , "\\" ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_backslash ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '*' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_asterisk ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '&' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_ampersand ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '!' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_exclamation_point ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '@' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_at_sign ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '$' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_dollar_sign ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '%' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_percent_sign ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '^' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_caret ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '~' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_tilde ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '`' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_backtick ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '"' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_quotation_mark ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , "'" ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_apostrophe ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , ',' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_comma ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , ':' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_colon ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , ';' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_semicolon ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '=' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_equal_sign ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_file_name , '+' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_file_name__case_contains_plus_sign ' . $local_file_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

# $global_action_result = 'trace_diagnostic__parameterized_yes_or_no_file_name__case_valid_file_name ' . $local_file_name ;  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-folder-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_folder_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_folder_name( ) {  <new_line>
my $local_folder_name ;  <new_line>
$local_folder_name = $_[ 0 ] ;  <new_line>

if ( index( $local_folder_name , ' ' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_space ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '/' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_slash ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , "\\" ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_backslash ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '*' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_asterisk ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '&' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_ampersand ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '!' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_exclamation_point ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '@' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_at_sign ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '$' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_dollar_sign ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '%' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_percent_sign ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '^' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_caret ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '~' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_tilde ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '`' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_backtick ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '"' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_quotation_mark ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , "'" ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_apostrophe ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , ',' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_comma ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , ':' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_colon ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , ';' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_semicolon ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '=' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_equal_sign ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_folder_name , '+' ) >= 0 ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__parameterized_yes_or_no_folder_name__case_contains_plus_sign ' . $local_folder_name ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

# $global_action_result = 'trace_diagnostic__parameterized_yes_or_no_folder_name__case_valid_folder_name ' . $local_folder_name ;  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-integer:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_integer  <new_line>
<new_line>

sub function_parameterized__yes_or_no_integer( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^-?[0-9]+$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-contains-real-numbers:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_contains_real_numbers  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_contains_real_numbers( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end =~ /[^0-9\-\. ]/ ) {  <new_line>
return $global_no ;  <new_line>
} else {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-definition-not-empty:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_definition_not_empty  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_definition_not_empty( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

combee **** If the phrase is not defined, define it as empty **** comenn
if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end = '' ;  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( $global_no == &function_parameterized__yes_or_no_empty( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-phrase-name:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_phrase_name  <new_line>
<new_line>

sub function_parameterized__yes_or_no_phrase_name( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( index( $local_text , ' ' ) > -1 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '-' ) > 0 ) {  <new_line>

combee **** If the phrase is not defined, define it as empty **** comenn
if ( not( exists( code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end ) ) ) {  <new_line>
code-get-or-put-phrase-definition-begin $local_text code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-positive-integer:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_positive_integer  <new_line>
<new_line>

sub function_parameterized__yes_or_no_positive_integer( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^[0-9]+$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-real-number:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_real_number  <new_line>
<new_line>

sub function_parameterized__yes_or_no_real_number( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

if ( $local_text =~ /^(-?[0-9]+)(\.[0-9]*)?$/ ) {  <new_line>
return $global_yes ;  <new_line>
} else {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-valid-path-prefix:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_valid_path_prefix  <new_line>
<new_line>
# reminder: path "./" is valid, so period is OK  <new_line>
<new_line>

sub function_parameterized__yes_or_no_valid_path_prefix( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $local_text ) ;  <new_line>

if ( $global_length_of_text == 0 ) {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

if ( ( index( $local_text , '/' ) < 0 ) && ( index( $local_text , "\\" ) < 0 ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne "\\" ) && ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne '/' ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '*' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '&' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '!' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '@' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '$' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '%' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '^' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '~' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '`' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '"' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , "'" ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ',' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ';' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '=' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '+' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-valid-path:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_valid_path  <new_line>
<new_line>
# reminder: path "./" is valid, so period is OK  <new_line>
<new_line>

sub function_parameterized__yes_or_no_valid_path( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $local_text ) ;  <new_line>

if ( $global_length_of_text == 0 ) {  <new_line>
return $global_yes ;  <new_line>
}  <new_line>

if ( ( index( $local_text , '/' ) < 0 ) && ( index( $local_text , "\\" ) < 0 ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne "\\" ) && ( substr( $local_text , $global_length_of_text - 1 , 1 ) ne '/' ) ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '*' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '&' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '!' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '@' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '$' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '%' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '^' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '~' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '`' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '"' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , "'" ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ',' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ';' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '=' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '+' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-parameterized-yes-or-no-valid-url:
# no-space dashes-long-line  <new_line>
# function_parameterized__yes_or_no_valid_url  <new_line>
<new_line>

sub function_parameterized__yes_or_no_valid_url( ) {  <new_line>
my $local_text ;  <new_line>
$local_text = $_[ 0 ] ;  <new_line>

$global_length_of_text = length( $local_text ) ;  <new_line>

if ( $global_length_of_text == 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , ' ' ) >= 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

if ( index( $local_text , '/' ) < 0 ) {  <new_line>
return $global_no ;  <new_line>
}  <new_line>

return $global_yes ;  <new_line>

template-function-segment-ending
----
template-function-point-to-words-in-operand-whichever:
# no-space dashes-long-line  <new_line>
# function__point_to_words_in_operand_whichever  <new_line>
#  <new_line>
#  Input is $global_operand_whichever  <new_line>
#  Output is variable $global_word_pointer_operand_whichever and variable $global_operand_whichever_words array @global_word_begin_operand_whichever_at_word and array @global_word_length_operand_whichever_at_word where pointer into array is 1 for first word, etc.  <new_line>
#  Word counts start at one  <new_line>
#  Character pointer numbers start at zero  <new_line>
#  Note: \n = new line , \t = tab , \r = carriage return , \f = form feed  <new_line>
#  (Did not work: \v = vertical tab )  <new_line>
<new_line>

sub function__point_to_words_in_operand_whichever( ) {  <new_line>

# print "\n" . $global_operand_whichever . "\n" ;  <new_line>

$global_word_count_operand_whichever = 0 ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_whichever ) == $global_yes ) {  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_whichever } ) ) {  <new_line>
$global_operand_whichever_words = $global_dashrep_replacement{ $global_operand_whichever }  <new_line>
} else {  <new_line>
$global_operand_whichever_words = ''  <new_line>
}  <new_line>
} else {  <new_line>
$global_operand_whichever_words = ''  <new_line>
}  <new_line>

$global_length_of_text = length( $global_operand_whichever_words ) ;  <new_line>
$global_pointer_to_previous_whitespace = -1 ;  <new_line>
$global_pointer_to_next_whitespace = -1 ;  <new_line>
if ( $global_length_of_text < 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type ] = 1 ;  <new_line>
$global_pointer_to_whitespace_type[ $global_whitespace_type ] = -1 ;  <new_line>
}  <new_line>

while ( $global_pointer_to_next_whitespace <= $global_length_of_text ) {  <new_line>

if ( $global_yes_find_next_whitespace_of_type[ 1 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = index( $global_operand_whichever_words , ' ' , $global_pointer_to_whitespace_type[ 1 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 1 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 2 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = index( $global_operand_whichever_words , "\n" , $global_pointer_to_whitespace_type[ 2 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 2 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 2 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 3 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = index( $global_operand_whichever_words , "\t" , $global_pointer_to_whitespace_type[ 3 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 3 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 3 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 4 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = index( $global_operand_whichever_words , "\r" , $global_pointer_to_whitespace_type[ 4 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 4 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 4 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 5 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = index( $global_operand_whichever_words , "\f" , $global_pointer_to_whitespace_type[ 5 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 5 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 5 ] = 0 ;  <new_line>
}  <new_line>

$global_pointer_to_next_whitespace = $global_length_of_text + 99 ;  <new_line>
$global_whitespace_type_next = 0 ;  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
if ( $global_pointer_to_whitespace_type[ $global_whitespace_type ] < $global_pointer_to_next_whitespace ) {  <new_line>
$global_pointer_to_next_whitespace = $global_pointer_to_whitespace_type[ $global_whitespace_type ] ;  <new_line>
$global_whitespace_type_next = $global_whitespace_type ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace >= $global_length_of_text ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace > $global_pointer_to_previous_whitespace + 1 ) {  <new_line>
$global_word_count_operand_whichever ++ ;  <new_line>
$global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_next_whitespace - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">" . substr( $global_operand_whichever_words , $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] , $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] ) . "<" . "\n" ;  <new_line>

}  <new_line>

$global_pointer_to_previous_whitespace = $global_pointer_to_next_whitespace ;  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type_next ] = 1 ;  <new_line>

#  end of while loop  <new_line>
}  <new_line>

# print "prev " . $global_pointer_to_previous_whitespace . "  next " . $global_pointer_to_next_whitespace . "  length " . $global_length_of_text . "\n" ;  <new_line>

if ( ( $global_length_of_text - $global_pointer_to_previous_whitespace ) >= 2 ) {  <new_line>
$global_word_count_operand_whichever ++ ;  <new_line>
$global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] = $global_length_of_text - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">>" . substr( $global_operand_whichever_words , $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] , $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] ) . "<<" . "\n" ;  <new_line>
# print "position " . $global_word_begin_operand_whichever_at_word[ $global_word_count_operand_whichever ] . "  length " . $global_word_length_operand_whichever_at_word[ $global_word_count_operand_whichever ] . "\n" ;  <new_line>

}  <new_line>

template-function-segment-ending
----
template-function-point-to-words:
# no-space dashes-long-line  <new_line>
# function__point_to_words  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is variable $global_number_of_words and array @global_begin_position_for_word and array @global_length_of_word where pointer into array is 1 for first word, etc.  <new_line>
#  Word counts start at one  <new_line>
#  Character pointer numbers start at zero  <new_line>
#  Note: \n = new line , \t = tab , \r = carriage return , \f = form feed  <new_line>
#  (Did not work: \v = vertical tab )  <new_line>
<new_line>

sub function__point_to_words( ) {  <new_line>

# print "\n" . $global_source_text . "\n" ;  <new_line>

$global_number_of_words = 0 ;  <new_line>
$global_length_of_text = length( $global_source_text ) ;  <new_line>
$global_pointer_to_previous_whitespace = -1 ;  <new_line>
$global_pointer_to_next_whitespace = -1 ;  <new_line>
if ( $global_length_of_text < 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type ] = 1 ;  <new_line>
$global_pointer_to_whitespace_type[ $global_whitespace_type ] = -1 ;  <new_line>
}  <new_line>

while ( $global_pointer_to_next_whitespace <= $global_length_of_text ) {  <new_line>

if ( $global_yes_find_next_whitespace_of_type[ 1 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = index( $global_source_text , ' ' , $global_pointer_to_whitespace_type[ 1 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 1 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 1 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 1 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 2 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = index( $global_source_text , "\n" , $global_pointer_to_whitespace_type[ 2 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 2 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 2 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 2 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 3 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = index( $global_source_text , "\t" , $global_pointer_to_whitespace_type[ 3 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 3 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 3 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 3 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 4 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = index( $global_source_text , "\r" , $global_pointer_to_whitespace_type[ 4 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 4 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 4 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 4 ] = 0 ;  <new_line>
}  <new_line>
if ( $global_yes_find_next_whitespace_of_type[ 5 ] == 1 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = index( $global_source_text , "\f" , $global_pointer_to_whitespace_type[ 5 ] + 1 ) ;  <new_line>
if ( $global_pointer_to_whitespace_type[ 5 ] < 0 ) {  <new_line>
$global_pointer_to_whitespace_type[ 5 ] = $global_length_of_text ;  <new_line>
}  <new_line>
$global_yes_find_next_whitespace_of_type[ 5 ] = 0 ;  <new_line>
}  <new_line>

$global_pointer_to_next_whitespace = $global_length_of_text + 99 ;  <new_line>
$global_whitespace_type_next = 0 ;  <new_line>

for ( $global_whitespace_type = 1 ; $global_whitespace_type <= 5 ; $global_whitespace_type ++ ) {  <new_line>
if ( $global_pointer_to_whitespace_type[ $global_whitespace_type ] < $global_pointer_to_next_whitespace ) {  <new_line>
$global_pointer_to_next_whitespace = $global_pointer_to_whitespace_type[ $global_whitespace_type ] ;  <new_line>
$global_whitespace_type_next = $global_whitespace_type ;  <new_line>
}  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace >= $global_length_of_text ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $global_pointer_to_next_whitespace > $global_pointer_to_previous_whitespace + 1 ) {  <new_line>
$global_number_of_words ++ ;  <new_line>
$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_pointer_to_next_whitespace - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">" . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "<" . "\n" ;  <new_line>

}  <new_line>

$global_pointer_to_previous_whitespace = $global_pointer_to_next_whitespace ;  <new_line>
$global_yes_find_next_whitespace_of_type[ $global_whitespace_type_next ] = 1 ;  <new_line>

#  end of while loop  <new_line>
}  <new_line>

# print "prev " . $global_pointer_to_previous_whitespace . "  next " . $global_pointer_to_next_whitespace . "  length " . $global_length_of_text . "\n" ;  <new_line>

if ( ( $global_length_of_text - $global_pointer_to_previous_whitespace ) >= 2 ) {  <new_line>
$global_number_of_words ++ ;  <new_line>
$global_begin_position_for_word[ $global_number_of_words ] = $global_pointer_to_previous_whitespace + 1 ;  <new_line>
$global_length_of_word[ $global_number_of_words ] = $global_length_of_text - $global_pointer_to_previous_whitespace - 1 ;  <new_line>

# print ">>" . substr( $global_source_text , $global_begin_position_for_word[ $global_number_of_words ] , $global_length_of_word[ $global_number_of_words ] ) . "<<" . "\n" ;  <new_line>
# print "position " . $global_begin_position_for_word[ $global_number_of_words ] . "  length " . $global_length_of_word[ $global_number_of_words ] . "\n" ;  <new_line>

}  <new_line>

template-function-segment-ending
----
template-function-prepend-text-no-space:
# no-space dashes-long-line  <new_line>

sub function__prepend_text_no_space( ) {  <new_line>
$global_action_name_with_underscores = 'prepend_text_no_space' ; <new_line>

template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end ne '' ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_source_text . ' ' . code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_source_text ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-prepend-text:
# no-space dashes-long-line  <new_line>

sub function__prepend_text( ) {  <new_line>
$global_action_name_with_underscores = 'prepend_text' ; <new_line>

template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end ne '' ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_source_text . ' ' . code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end ;  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_source_text ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-put-listed-phrase-definitions-into-phrase:
# no-space dashes-long-line  <new_line>

sub function__put_listed_definitions_into_phrase( ) {  <new_line>

$global_action_result = 'todo__not_yet_written' ;  <new_line>

template-function-segment-ending
----
template-function-remove-extra-spaces:
# no-space dashes-long-line  <new_line>
# function__remove_extra_spaces  <new_line>
#  <new_line>
#  Input is $global_source_text  <new_line>
#  Output is $global_target_text  <new_line>
<new_line>

sub function__remove_extra_spaces( ) {  <new_line>
$global_default_text = $global_source_text ;  <new_line>

template-function-segment-if-zero-words-return-default-text

$global_target_text = substr( $global_source_text , $global_begin_position_for_word[ 1 ] , $global_length_of_word[ 1 ] ) ;  <new_line>
if ( $global_number_of_words == 1 ) {  <new_line>
return '' ;  <new_line>
}  <new_line>

for ( $global_word_pointer_numeric = 2 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>
$global_target_text .= ' ' . runtime-code-word-within-source-text ;  <new_line>
}  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-rename-file:
# no-space dashes-long-line  <new_line>

sub function__rename_file( ) {  <new_line>
$global_action_name_with_underscores = 'rename_file' ; <new_line>
template-check-operand-one-input-file-exists
template-check-operand-one-is-file-name

template-return-if-no-permission-to-delete-overwrite-files

# save some values because function yes_or_no_file_exists is used for non hyphen-here standard purposes here  <new_line>
$global_source_file_name_saved = $global_source_file_name ;  <new_line>
$global_target_file_name_saved = $global_target_file_name ;  <new_line>
$global_source_path_prefix_saved = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end ;  <new_line>
$global_target_path_prefix_saved = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ;  <new_line>

# ensure source file exists  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end = $global_target_path_prefix_saved ;  <new_line>
&function__yes_or_no_file_exists( ) ;  <new_line>
if ( $global_action_result eq 'no') {  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end = $global_source_path_prefix_saved ;  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__rename_file__case_source_file_invalid_name_or_not_exists ' . $global_source_file_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

# ensure target file does not exist  <new_line>
$global_source_file_name = $global_target_file_name_saved ;  <new_line>
&function__yes_or_no_file_exists( ) ;  <new_line>
code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end = $global_source_path_prefix_saved ;  <new_line>
if ( $global_action_result eq 'yes') {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__rename_file__case_target_file_already_exists ' . $global_target_file_name ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_source_file_full_path = $global_target_path_prefix_saved . $global_source_file_name_saved ;  <new_line>
rename( $global_source_file_full_path , $global_target_file_name_saved ) ;  <new_line>
$global_action_result = '' ;  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-segment-ending:
#  end of function  <new_line>
}  <new_line>
<new_line>
<new_line>
----
template-function-segment-if-zero-words-return-default-text:
# begin code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
&function__point_to_words( ) ;  <new_line>
if ( $global_number_of_words == 0 ) {  <new_line>
$global_target_text = $global_default_text ;  <new_line>
return $global_default_text ;  <new_line>
}  <new_line>
# end code generated from "template<character_hyphen>function<character_hyphen>segment<character_hyphen>if<character_hyphen>zero<character_hyphen>words<character_hyphen>return<character_hyphen>default<character_hyphen>text"  <new_line>
----
template-function-set-file-permission-private-but-executable:
# no-space dashes-long-line  <new_line>

sub function__set_file_permission_private_but_executable( ) {  <new_line>
$global_action_name_with_underscores = 'set_file_permission_private_but_executable' ; <new_line>
template-return-if-no-permission-to-delete-overwrite-files
template-check-operand-one-is-file-name

if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private_but_executable__case_invalid_file_name ' . $global_operand_one ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private_but_executable__case_invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_operand_one ;  <new_line>

$global_action_result = '' ;  <new_line>
if ( not( chmod( $global_file_public_read_protection_mode , $global_target_file_full_path ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private_but_executable__case_not_successful ' . $global_target_file_full_path ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-set-file-permission-private:
# no-space dashes-long-line  <new_line>

sub function__set_file_permission_private( ) {  <new_line>
$global_action_name_with_underscores = 'set_file_permission_private' ; <new_line>
template-return-if-no-permission-to-delete-overwrite-files
template-check-operand-one-is-file-name

if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private__case_invalid_file_name ' . $global_operand_one ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private__case_invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_operand_one ;  <new_line>

$global_action_result = '' ;  <new_line>
if ( not( chmod( $global_file_private_protection_mode , $global_target_file_full_path ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_private__case_not_successful ' . $global_target_file_full_path ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-set-file-permission-public-read:
# no-space dashes-long-line  <new_line>

sub function__set_file_permission_public_read( ) {  <new_line>
$global_action_name_with_underscores = 'set_file_permission_public_read' ; <new_line>
template-return-if-no-permission-to-delete-overwrite-files
template-check-operand-one-is-file-name

if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_public_read__case_invalid_file_name ' . $global_operand_one ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here writing' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_target_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_public_read__case_invalid_path_prefix' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_target_file_full_path = $global_target_path_prefix . $global_operand_one ;  <new_line>

$global_action_result = '' ;  <new_line>
if ( not( chmod( $global_file_public_read_protection_mode , $global_target_file_full_path ) ) ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__set_file_permission_public_read__case_not_successful ' . $global_target_file_full_path ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-size-of-file:
# no-space dashes-long-line  <new_line>

sub function__size_of_file( ) {  <new_line>
$global_action_name_with_underscores = 'size_of_file' ; <new_line>
template-check-operand-one-is-file-name

$global_action_result = '0' ;  <new_line>
$global_source_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_source_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__size_of_file__case_invalid_path_prefix ' . $global_source_path_prefix ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'dashrep_compiled_runtime_error__size_of_file__case_invalid_file_name ' . $global_operand_one ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_source_file_full_path = $global_source_path_prefix . $global_operand_one ;  <new_line>

$global_action_result = sprintf( "%d" , ( stat( $global_source_file_full_path ) )[7] ) ;  <new_line>

template-function-segment-ending
----
template-function-split-epoch-seconds-into-named-components-for-zero-meridian:
# no-space dashes-long-line  <new_line>

sub function__split_epoch_seconds_into_named_components_for_zero_meridian( ) {  <new_line>
$global_action_name_with_underscores = 'split_epoch_seconds_into_named_components_for_zero_meridian' ; <new_line>
template-check-operand-one-is-positive-integer

$global_action_result = '' ;  <new_line>
( $global_second_time , $global_minute , $global_hour , $global_day_of_month , $global_month_number , $global_year , $global_weekday , $global_day_of_year , $global_extra_info ) = gmtime( $global_operand_one ) ;  <new_line>
$global_month_number ++ ;  <new_line>
$global_year += 1900 ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>second" } = sprintf( "%d" , $global_second_time ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>minute" } = sprintf( "%d" , $global_minute ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>hour" } = sprintf( "%d" , $global_hour ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>month" } = sprintf( "%d" , $global_day_of_month ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>month<character_hyphen>number" } = sprintf( "%d" , $global_month_number ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>year" } = sprintf( "%d" , $global_year ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>week" } = sprintf( "%d" , $global_weekday ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>year" } = sprintf( "%d" , $global_day_of_year ) ;  <new_line>

template-function-segment-ending
----
template-function-split-epoch-seconds-into-named-components:
# no-space dashes-long-line  <new_line>

sub function__split_epoch_seconds_into_named_components( ) {  <new_line>
$global_action_name_with_underscores = 'split_epoch_seconds_into_named_components' ; <new_line>
template-check-operand-one-is-positive-integer

$global_action_result = '' ;  <new_line>
( $global_second_time , $global_minute , $global_hour , $global_day_of_month , $global_month_number , $global_year , $global_weekday , $global_day_of_year , $global_extra_info ) = localtime( $global_operand_one ) ;  <new_line>
$global_month_number ++ ;  <new_line>
$global_year += 1900 ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>second" } = sprintf( "%d" , $global_second_time ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>minute" } = sprintf( "%d" , $global_minute ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>hour" } = sprintf( "%d" , $global_hour ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>month" } = sprintf( "%d" , $global_day_of_month ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>month<character_hyphen>number" } = sprintf( "%d" , $global_month_number ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>year" } = sprintf( "%d" , $global_year ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>week" } = sprintf( "%d" , $global_weekday ) ;  <new_line>
$global_dashrep_replacement{ "time<character_hyphen>day<character_hyphen>of<character_hyphen>year" } = sprintf( "%d" , $global_day_of_year ) ;  <new_line>

template-function-segment-ending
----
template-function-trace-show:
# no-space dashes-long-line  <new_line>

sub function__trace_show( ) {  <new_line>
# $global_action_name_with_underscores = 'trace_show' ; <new_line>
$global_action_result = '' ;  <new_line>
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
print TRACE_OUT 'trace text:' . "\n" . $global_operand_one . "\n" . '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' . "\n" ;  <new_line>
} elsif ( exists( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ) ) {  <new_line>
print TRACE_OUT $global_operand_one . ':' . "\n" . code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end . "\n" . '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' . "\n" ;  <new_line>
} else {  <new_line>
print TRACE_OUT $global_operand_one . ':' . "\n" . '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' . "\n" ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-write-dashrep-definitions-listed-in-phrase-to-file:
# no-space dashes-long-line  <new_line>

sub function__write_dashrep_definitions_listed_in_phrase_to_file( ) {  <new_line>
$global_action_name_with_underscores = 'write_dashrep_definitions_listed_in_phrase_to_file' ; <new_line>
template-return-if-no-permission-to-delete-overwrite-files
template-check-operand-one-is-phrase-not-empty
$global_target_file_name = $global_operand_two ;  <new_line>
template-open-file-for-writing-new-file

$global_action_result = '' ;  <new_line>
@global_list_of_phrases = split( /[ \n\r]+/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here all hyphen-here begin' } ) ) {  <new_line>
    $global_all_defs_begin = '[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here begin<character_hyphen>]' . "\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_all_defs_begin = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here all hyphen-here end' } ) ) {  <new_line>
    $global_all_defs_end = '[<character_hyphen>export hyphen-here defs hyphen-here all hyphen-here end<character_hyphen>]' . "\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_all_defs_end = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here phrase hyphen-here begin' } ) ) {  <new_line>
    $global_phrase_begin = '[<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here begin<character_hyphen>] ' ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_phrase_begin = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here phrase hyphen-here end' } ) ) {  <new_line>
    $global_phrase_end = ' [<character_hyphen>export hyphen-here defs hyphen-here phrase hyphen-here end<character_hyphen>]' . "\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_phrase_end = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here def hyphen-here begin' } ) ) {  <new_line>
    $global_def_begin = '[<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here begin<character_hyphen>] ' ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_def_begin = '' ;  <new_line>
}  <new_line>
if ( exists( $global_dashrep_replacement{ 'export hyphen-here defs hyphen-here def hyphen-here end' } ) ) {  <new_line>
    $global_def_end = ' [<character_hyphen>export hyphen-here defs hyphen-here def hyphen-here end<character_hyphen>]' . "\n\n" ;  <new_line>
} else  <new_line>
{  <new_line>
    $global_def_end = '' ;  <new_line>
}  <new_line>

$global_counter = 0 ;  <new_line>

foreach $global_phrase_name ( @global_list_of_phrases ) {  <new_line>
    if ( ( defined( $global_phrase_name ) ) && ( $global_phrase_name =~ /[^ ]/ ) && ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) && ( $global_phrase_name ne 'four hyphen-here hyphens' ) ) {  <new_line>
        print OUTFILE $global_phrase_name . "\n" ;  <new_line>
        $global_counter ++ ;  <new_line>
    }  <new_line>
}  <new_line>

$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

template-function-segment-ending
----
template-function-write-gathered-listed-items-to-end-of-file:
# no-space dashes-long-line  <new_line>

sub function__write_gathered_listed_items_to_end_of_file( ) {  <new_line>
$global_action_name_with_underscores = 'write_gathered_listed_items_to_end_of_file' ; <new_line>
template-check-operand-one-is-phrase-not-empty
$global_target_file_name = $global_operand_two ;  <new_line>
template-open-file-for-appending

$global_action_result = '' ;  <new_line>
$global_accumulated_text = '' ;  <new_line>
$global_entry_begin = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here begin' } ;  <new_line>
$global_entry_end = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here end' } ;  <new_line>
$global_entry_unique = $global_dashrep_replacement{ 'dashrep hyphen-here gather hyphen-here tag hyphen-here unique' } ;  <new_line>
@global_list_of_tag_names = ( ) ;  <new_line>
if ( ( exists( $global_dashrep_replacement{ 'dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence' } ) ) && ( $global_dashrep_replacement{ 'dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence' } =~ /[^ ]/ ) ) {  <new_line>
    @global_list_of_tag_names = split( /[ \n\r]+/ , $global_dashrep_replacement{ 'dashrep hyphen-here gathered hyphen-here tag hyphen-here names hyphen-here in hyphen-here sequence' } ) ;  <new_line>
}  <new_line>
@global_list_of_unique_values = ( ) ;  <new_line>
if ( exists( $global_dashrep_replacement{ $global_operand_one } ) ) {  <new_line>
    @global_list_of_unique_values = split( /[ \n\r]+/ , $global_dashrep_replacement{ $global_operand_one } ) ;  <new_line>
}  <new_line>
foreach $global_unique_value ( @global_list_of_unique_values ) {  <new_line>
    $global_accumulated_text .= $global_entry_begin . "\n" ;  <new_line>
    $global_accumulated_text .= $global_entry_unique . ' ' . $global_unique_value . "\n" ;  <new_line>
    foreach $global_tag_name ( @global_list_of_tag_names ) {  <new_line>
        $global_phrase_name = $global_tag_name . '<character_hyphen>value hyphen-here for hyphen-here unique hyphen-here id<character_hyphen>' . $global_unique_value ;  <new_line>
        if ( exists( $global_dashrep_replacement{ $global_phrase_name } ) ) {  <new_line>
            $global_accumulated_text .= $global_tag_name . ' ' . $global_dashrep_replacement{ $global_phrase_name } . "\n" ;  <new_line>
        }  <new_line>
    }  <new_line>
    $global_accumulated_text .= $global_entry_end . "\n\n" ;  <new_line>
}  <new_line>
print OUTFILE $global_accumulated_text . "\n" ;  <new_line>
$global_yes_or_no_file_opened_for_writing = $global_no ;  <new_line>
close( OUTFILE ) ;  <new_line>

template-runtime-code-protect-target-file

template-function-segment-ending
----
template-function-xml-move-attributes-into-tag-elements:
# no-space dashes-long-line  <new_line>

sub function__xml_move_attributes_into_tag_elements( ) {  <new_line>
$global_action_name_with_underscores = 'xml_move_attributes_into_tag_elements' ; <new_line>
template-check-operand-one-is-phrase-name

$global_action_result = '' ;  <new_line>
$global_phrase_being_edited = $global_operand_one ;  <new_line>
$global_text_being_edited = $global_dashrep_replacement{ $global_phrase_being_edited } ;  <new_line>
while( $global_text_being_edited =~ / *\/> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *\/> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4 \/>/sg ;  <new_line>
#    $global_phrase_usage_count_for_phrase_number[ 1 ] ++ ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit - 100 ) {  <new_line>
        $global_action_result = 'dashrep_runtime_error__xml_move_attributes_into_tag_elements__case_endless_loop' . "\n" ;  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
while( $global_text_being_edited =~ / *> *<((attribute)|(specify)) ([^>]+)>/sg ) {  <new_line>
    $global_text_being_edited =~ s/ *> *<((attribute)|(specify)) (([^"<>]*"[^"]*"[^"<>]*)+?)>/ $4>/sg ;  <new_line>
#    $global_phrase_usage_count_for_phrase_number[ 1 ] ++ ;  <new_line>
    if ( $global_endless_loop_counter > $global_endless_loop_counter_limit - 100 ) {  <new_line>
        $global_action_result = 'dashrep_runtime_error__xml_move_attributes_into_tag_elements__case_endless_loop' . "\n";  <new_line>
        last ;  <new_line>
    }  <new_line>
    $global_endless_loop_counter ++ ;  <new_line>
}  <new_line>
$global_dashrep_replacement{ $global_phrase_being_edited } = $global_text_being_edited ;  <new_line>

template-function-segment-ending
----
template-function-yes-if-all-yes:
# no-space dashes-long-line  <new_line>

sub function__yes_if_all_yes( ) {  <new_line>
# $global_action_name_with_underscores = 'yes_if_all_yes' ; <new_line>
$global_concatenated_all_operands_modified = ' ' . $global_concatenated_all_operands . ' ' ;  <new_line>
$accumulated_remaining_text = '' ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>

while ( $pointer_to_next_match > 0 ) {  <new_line>
$accumulated_remaining_text .= substr( $global_concatenated_all_operands_modified , 0 , ( $pointer_to_next_match - 1 ) ) ;  <new_line>
$global_concatenated_all_operands_modified = substr( $global_concatenated_all_operands_modified , ( $pointer_to_next_match + 3 ) ) ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>
}  <new_line>

$accumulated_remaining_text .= ' ' . $global_concatenated_all_operands_modified ;  <new_line>
$accumulated_remaining_text = &function_parameterized__remove_leading_trailing_spaces( $accumulated_remaining_text ) ;  <new_line>

if ( length( $accumulated_remaining_text ) == 0 ) {  <new_line>
$global_action_result = 'yes' ;  <new_line>
} else {  <new_line>
$global_action_result = 'no' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-yes-or-no-file-exists:
# no-space dashes-long-line  <new_line>

sub function__yes_or_no_file_exists( ) {  <new_line>
$global_action_name_with_underscores = 'yes_or_no_file_exists' ; <new_line>
template-check-operand-one-is-file-name

$global_action_result = 'no' ;  <new_line>
$global_source_path_prefix = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end ;  <new_line>

if ( &function_parameterized__yes_or_no_valid_path_prefix( $global_source_path_prefix ) == $global_no ) {  <new_line>
$global_action_result = 'no' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_file_name( $global_operand_one ) == $global_no ) {  <new_line>
$global_action_result = 'no' ;  <new_line>
return '' ;  <new_line>
}  <new_line>

$global_source_file_full_path = $global_source_path_prefix . $global_operand_one ;  <new_line>

if ( open( INFILE , '<' . $global_source_file_full_path ) ) {  <new_line>
    $global_yes_or_no_file_opened_for_writing = $global_yes ;  <new_line>
    $global_action_result = 'yes' ;  <new_line>
}  <new_line>
$global_yes_or_no_file_opened_for_reading = $global_no ;  <new_line>
close( INFILE ) ;  <new_line>

return '' ;  <new_line>

template-function-segment-ending
----
template-function-yes-or-no-folder-exists:
# no-space dashes-long-line  <new_line>

sub function__yes_or_no_folder_exists( ) {  <new_line>
$global_action_name_with_underscores = 'yes_or_no_folder_exists' ; <new_line>
template-check-operand-one-is-folder-name

$global_action_result = 'no' ;  <new_line>
$global_target_file_name = code-get-or-put-phrase-definition-begin 'dashrep hyphen-here path hyphen-here prefix hyphen-here for hyphen-here file hyphen-here reading' code-get-or-put-phrase-definition-end . $global_operand_one ;  <new_line>
if ( index( $global_target_file_name , ' ' ) < 0 ) {  <new_line>
    if ( <character_hyphen>d $global_target_file_name ) {  <new_line>
        $global_action_result = "yes" ;  <new_line>
    }  <new_line>
}  <new_line>
return '' ;  <new_line>

template-function-segment-ending
----
template-function-yes-or-no-same-two-phrase-definitions:
# no-space dashes-long-line  <new_line>

sub function__yes_or_no_same_two_phrase_definitions( ) {  <new_line>
$global_action_name_with_underscores = 'yes_or_no_same_two_phrase_definitions' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

if ( code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end eq code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-yes-or-no-word-is-in-phrase:
# no-space dashes-long-line  <new_line>

sub function__yes_or_no_word_is_in_phrase( ) {  <new_line>
$global_action_name_with_underscores = 'yes_or_no_word_is_in_phrase' ; <new_line>
template-check-operand-one-is-phrase-name
template-check-operand-two-is-phrase-name

$global_action_result = ' ' ;  <new_line>
$global_word_to_find = $global_operand_one ;  <new_line>
$global_temp_text = $global_dashrep_replacement{ $global_operand_two } ;  <new_line>
$global_temp_text =~ s/\n/ /sg ;  <new_line>
$global_temp_text =~ s/^ +// ;  <new_line>
$global_temp_text =~ s/ +$// ;  <new_line>
@global_list = split( / +/ , $global_temp_text ) ;  <new_line>
$global_list_length = $#global_list + 1 ;  <new_line>
$global_action_result = 'no' ;  <new_line>
if ( $global_list_length >= 1 ) {  <new_line>
    $global_last_pointer = 0 ;  <new_line>
    for ( $global_pointer = 1 ; $global_pointer <= $global_list_length ; $global_pointer ++ ) {  <new_line>
        if ( $global_list[ $global_pointer - 1 ] eq $global_word_to_find ) {  <new_line>
            $global_action_result = 'yes' ;  <new_line>
            last ;  <new_line>
        }  <new_line>
    }  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-zero-one-multiple:
# no-space dashes-long-line  <new_line>

sub function__zero_one_multiple( ) {  <new_line>
$global_action_name_with_underscores = 'zero_one_multiple' ; <new_line>
template-check-operand-one-is-positive-integer

$global_action_result = 'multiple' ;  <new_line>
if ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) <= 0 ) {  <new_line>
    $global_action_result = 'zero' ;  <new_line>
} elsif ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) == 1 ) {  <new_line>
    $global_action_result = 'one' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-function-zero-or-nonzero:
# no-space dashes-long-line  <new_line>

sub function__zero_or_nonzero( ) {  <new_line>
$global_action_name_with_underscores = 'zero_or_nonzero' ; <new_line>
template-check-operand-one-is-integer

$global_action_result = 'nonzero' ;  <new_line>
if ( &function_parameterized__convert_numeric_text_into_numeric_value( $global_operand_one ) == 0 ) {  <new_line>
    $global_action_result = 'zero' ;  <new_line>
}  <new_line>

template-function-segment-ending
----
template-get-phrase-contents-from-operand-one-and-check-contains-integer:
$global_phrase_contents = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
if ( &function_parameterized__yes_or_no_empty( $global_phrase_contents ) == $global_yes ) {  <new_line>
    $global_phrase_contents = '0' ;  <new_line>
}  <new_line>

if ( &function_parameterized__yes_or_no_integer( $global_phrase_contents ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_not_integer ' . $global_phrase_contents . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
----
template-open-file-for-appending:
if ( $global_yes_or_no_file_opened_for_writing == $global_no ) {  <new_line>
if ( &function_parameterized__open_file_for_appending( $global_target_file_name ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_cannot_open_file_for_appending ' . $global_target_file_name . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
}  <new_line>
----
template-open-file-for-reading:
if ( $global_yes_or_no_file_opened_for_reading == $global_no ) {  <new_line>
if ( &function_parameterized__open_file_for_reading( $global_source_file_name ) == $global_no ) {  <new_line>
    $global_action_result = 'dashrep_compiled_runtime_error__' . $global_action_name_with_underscores . '__case_cannot_open_file_for_reading ' . $global_source_file_name . ' ' ;  <new_line>
    return '' ;  <new_line>
}  <new_line>
}  <new_line>
----
template-runtime-code-for-action-append-new-line:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
    runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__append_new_line__case_not_phrase ' . $global_operand_one . ' ' ;  <new_line>
} else {  <new_line>
    code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end .= "\n" ;  <new_line>
    runtime-code-storage-item-result = ' ' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-append-text-no-space:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__append_text_no_space__case_not_phrase ' . $global_operand_one . ' ' ;  <new_line>
} elsif ( &function_parameterized__yes_or_no_phrase_name( $global_operand_two ) == $global_no ) {  <new_line>
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__append_text_no_space__case_not_phrase ' . $global_operand_two . ' ' ;  <new_line>
} else {  <new_line>

code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end .= code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-append-text:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__append_text__case_not_phrase ' . $global_operand_one . ' ' ;  <new_line>
} elsif ( &function_parameterized__yes_or_no_phrase_name( $global_operand_two ) == $global_no ) {  <new_line>
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__append_text__case_not_phrase ' . $global_operand_two . ' ' ;  <new_line>
} else {  <new_line>

$global_source_text = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>
$global_target_text = runtime-code-for-operand-number-two ;  <new_line>

if ( code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end ne '' ) {  <new_line>
code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end .= ' ' ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_target_text code-get-or-put-phrase-definition-end .= $global_source_text ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-and-replace:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name
check-operand-two-is-phrase-name
check-operand-three-is-phrase-name
check-operand-four-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
$global_length_of_text_source = length( $global_source_text ) ;  <new_line>
$global_string_to_be_replaced = code-get-or-put-phrase-definition-begin $global_operand_three code-get-or-put-phrase-definition-end ;  <new_line>
$global_length_of_string_to_be_replaced = length( $global_string_to_be_replaced ) ;  <new_line>
$global_text_to_insert = code-get-or-put-phrase-definition-begin $global_operand_four code-get-or-put-phrase-definition-end ;  <new_line>
$global_character_pointer_begin = 0 ;  <new_line>
$global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>
$global_target_text = '' ;  <new_line>

while ( $global_character_pointer_end >= -1 ) {  <new_line>
$global_length_of_text_segment = $global_character_pointer_end - $global_character_pointer_begin + 1 ;  <new_line>

if ( $global_length_of_text_segment > 0 ) {  <new_line>
$global_target_text .= substr( $global_source_text , $global_character_pointer_begin , $global_length_of_text_segment ) ;  <new_line>
}  <new_line>

$global_target_text .= $global_text_to_insert ;  <new_line>
$global_character_pointer_begin = $global_character_pointer_end + $global_length_of_string_to_be_replaced + 1 ;  <new_line>
$global_character_pointer_end = index( $global_source_text , $global_string_to_be_replaced , $global_character_pointer_begin ) - 1 ;  <new_line>

}  <new_line>

if ( $global_character_pointer_begin < $global_length_of_text_source ) {  <new_line>
$global_target_text .= substr( $global_source_text , $global_character_pointer_begin ) ;  <new_line>
}  <new_line>

code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-append-file-to-file:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_target_file_name = runtime-code-for-operand-number-two ;  <new_line>
open-file-for-appending
$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
&function__copy_append_file_to_file( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-definition-of-named-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name
check-operand-two-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_phrase_name = &function_parameterized__remove_leading_trailing_spaces( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_phrase_name ) == $global_yes ) {  <new_line>
if ( exists( code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end ) ) {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = code-get-or-put-phrase-definition-begin $global_phrase_name code-get-or-put-phrase-definition-end  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>
} else {  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = '' ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = '' ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-from-columns-in-file-to-column-lists:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>
&function__copy_from_columns_in_file_to_column_lists( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-from-columns-in-file-to-named-phrases:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>

&function__copy_from_columns_in_file_to_named_phrases( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-from-file-to-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
&function__copy_from_file_to_phrase( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-from-phrase-append-to-file:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_target_file_name = runtime-code-for-operand-number-two ;  <new_line>
open-file-for-appending

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
&function__copy_from_phrase_append_to_file( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-copy-text:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
    runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__copy_text__case_not_phrase ' . $global_operand_one . ' ' ;  <new_line>
} elsif ( &function_parameterized__yes_or_no_phrase_name( $global_operand_two ) == $global_no ) {  <new_line>
    runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__copy_text__case_not_phrase ' . $global_operand_two . ' ' ;  <new_line>
} else {  <new_line>
    $global_target_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>
    code-get-or-put-phrase-definition-begin $global_operand_two code-get-or-put-phrase-definition-end = $global_target_text ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-executable-phrase-begin:
template-runtime-code-for-every-action-begin

template-runtime-code-check-for-endless-loop

$global_saved_accumulator_pointer_at_recursion_location[ current-accumulator-pointer ] = $global_accumulator_pointer ;  <new_line>
# $saved_accumulator_pointer = $global_accumulator_pointer ;  <new_line>

$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] = 0 ;  <new_line>
----
template-runtime-code-for-action-executable-phrase-end:
runtime-code-storage-item-result = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>

$global_accumulator_pointer = $global_saved_accumulator_pointer_at_recursion_location[ current-accumulator-pointer ] ;  <new_line>
# $global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-executable-phrase-without-fen:
template-runtime-code-for-action-executable-phrase-begin

&function_compiled__<dashrep_placeholder_code_for_executable_phrase_with_underscores>( ) ;  <new_line>

template-runtime-code-for-action-executable-phrase-end
----
template-runtime-code-for-action-executable-phrase:
template-runtime-code-for-action-executable-phrase-begin

$global_phrase_name_currently_executing = '<dashrep_placeholder_phrase_being_defined>' ;  <new_line>
$global_phrase_name_to_match = <dashrep_placeholder_code_for_executable_phrase> ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>

template-runtime-code-for-action-executable-phrase-end
----
template-runtime-code-for-action-expand-text:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name
check-operand-two-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_saved_accumulator_pointer_at_recursion_location[ current-accumulator-pointer ] = $global_accumulator_pointer ;  <new_line>
# $saved_accumulator_pointer = $global_accumulator_pointer ;  <new_line>

$global_accumulator_pointer = current-accumulator-pointer ;  <new_line>
$global_accumulator[ $global_accumulator_pointer ] = '' ;  <new_line>
$global_count_of_items_appended_to_accumulator[ $global_accumulator_pointer ] = 0 ;  <new_line>
$global_phrase_name_currently_executing = '<dashrep_placeholder_phrase_being_defined>' ;  <new_line>
$global_phrase_name_to_match = runtime-code-for-operand-number-one ;  <new_line>
&function_branch_based_on_phrase_name( ) ;  <new_line>
$global_target_text = $global_accumulator[ $global_accumulator_pointer ] ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = &dashrep_expand_phrases( $global_target_text ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

combee ****
# print "fully expanded: " . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end . "\n" ;  <new_line>
**** comenn

$global_accumulator_pointer = $global_saved_accumulator_pointer_at_recursion_location[ current-accumulator-pointer ] ;  <new_line>
# $global_accumulator_pointer = $saved_accumulator_pointer ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-find-line-in-file-that-begins-with-text:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_source_file_name = runtime-code-for-operand-number-one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__find_line_in_file_that_begins_with_text( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-find-lines-in-file-that-begin-with-any-listed-word:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__find_lines_in_file_that_begin_with_any_listed_word( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-find-lines-in-file-that-begin-with-any-two-words-listed:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__find_lines_in_file_that_begin_with_any_two_words_listed( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-gather-from-tagged-file-one-entry:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__gather_from_tagged_file_one_entry( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-gather-tagged-info-from-file:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__gather_tagged_info_from_file( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-generate-list-of-files-in-current-read-directory:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__generate_list_of_files_in_current_read_directory( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-generate-list-of-folders-in-current-read-directory:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__generate_list_of_folders_in_current_read_directory( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-generate-phrase-usage-counts:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__generate_phrase_usage_counts( ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-get-cgi-information:
template-runtime-code-standard-for-operand-count-zero
----
template-runtime-code-for-action-get-current-time-in-epoch-seconds:
template-runtime-code-for-every-action-begin

runtime-code-storage-item-result = sprintf( "%d" , time ) ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-get-definitions-from-file:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
open-file-for-reading

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

&function__get_definitions_from_file( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-if-else:
# begin action if else  <new_line>
} else {  <new_line>
# end action if else  <new_line>
----
template-runtime-code-for-action-if-end:
# begin action if end  <new_line>
}  <new_line>
# end action if end  <new_line>
----
template-runtime-code-for-action-if-no-begin:
# begin action if no begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'no' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 ) {  <new_line>
# end action if no begin  <new_line>
----
template-runtime-code-for-action-if-yes-begin:
# begin action if yes begin  <new_line>
$global_pointer_to_word = index( runtime-code-for-operand-number-one , 'yes' ) ;  <new_line>
if ( $global_pointer_to_word >= 0 ) {  <new_line>
# end action if yes begin  <new_line>
----
template-runtime-code-for-action-linewise-read-from-file-and-use-handler:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_target_phrase_name = $global_operand_two ;  <new_line>
&function__linewise_read_from_file_and_use_handler( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-modification-time-of-file:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
&function__modification_time_of_file( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-no-if-any-no:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $global_concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-no-if-not-yes:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $global_concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-not-recognized:
# $global_action_debug_line = '***** <dashrep_placeholder_phrase_being_defined> **** current-result-storage-position *** action name not recognized, so direct replacement *' . runtime-code-for-concatenated-all-operands ;  <new_line>
# print $global_action_debug_line . "\n" ;  <new_line>

runtime-code-storage-item-result = runtime-code-for-concatenated-all-operands ;  <new_line>
----
template-runtime-code-for-action-numeric-add:
template-runtime-code-standard-for-operand-count-variable
----
template-runtime-code-for-action-numeric-maximum:
template-runtime-code-standard-for-operand-count-variable
----
template-runtime-code-for-action-numeric-minimum:
template-runtime-code-standard-for-operand-count-variable
----
template-runtime-code-for-action-numeric-multiply:
template-runtime-code-standard-for-operand-count-variable
----
template-runtime-code-for-action-prepend-text-no-space:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name
check-operand-two-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
runtime-code-storage-item-result = ' ' ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-put-into-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_pointer_to_first_space = index( $global_concatenated_all_operands , ' ' ) ;  <new_line>
code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end = substr( $global_concatenated_all_operands , ( $global_pointer_to_first_space + 1 ) ) ;  <new_line>
runtime-code-storage-item-result = '' ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-rename-file:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_source_file_name = $global_operand_one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_target_file_name = $global_operand_two ;  <new_line>
&function__rename_file( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-trace-show-where:
template-runtime-code-for-every-action-begin

&function__open_trace_output_file_if_not_open( ) ;  <new_line>
print TRACE_OUT 'trace-show-where:' . "\n" . ' no-space phrase-being-defined no-space ' . "\n" . '-' . '-' . '-' . '-' . "\n" ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-trace-show:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

&function__open_trace_output_file_if_not_open( ) ;  <new_line>

if ( exists( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end ) ) {  <new_line>
print TRACE_OUT runtime-code-for-operand-number-one . ':' . "\n" . code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end . "\n" . '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' . "\n" ;  <new_line>
} else {  <new_line>
print TRACE_OUT runtime-code-for-operand-number-one . ':' . "\n" . '<character_hyphen><character_hyphen><character_hyphen><character_hyphen>' . "\n" ;  <new_line>
}  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>

combee
$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__trace_show( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>
comenn

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-use-handler-with-each-word-in-phrase:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-not-empty
check-operand-two-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

my $local_pointer_to_next_space ;  <new_line>
my $local_pointer_to_future_space ;  <new_line>
my $local_pointer_to_next_word ;  <new_line>
my $local_endless_loop_counter ;  <new_line>
my $local_endless_loop_counter_limit ;  <new_line>
my $length_of_text_in_word_list ; <new_line>

template-storage-item-containing-word-list-associated-with-loop = code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ;  <new_line>
$local_pointer_to_next_space = -1 ;  <new_line>
$length_of_text_in_word_list = length( template-storage-item-containing-word-list-associated-with-loop ) ;  <new_line>

combee ****
# print "length of word list is " . $length_of_text_in_word_list . "\n" ;  <new_line>
**** comenn

combee ****
# start ABABA loop, which has exit in middle of loop  <new_line>
**** comenn

$local_endless_loop_counter = 0 ;  <new_line>
$local_endless_loop_counter_limit = int( ( $length_of_text_in_word_list / 2 ) ) + 10 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_endless_loop_counter ++ ;  <new_line>
if ( $local_endless_loop_counter > $local_endless_loop_counter_limit ) {  <new_line>
last ;  <new_line>
}  <new_line>

if ( $local_pointer_to_next_space >= $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

combee ****
# start a second, inner, ABABA loop, which has exit in middle of loop  <new_line>
**** comenn

$local_counter_number_of_adjacent_spaces = 0 ;  <new_line>
while ( 1 == 1 ) {  <new_line>

$local_counter_number_of_adjacent_spaces ++ ;  <new_line>
if ( $local_counter_number_of_adjacent_spaces > $length_of_text_in_word_list ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_future_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_space + 1 ) ;  <new_line>

combee ****
# print "future space at " . $local_pointer_to_future_space . "\n" ;  <new_line>
**** comenn

combee ****
# exit from second, inner, ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
**** comenn

if ( $local_pointer_to_future_space != $local_pointer_to_next_space + 1 ) {  <new_line>
last ;  <new_line>
}  <new_line>

$local_pointer_to_next_space = $local_pointer_to_future_space ;  <new_line>

}  combee **** # end of second, inner, ABABA loop **** comenn  <new_line>

$local_pointer_to_next_word = $local_pointer_to_next_space + 1 ;  <new_line>

combee ****
# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>
**** comenn

$local_pointer_to_next_space = index( template-storage-item-containing-word-list-associated-with-loop , ' ' , $local_pointer_to_next_word ) ;  <new_line>

combee ****
# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>
**** comenn

if ( $local_pointer_to_next_space < 0 ) {  <new_line>
$local_pointer_to_next_space = $length_of_text_in_word_list ;  <new_line>
}  <new_line>

combee ****
# exit from ABABA loop; if next line is edited, ensure it reaches an end point; otherwise there will be an endless loop  <new_line>
**** comenn

if ( ( $local_pointer_to_next_word >= $local_pointer_to_next_space ) || ( $local_pointer_to_next_word < 0 ) || ( $local_pointer_to_next_space < 0 ) ) {  <new_line>
last ;  <new_line>
}  <new_line>

$global_word_to_use_in_handler = substr( template-storage-item-containing-word-list-associated-with-loop , $local_pointer_to_next_word , $local_pointer_to_next_space - $local_pointer_to_next_word ) ;  <new_line>

combee ****
# print "next word starts at " . $local_pointer_to_next_word . "\n" ;  <new_line>
# print "next space at " . $local_pointer_to_next_space . "\n" ;  <new_line>
# print "word to use in handler is " . $global_word_to_use_in_handler . "\n" ;  <new_line>
**** comenn

code-get-or-put-phrase-definition-begin $global_string_word_to_use_in_handler code-get-or-put-phrase-definition-end = $global_word_to_use_in_handler ;  <new_line>
& no-space function-name-prefix no-space handler-name-with-underscores no-space ( ) ;  <new_line>

}  combee **** # end of ABABA loop **** comenn  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-write-dashrep-definitions-listed-in-phrase-to-file:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
&function__write_dashrep_definitions_listed_in_phrase_to_file( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-write-gathered-listed-items-to-end-of-file:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_target_file_name = $global_operand_two ;  <new_line>
open-file-for-appending

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__write_gathered_listed_items_to_end_of_file( ) ;  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-all-yes:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
$global_concatenated_all_operands_modified = ' ' . $global_concatenated_all_operands . ' ' ;  <new_line>
$accumulated_remaining_text = '' ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>

while ( $pointer_to_next_match > 0 ) {  <new_line>
$accumulated_remaining_text .= substr( $global_concatenated_all_operands_modified , 0 , ( $pointer_to_next_match - 1 ) ) ;  <new_line>
$global_concatenated_all_operands_modified = substr( $global_concatenated_all_operands_modified , ( $pointer_to_next_match + 3 ) ) ;  <new_line>
$pointer_to_next_match = index( $global_concatenated_all_operands_modified , 'yes' ) ;  <new_line>
}  <new_line>

$accumulated_remaining_text .= ' ' . $global_concatenated_all_operands_modified ;  <new_line>
$accumulated_remaining_text =~ s/ //g ;  <new_line>

if ( length( $accumulated_remaining_text ) == 0 ) {  <new_line>
$global_action_result = 'yes' ;  <new_line>
} else {  <new_line>
$global_action_result = 'no' ;  <new_line>
}  <new_line>

runtime-code-storage-item-result = $global_action_result ;  <new_line>

combee
$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
&function__yes_if_all_yes( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>
comenn

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-any-yes:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>
if ( index( $global_concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-if-not-no:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $global_concatenated_all_operands , 'no' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-empty-phrase:
template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>

if ( &function_parameterized__yes_or_no_phrase_name( $global_operand_one ) == $global_no ) {  <new_line>
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__yes_or_no_empty_phrase__case_not_phrase ' . $global_operand_one . ' ' ;  <new_line>
} else {  <new_line>

$global_source_text = code-get-or-put-phrase-definition-begin $global_operand_one code-get-or-put-phrase-definition-end ;  <new_line>

if ( $global_yes == &function_parameterized__yes_or_no_empty( $global_source_text ) ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-folder-exists:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__yes_or_no_folder_exists( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-opposite:
template-runtime-code-for-every-action-begin

$global_concatenated_all_operands = runtime-code-for-concatenated-all-operands ;  <new_line>

if ( index( $global_concatenated_all_operands , 'yes' ) >= 0 ) {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-phrase-definitions:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-phrase-name
check-operand-two-is-phrase-name

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

if ( code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-one code-get-or-put-phrase-definition-end eq code-get-or-put-phrase-definition-begin runtime-code-for-operand-number-two code-get-or-put-phrase-definition-end ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-yes-or-no-same-two-words:
template-runtime-code-for-every-action-begin

if ( runtime-code-for-operand-number-one eq runtime-code-for-operand-number-two ) {  <new_line>
runtime-code-storage-item-result = 'yes' ;  <new_line>
} else {  <new_line>
runtime-code-storage-item-result = 'no' ;  <new_line>
}  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-for-action-zero-one-multiple:
template-runtime-code-for-every-action-begin

runtime-code-check-operand-initialize

check-operand-one-is-positive-integer

if ( $global_yes_or_no_operand_error == $global_no ) {  <new_line>

runtime-code-storage-item-result = 'multiple' ;  <new_line>

if ( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) <= 0 ) {  <new_line>
runtime-code-storage-item-result = 'zero' ;  <new_line>
} elsif ( &function_parameterized__convert_numeric_text_into_numeric_value( runtime-code-for-operand-number-one ) == 1 ) {  <new_line>
runtime-code-storage-item-result = 'one' ;  <new_line>
}  <new_line>

} else {  <new_line>
template-runtime-code-store-result-for-case-error
}  <new_line>
template-runtime-code-for-every-action-end
----
template-runtime-code-for-every-action-begin:
# $global_action_debug_line = '***** <dashrep_placeholder_phrase_being_defined> **** current-result-storage-position *** <dashrep_placeholder_action_name> ** number-of-operands *' . runtime-code-for-concatenated-all-operands ;  <new_line>
# print $global_action_debug_line . "\n" ;  <new_line>
combee ****
**** comenn

combee ****
# <new_line>
**** comenn
----
template-runtime-code-for-every-action-end:
combee ****
**** comenn
# print 'result: ' . runtime-code-storage-item-result . "\n" ;  <new_line>
# end of action <dashrep_placeholder_action_name><new_line>
----
template-runtime-code-for-overdue-start-of-if-branch:
# begin overdue start of if branch  <new_line>
if ( 1 == 1 ) {  <new_line>
# end overdue start of if branch  <new_line>
----
template-runtime-code-for-overdue-terminate-if-branch:
# begin overdue end of if branch  <new_line>
}  <new_line>
# end overdue end of if branch  <new_line>
----
template-runtime-code-identify-phrase-found:
$global_yes_found_word{ runtime-code-word-within-source-text } = $global_yes ;  <new_line>
----
template-runtime-code-identify-phrases-all-found:
for ( $global_word_pointer_numeric = 1 ; $global_word_pointer_numeric <= $global_number_of_words ; $global_word_pointer_numeric ++ ) {  <new_line>

template-runtime-code-identify-phrase-found

}  <new_line>
----
template-runtime-code-if-case-yes-phrase-found:
if ( exists( $global_yes_found_word{ substr( $global_source_text , $global_begin_position_for_word[ $global_word_number ] , $global_length_of_word[ $global_word_number ] ) } ) ) {  <new_line>
----
template-runtime-code-standard-for-operand-count-four:
# this code generated from standard template  <new_line>

template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
$global_operand_four = runtime-code-for-operand-number-four ;  <new_line>
&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-for-operand-count-one:
# this code generated from standard template  <new_line>

template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-for-operand-count-three:
# this code generated from standard template  <new_line>

template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
$global_operand_three = runtime-code-for-operand-number-three ;  <new_line>
&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-for-operand-count-two:
# this code generated from standard template  <new_line>

template-runtime-code-for-every-action-begin

$global_operand_one = runtime-code-for-operand-number-one ;  <new_line>
$global_operand_two = runtime-code-for-operand-number-two ;  <new_line>
&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-for-operand-count-variable:
# this object code generated from standard template with variable number of operands placed into global_source_text  <new_line>

template-runtime-code-for-every-action-begin

$global_source_text = runtime-code-for-concatenated-all-operands ;  <new_line>
&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-standard-for-operand-count-zero:
# this code generated from standard template  <new_line>

template-runtime-code-for-every-action-begin

&function__ no-space action-name-with-underscores no-space ( ) ;  <new_line>
runtime-code-storage-item-result = $global_action_result ;  <new_line>

template-runtime-code-for-every-action-end
----
template-runtime-code-store-result-for-case-error:
runtime-code-storage-item-result = 'dashrep_compiled_runtime_error__' . $global_runtime_error_type . ': <dashrep_placeholder_action_name> ' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>
----
template-runtime-code-wrong-number-of-operands:
template-runtime-code-for-every-action-begin

runtime-code-storage-item-result = 'dashrep_compile_time_error__template_runtime_code_wrong_number_of_operands__case_wrong_number_of_operands' . runtime-code-for-concatenated-all-operands . ' ' ;  <new_line>

template-runtime-code-for-every-action-end
----
template-specify-operand-one-is-file-name-for-reading:
combee ****** todo ****** comenn
----
template-specify-operand-two-is-file-name-for-appending:
combee ****** todo ****** comenn
----
